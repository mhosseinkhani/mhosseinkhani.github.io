{"version":3,"sources":["webpack:///./node_modules/@angular/material-moment-adapter/esm5/material-moment-adapter.es5.js","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/button-toggle/button-toggle.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/button-toggle/button-toggle.component.ts","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/button/button.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/button/button.component.ts","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/chips/chips.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/chips/chips.component.ts","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/icon/icon.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/icon/icon.component.ts","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/progress-bar/progress-bar.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/progress-bar/progress-bar.component.ts","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/progress-spinner/progress-spinner.component.html","webpack:///./src/app/content/pages/components/material/buttons-and-indicators/progress-spinner/progress-spinner.component.ts","webpack:///./src/app/content/pages/components/material/data-table/material-table/material-table.component.html","webpack:///./src/app/content/pages/components/material/data-table/material-table/material-table.component.ts","webpack:///./src/app/content/pages/components/material/data-table/paginator/paginator.component.html","webpack:///./src/app/content/pages/components/material/data-table/paginator/paginator.component.ts","webpack:///./src/app/content/pages/components/material/data-table/sort-header/sort-header.component.html","webpack:///./src/app/content/pages/components/material/data-table/sort-header/sort-header.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/autocomplete/autocomplete.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/autocomplete/autocomplete.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/checkbox/checkbox.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/checkbox/checkbox.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/datepicker/datepicker.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/datepicker/datepicker.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/formfield/formfield.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/formfield/formfield.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/input/input.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/input/input.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/radiobutton/radiobutton.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/radiobutton/radiobutton.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/select/select.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/select/select.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/slider/slider.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/slider/slider.component.ts","webpack:///./src/app/content/pages/components/material/formcontrols/slidertoggle/slidertoggle.component.html","webpack:///./src/app/content/pages/components/material/formcontrols/slidertoggle/slidertoggle.component.ts","webpack:///./src/app/content/pages/components/material/layout/card/card.component.html","webpack:///./src/app/content/pages/components/material/layout/card/card.component.ts","webpack:///./src/app/content/pages/components/material/layout/default-forms/default-forms.component.html","webpack:///./src/app/content/pages/components/material/layout/default-forms/default-forms.component.ts","webpack:///./src/app/content/pages/components/material/layout/divider/divider.component.html","webpack:///./src/app/content/pages/components/material/layout/divider/divider.component.ts","webpack:///./src/app/content/pages/components/material/layout/expansion-panel/expansion-panel.component.html","webpack:///./src/app/content/pages/components/material/layout/expansion-panel/expansion-panel.component.ts","webpack:///./src/app/content/pages/components/material/layout/grid-list/grid-list.component.html","webpack:///./src/app/content/pages/components/material/layout/grid-list/grid-list.component.ts","webpack:///./src/app/content/pages/components/material/layout/list/list.component.html","webpack:///./src/app/content/pages/components/material/layout/list/list.component.ts","webpack:///./src/app/content/pages/components/material/layout/material-tabs/material-tabs.component.html","webpack:///./src/app/content/pages/components/material/layout/material-tabs/material-tabs.component.ts","webpack:///./src/app/content/pages/components/material/layout/stepper/stepper.component.html","webpack:///./src/app/content/pages/components/material/layout/stepper/stepper.component.ts","webpack:///./src/app/content/pages/components/material/layout/tree/tree.component.html","webpack:///./src/app/content/pages/components/material/layout/tree/tree.component.ts","webpack:///./src/app/content/pages/components/material/material.component.html","webpack:///./src/app/content/pages/components/material/material.component.ts","webpack:///./src/app/content/pages/components/material/material.module.ts","webpack:///./src/app/content/pages/components/material/navigation/menu/menu.component.html","webpack:///./src/app/content/pages/components/material/navigation/menu/menu.component.ts","webpack:///./src/app/content/pages/components/material/navigation/sidenav/sidenav.component.html","webpack:///./src/app/content/pages/components/material/navigation/sidenav/sidenav.component.ts","webpack:///./src/app/content/pages/components/material/navigation/toolbar/toolbar.component.html","webpack:///./src/app/content/pages/components/material/navigation/toolbar/toolbar.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/bottom-sheet/bottom-sheet-example/bottom-sheet-example.component.html","webpack:///./src/app/content/pages/components/material/popups-and-modals/bottom-sheet/bottom-sheet-example/bottom-sheet-example.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/bottom-sheet/bottom-sheet.component.html","webpack:///./src/app/content/pages/components/material/popups-and-modals/bottom-sheet/bottom-sheet.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/dialog/dialog.component.html","webpack:///./src/app/content/pages/components/material/popups-and-modals/dialog/dialog.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/material-tooltip/material-tooltip.component.html","webpack:///./src/app/content/pages/components/material/popups-and-modals/material-tooltip/material-tooltip.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/snackbar/pizza-party.component.ts","webpack:///./src/app/content/pages/components/material/popups-and-modals/snackbar/snackbar.component.html","webpack:///./src/app/content/pages/components/material/popups-and-modals/snackbar/snackbar.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AACqD;AACC;AAChD;AACU;;AAElD;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,EAAE;AACb,aAAa,6CAAsB,IAAI,mCAAa;AACpD;AACA;AACA,UAAU;AACV;AACA,0CAA0C,4DAAc;AACxD;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,2CAA2C,qDAAqD,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,yCAAyC,uCAAuC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,EAAE;AAC5B;AACA;AACA,oDAAoD;AACpD,SAAS,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,sEAAe,IAAI,GAAG;AACtG,SAAS,gCAAgC,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","file":"components-material-material-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { Inject, Injectable, Optional, InjectionToken, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default, {  } from 'moment';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar moment = _rollupMoment__default || _rollupMoment;\n/**\n * InjectionToken for moment date adapter to configure options.\n * @type {?}\n */\nvar MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false\n    };\n}\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range(length, valueFunction) {\n    /** @type {?} */\n    var valuesArray = Array(length);\n    for (var i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/**\n * Adapts Moment.js Dates for use with Angular Material.\n */\nvar MomentDateAdapter = /** @class */ (function (_super) {\n    __extends(MomentDateAdapter, _super);\n    function MomentDateAdapter(dateLocale, options) {\n        var _this = _super.call(this) || this;\n        _this.options = options;\n        _this.setLocale(dateLocale || moment.locale());\n        return _this;\n    }\n    /**\n     * @param {?} locale\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.setLocale = /**\n     * @param {?} locale\n     * @return {?}\n     */\n    function (locale) {\n        var _this = this;\n        _super.prototype.setLocale.call(this, locale);\n        /** @type {?} */\n        var momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, function (i) { return _this.createDate(2017, 0, i + 1).format('D'); }),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getYear = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).year();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getMonth = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).month();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).date();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getDayOfWeek = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).day();\n    };\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getMonthNames = /**\n     * @param {?} style\n     * @return {?}\n     */\n    function (style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    };\n    /**\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getDateNames = /**\n     * @return {?}\n     */\n    function () {\n        return this._localeData.dates;\n    };\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getDayOfWeekNames = /**\n     * @param {?} style\n     * @return {?}\n     */\n    function (style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getYearName = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).format('YYYY');\n    };\n    /**\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getFirstDayOfWeek = /**\n     * @return {?}\n     */\n    function () {\n        return this._localeData.firstDayOfWeek;\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.getNumDaysInMonth = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).daysInMonth();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.clone = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date.clone().locale(this.locale);\n    };\n    /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.createDate = /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    function (year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (month < 0 || month > 11) {\n            throw Error(\"Invalid month index \\\"\" + month + \"\\\". Month index has to be between 0 and 11.\");\n        }\n        if (date < 1) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\". Date has to be greater than 0.\");\n        }\n        /** @type {?} */\n        var result = this._createMoment({ year: year, month: month, date: date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid()) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\" for month with index \\\"\" + month + \"\\\".\");\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.today = /**\n     * @return {?}\n     */\n    function () {\n        return this._createMoment().locale(this.locale);\n    };\n    /**\n     * @param {?} value\n     * @param {?} parseFormat\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.parse = /**\n     * @param {?} value\n     * @param {?} parseFormat\n     * @return {?}\n     */\n    function (value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    };\n    /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.format = /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n    function (date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    };\n    /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.addCalendarYears = /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n    function (date, years) {\n        return this.clone(date).add({ years: years });\n    };\n    /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.addCalendarMonths = /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n    function (date, months) {\n        return this.clone(date).add({ months: months });\n    };\n    /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.addCalendarDays = /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n    function (date, days) {\n        return this.clone(date).add({ days: days });\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.toIso8601 = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).format();\n    };\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     * @param {?} value\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.deserialize = /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return _super.prototype.deserialize.call(this, value);\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.isDateInstance = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) {\n        return moment.isMoment(obj);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.isValid = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return this.clone(date).isValid();\n    };\n    /**\n     * @return {?}\n     */\n    MomentDateAdapter.prototype.invalid = /**\n     * @return {?}\n     */\n    function () {\n        return moment.invalid();\n    };\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    /**\n     * Creates a Moment instance while respecting the current UTC settings.\n     * @private\n     * @param {...?} args\n     * @return {?}\n     */\n    MomentDateAdapter.prototype._createMoment = /**\n     * Creates a Moment instance while respecting the current UTC settings.\n     * @private\n     * @param {...?} args\n     * @return {?}\n     */\n    function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return (this.options && this.options.useUtc) ? moment.utc.apply(moment, args) : moment.apply(void 0, args);\n    };\n    MomentDateAdapter.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    MomentDateAdapter.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS,] }] }\n    ]; };\n    return MomentDateAdapter;\n}(DateAdapter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\nvar MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MomentDateModule = /** @class */ (function () {\n    function MomentDateModule() {\n    }\n    MomentDateModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        {\n                            provide: DateAdapter,\n                            useClass: MomentDateAdapter,\n                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                        }\n                    ],\n                },] },\n    ];\n    return MomentDateModule;\n}());\nvar ɵ0 = MAT_MOMENT_DATE_FORMATS;\nvar MatMomentDateModule = /** @class */ (function () {\n    function MatMomentDateModule() {\n    }\n    MatMomentDateModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [MomentDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }],\n                },] },\n    ];\n    return MatMomentDateModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MomentDateModule, MatMomentDateModule, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_ADAPTER_OPTIONS, MomentDateAdapter, MAT_MOMENT_DATE_FORMATS };\n//# sourceMappingURL=material-moment-adapter.es5.js.map\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/button-toggle/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-button-toggle&gt;</code> are on/off toggles with the appearance of a button. These toggles can be configured to behave as either radio-buttons or checkboxes. While they can be standalone, they are typically part of a\\r\\n\\t\\t\\t\\t\\t<mark>mat-button-toggle-group</mark>.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-button-toggle>Toggle me!</mat-button-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleVertical\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe button-toggles can be rendered in a vertical orientation by adding the\\r\\n\\t\\t\\t\\t\\t<mark>vertical</mark> attribute.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-button-toggle vertical=\\\"true\\\">Toggle me!</mat-button-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleList\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tDividers can be added to lists as a means of separating content into distinct sections. Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-button-toggle-group #group=\\\"matButtonToggleGroup\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-button-toggle value=\\\"left\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>format_align_left</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-button-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-button-toggle value=\\\"center\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>format_align_center</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-button-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-button-toggle value=\\\"right\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>format_align_right</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-button-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-button-toggle value=\\\"justify\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>format_align_justify</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-button-toggle>\\r\\n\\t\\t\\t\\t\\t</mat-button-toggle-group>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"example-selected-value\\\">Selected value: {{group.value}}</div>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic button-toggles',\r\n\thtmlCode: `<mat-button-toggle>Toggle me!</mat-button-toggle>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Basic button-toggles\r\n*/\r\n@Component({\r\n  selector: 'button-toggle-overview-example',\r\n  templateUrl: 'button-toggle-overview-example.html',\r\n  styleUrls: ['button-toggle-overview-example.css'],\r\n})\r\nexport class ButtonToggleOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst vertical = {\r\n\tbeforeCodeTitle: 'Vertical button toggle',\r\n\thtmlCode: `<mat-button-toggle [vertical]=\"true\">Toggle me!</mat-button-toggle>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title  Vertical button-toggles\r\n*/\r\n@Component({\r\n  selector: 'button-toggle-vertical-example',\r\n  templateUrl: 'button-toggle-vertical-example.html',\r\n  styleUrls: ['button-toggle-vertical-example.css'],\r\n})\r\nexport class ButtonToggleVerticalExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst listExample = {\r\n\tbeforeCodeTitle: 'Exclusive selection',\r\n\thtmlCode: `\r\n<mat-button-toggle-group #group=\"matButtonToggleGroup\">\r\n  <mat-button-toggle value=\"left\">\r\n    <mat-icon>format_align_left</mat-icon>\r\n  </mat-button-toggle>\r\n  <mat-button-toggle value=\"center\">\r\n    <mat-icon>format_align_center</mat-icon>\r\n  </mat-button-toggle>\r\n  <mat-button-toggle value=\"right\">\r\n    <mat-icon>format_align_right</mat-icon>\r\n  </mat-button-toggle>\r\n  <mat-button-toggle value=\"justify\" disabled>\r\n    <mat-icon>format_align_justify</mat-icon>\r\n  </mat-button-toggle>\r\n</mat-button-toggle-group>\r\n<div class=\"example-selected-value\">Selected value: {{group.value}}</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Exclusive selection\r\n*/\r\n@Component({\r\n  selector: 'button-toggle-exclusive-example',\r\n  templateUrl: 'button-toggle-exclusive-example.html',\r\n  styleUrls: ['button-toggle-exclusive-example.css'],\r\n})\r\nexport class ButtonToggleExclusiveExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-button-toggle',\r\n\ttemplateUrl: './button-toggle.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-selected-value {\r\n\t\tmargin: 15px 0;\r\n\t  }\r\n\t`]\r\n})\r\nexport class ButtonToggleComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleVertical;\r\n\texampleList;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleVertical = vertical;\r\n\t\tthis.exampleList = listExample;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/button/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAngular Material buttons are native\\r\\n\\t\\t\\t\\t\\t<code>&lt;button&gt;</code> or\\r\\n\\t\\t\\t\\t\\t<code>&lt;a&gt;</code> elements enhanced with Material Design styling and ink ripples.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t\\tNative\\r\\n\\t\\t\\t\\t\\t\\t<code>&lt;button&gt;</code> and\\r\\n\\t\\t\\t\\t\\t\\t<code>&lt;a&gt;</code> elements are always used in order to provide the most straightforward and accessible experience for users. A\\r\\n\\t\\t\\t\\t\\t\\t<code>&lt;button&gt;</code> element should be used whenever some action is performed. An\\r\\n\\t\\t\\t\\t\\t\\t<code>&lt;a&gt;</code> element should be used whenever the user will navigate to another view.\\r\\n\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"button-row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button>Basic</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"primary\\\">Primary</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"accent\\\">Accent</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"warn\\\">Warn</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button disabled>Disabled</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<a mat-button routerLink=\\\".\\\">Link</a>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleRaised\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"button-row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button>Basic</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\">Primary</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"accent\\\">Accent</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"warn\\\">Warn</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button disabled>Disabled</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<a mat-raised-button routerLink=\\\".\\\">Link</a>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleIcon\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"button-row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button color=\\\"primary\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button color=\\\"accent\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button color=\\\"warn\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exmapleFab\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"button-row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab>Basic</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab color=\\\"primary\\\">Primary</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab color=\\\"accent\\\">Accent</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab color=\\\"warn\\\">Warn</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab disabled>Disabled</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-fab>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<a mat-fab routerLink=\\\".\\\">Link</a>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleMiniFav\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"button-row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab>Basic</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab color=\\\"primary\\\">Primary</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab color=\\\"accent\\\">Accent</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab color=\\\"warn\\\">Warn</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab disabled>Disabled</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-mini-fab>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<a mat-mini-fab routerLink=\\\".\\\">Link</a>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic buttons',\r\n\thtmlCode: `\r\n<div class=\"button-row\">\r\n  <button mat-button>Basic</button>\r\n  <button mat-button color=\"primary\">Primary</button>\r\n  <button mat-button color=\"accent\">Accent</button>\r\n  <button mat-button color=\"warn\">Warn</button>\r\n  <button mat-button disabled>Disabled</button>\r\n  <a mat-button routerLink=\".\">Link</a>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Button varieties\r\n*/\r\n@Component({\r\n  selector: 'button-types-example',\r\n  templateUrl: 'button-types-example.html',\r\n  styleUrls: ['button-types-example.css'],\r\n})\r\nexport class ButtonTypesExample {}`,\r\n\tcssCode: `\r\n.example-button-row {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst raised = {\r\n\tbeforeCodeTitle: 'Raised buttons',\r\n\thtmlCode: `\r\n<div class=\"button-row\">\r\n  <button mat-raised-button>Basic</button>\r\n  <button mat-raised-button color=\"primary\">Primary</button>\r\n  <button mat-raised-button color=\"accent\">Accent</button>\r\n  <button mat-raised-button color=\"warn\">Warn</button>\r\n  <button mat-raised-button disabled>Disabled</button>\r\n  <a mat-raised-button routerLink=\".\">Link</a>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Button varieties\r\n*/\r\n@Component({\r\n  selector: 'button-types-example',\r\n  templateUrl: 'button-types-example.html',\r\n  styleUrls: ['button-types-example.css'],\r\n})\r\nexport class ButtonTypesExample {}`,\r\n\tcssCode: `\r\n.example-button-row {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst icon = {\r\n\t\tbeforeCodeTitle: 'Icon buttons',\r\n\t\thtmlCode: `\r\n<div class=\"button-row\">\r\n  <button mat-icon-button>\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <button mat-icon-button color=\"primary\">\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <button mat-icon-button color=\"accent\">\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <button mat-icon-button color=\"warn\">\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <button mat-icon-button disabled>\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  </div>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Button varieties\r\n*/\r\n@Component({\r\n  selector: 'button-types-example',\r\n  templateUrl: 'button-types-example.html',\r\n  styleUrls: ['button-types-example.css'],\r\n})\r\nexport class ButtonTypesExample {}\\n\\n`,\r\n\t\tcssCode: `\r\n.example-button-row {\r\n  display: flex;\r\n  align-items: center;\r\n justify-content: space-around;\r\n}`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst fab = {\r\n\tbeforeCodeTitle: 'Fab buttons',\r\n\thtmlCode: `\r\n<div class=\"button-row\">\r\n  <button mat-fab>Basic</button>\r\n  <button mat-fab color=\"primary\">Primary</button>\r\n  <button mat-fab color=\"accent\">Accent</button>\r\n  <button mat-fab color=\"warn\">Warn</button>\r\n  <button mat-fab disabled>Disabled</button>\r\n  <button mat-fab>\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <a mat-fab routerLink=\".\">Link</a>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Button varieties\r\n*/\r\n@Component({\r\n  selector: 'button-types-example',\r\n  templateUrl: 'button-types-example.html',\r\n  styleUrls: ['button-types-example.css'],\r\n})\r\nexport class ButtonTypesExample {}`,\r\n\tcssCode: `\r\n.example-button-row {\r\n  display: flex;\r\n  align-items: center;\r\n justify-content: space-around;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst miniFab = {\r\n\tbeforeCodeTitle: 'Mini Fab buttons',\r\n\thtmlCode: `\r\n<div class=\"button-row\">\r\n  <button mat-mini-fab>Basic</button>\r\n  <button mat-mini-fab color=\"primary\">Primary</button>\r\n  <button mat-mini-fab color=\"accent\">Accent</button>\r\n  <button mat-mini-fab color=\"warn\">Warn</button>\r\n  <button mat-mini-fab disabled>Disabled</button>\r\n  <button mat-mini-fab>\r\n    <mat-icon aria-label=\"Example icon-button with a heart icon\">favorite</mat-icon>\r\n  </button>\r\n  <a mat-mini-fab routerLink=\".\">Link</a>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Button varieties\r\n*/\r\n@Component({\r\n  selector: 'button-types-example',\r\n  templateUrl: 'button-types-example.html',\r\n  styleUrls: ['button-types-example.css'],\r\n})\r\nexport class ButtonTypesExample {}`,\r\n\tcssCode: `\r\n.example-button-row {\r\n  display: flex;\r\n  align-items: center;\r\n justify-content: space-around;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-button',\r\n\ttemplateUrl: './button.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-button-row {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: space-around;\r\n\t  }\r\n\t`]\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleRaised;\r\n\texampleIcon;\r\n\texmapleFab;\r\n\texampleMiniFav;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleRaised = raised;\r\n\t\tthis.exampleIcon = icon;\r\n\t\tthis.exmapleFab = fab;\r\n\t\tthis.exampleMiniFav = miniFab;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/chips/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-chip-list&gt;</code> displays a list of values as individual, keyboard accessible, chips.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-chip-list>\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip>One fish</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip>Two fish</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip color=\\\"primary\\\" selected=\\\"true\\\">Primary fish</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip color=\\\"accent\\\" selected=\\\"true\\\">Accent fish</mat-chip>\\r\\n\\t\\t\\t\\t\\t</mat-chip-list>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInput\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe\\r\\n\\t\\t\\t\\t\\t<mark>MatChipInput</mark> directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-form-field&gt;</code> for adding and removing chips. The\\r\\n\\t\\t\\t\\t\\t<code>&lt;input&gt;</code> with\\r\\n\\t\\t\\t\\t\\t<mark>MatChipInput</mark> can be placed inside or outside the chip-list element.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAn example of chip input placed inside the chip-list element.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"demo-chip-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip-list #chipList>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-chip *ngFor=\\\"let fruit of fruits\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\" (remove)=\\\"remove(fruit)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{{fruit.name}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input placeholder=\\\"New fruit...\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\" [matChipInputAddOnBlur]=\\\"addOnBlur\\\" (matChipInputTokenEnd)=\\\"add($event)\\\" />\\r\\n\\t\\t\\t\\t\\t\\t</mat-chip-list>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleStacked\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-chip-list class=\\\"mat-chip-list-stacked\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-chip *ngFor=\\\"let chip of availableColors\\\" selected=\\\"true\\\" [color]=\\\"chip.color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  {{chip.name}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t\\t  </mat-chip-list>\\r\\n\\t\\t\\t\\t\\t\\t\\t  \\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nimport { MatChipInputEvent } from '@angular/material';\r\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic chips',\r\n\thtmlCode: `\r\n<mat-chip-list>\r\n  <mat-chip>One fish</mat-chip>\r\n  <mat-chip>Two fish</mat-chip>\r\n  <mat-chip color=\"primary\" selected=\"true\">Primary fish</mat-chip>\r\n  <mat-chip color=\"accent\" selected=\"true\">Accent fish</mat-chip>\r\n</mat-chip-list>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Basic chips\r\n*/\r\n@Component({\r\n  selector: 'chips-overview-example',\r\n  templateUrl: 'chips-overview-example.html',\r\n  styleUrls: ['chips-overview-example.css'],\r\n})\r\nexport class ChipsOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst input = {\r\n\tbeforeCodeTitle: 'Chips with input',\r\n\thtmlCode: `\r\n<mat-form-field class=\"demo-chip-list\">\r\n  <mat-chip-list #chipList>\r\n    <mat-chip *ngFor=\"let fruit of fruits\" [selectable]=\"selectable\"\r\n      [removable]=\"removable\" (remove)=\"remove(fruit)\">\r\n      {{fruit.name}}\r\n      <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n    </mat-chip>\r\n    <input placeholder=\"New fruit...\"\r\n      [matChipInputFor]=\"chipList\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\" />\r\n  </mat-chip-list>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatChipInputEvent} from '@angular/material';\r\nimport {ENTER, COMMA} from '@angular/cdk/keycodes';\\n\\n\r\n/**\r\n* @title Chips with input\r\n*/\r\n@Component({\r\n  selector: 'chips-input-example',\r\n  templateUrl: 'chips-input-example.html',\r\n  styleUrls: ['chips-input-example.css']\r\n})\r\nexport class ChipsInputExample {\r\n  visible: boolean = true;\r\n  selectable: boolean = true;\r\n  removable: boolean = true;\r\n  addOnBlur: boolean = true;\\n\\n\r\n  // Enter, comma\r\n  separatorKeysCodes = [ENTER, COMMA];\\n\\n\r\n  fruits = [\r\n    { name: 'Lemon' },\r\n    { name: 'Lime' },\r\n    { name: 'Apple' },\r\n  ];\\n\\n\\n\\\r\n  add(event: MatChipInputEvent): void {\r\n    let input = event.input;\r\n    let value = event.value;\\n\\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.fruits.push({ name: value.trim() });\r\n    }\\n\\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\\n\\n\r\n  remove(fruit: any): void {\r\n    let index = this.fruits.indexOf(fruit);\\n\r\n    if (index >= 0) {\r\n      this.fruits.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n`,\r\n\tcssCode: `\r\n.demo-chip-list {\r\n  width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst stacked = {\r\n\tbeforeCodeTitle: 'Stacked chips',\r\n\thtmlCode: `\r\n<<mat-chip-list class=\"mat-chip-list-stacked\">\r\n  <mat-chip *ngFor=\"let chip of availableColors\" selected=\"true\" [color]=\"chip.color\">\r\n    {{chip.name}}\r\n  </mat-chip>\r\n</mat-chip-list>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Stacked chips\r\n*/\r\n@Component({\r\n  selector: 'chips-stacked-example',\r\n  templateUrl: 'chips-stacked-example.html',\r\n  styleUrls: ['chips-stacked-example.css'],\r\n})\r\nexport class ChipsStackedExample {\r\n  color: string;\\n\\n\r\n  availableColors = [\r\n    { name: 'none', color: '' },\r\n    { name: 'Primary', color: 'primary' },\r\n    { name: 'Accent', color: 'accent' },\r\n    { name: 'Warn', color: 'warn' }\r\n  ];\r\n}\r\n`,\r\n\tcssCode: `\r\n\t\tmat-chip {\r\n\t\t\tmax-width: 200px;\r\n\t\t}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-chips',\r\n\ttemplateUrl: './chips.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.demo-chip-list {\r\n\t\twidth: 100%;\r\n\t}\r\n\tmat-chip {\r\n\t\tmax-width: 200px;\r\n\t}\r\n\t`]\r\n})\r\nexport class ChipsComponent implements OnInit {\r\n\texampleBasic;\r\n\texampleInput;\r\n\texampleStacked;\r\n\r\n\tvisible: boolean = true;\r\n\tselectable: boolean = true;\r\n\tremovable: boolean = true;\r\n\taddOnBlur: boolean = true;\r\n\r\n\t// Enter, comma\r\n\tseparatorKeysCodes = [ENTER, COMMA];\r\n\r\n\tfruits = [\r\n\t\t{ name: 'Lemon' },\r\n\t\t{ name: 'Lime' },\r\n\t\t{ name: 'Apple' },\r\n\t];\r\n\r\n\tcolor: string;\r\n\r\n\tavailableColors = [\r\n\t  { name: 'none', color: '' },\r\n\t  { name: 'Primary', color: 'primary' },\r\n\t  { name: 'Accent', color: 'accent' },\r\n\t  { name: 'Warn', color: 'warn' }\r\n\t];\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleInput = input;\r\n\t\tthis.exampleStacked = stacked;\r\n\t}\r\n\r\n\tadd(event: MatChipInputEvent): void {\r\n\t\tconst inputText = event.input;\r\n\t\tconst value = event.value;\r\n\r\n\t\t// Add our fruit\r\n\t\tif ((value || '').trim()) {\r\n\t\t\tthis.fruits.push({ name: value.trim() });\r\n\t\t}\r\n\r\n\t\t// Reset the input value\r\n\t\tif (inputText) {\r\n\t\t\tinputText.value = '';\r\n\t\t}\r\n\t}\r\n\r\n\tremove(fruit: any): void {\r\n\t\tconst index = this.fruits.indexOf(fruit);\r\n\r\n\t\tif (index >= 0) {\r\n\t\t\tthis.fruits.splice(index, 1);\r\n\t\t}\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/icon/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-icon&gt;</code> makes it easier to use vector-based icons in your app. This directive supports both icon fonts and SVG icons, but not bitmap-based formats (png, jpg, etc.).\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b>Registering icons:</b>\\r\\n\\t\\t\\t\\t\\t<mark>MatIconRegistry</mark> is an injectable service that allows you to associate icon names with SVG URLs and define aliases for CSS font classes. Its methods are discussed below and listed in the API summary.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b> Font icons with ligatures:</b> Some fonts are designed to show icons by using\\r\\n\\t\\t\\t\\t\\t<a href=\\\"https://en.wikipedia.org/wiki/Typographic_ligature\\\" target=\\\"_blank\\\">ligatures</a>, for example by rendering the text \\\"home\\\" as a home image. To use a ligature icon, put its text in the content of the\\r\\n\\t\\t\\t\\t\\t<mark>mat-icon</mark> component.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tBy default,\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-icon&gt;</code> expects the\\r\\n\\t\\t\\t\\t\\t<a href=\\\"http://google.github.io/material-design-icons/#icon-font-for-the-web\\\" target=\\\"_blank\\\">Material icons font</a>. (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the\\r\\n\\t\\t\\t\\t\\t<mark>fontSet</mark> input to either the CSS class to apply to use the desired font, or to an alias previously registered with\\r\\n\\t\\t\\t\\t\\t<mark>MatIconRegistry.registerFontClassAlias</mark>.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-icon>home</mat-icon>\\r\\n\\t\\t\\t\\t\\t<mat-icon>queue music</mat-icon>\\r\\n\\t\\t\\t\\t\\t<mat-icon>call split</mat-icon>\\r\\n\\t\\t\\t\\t\\t<mat-icon>event note</mat-icon>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSVG\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-icon&gt;</code> \\r\\n\\t\\t\\t\\t\\tWhen an <mark>mat-icon</mark> component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. \\r\\n\\t\\t\\t\\t\\t(Rather than using an tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS \\r\\n\\t\\t\\t\\t\\t<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword\\\" target=\\\"_blank\\\">currentColor</a> value. \\r\\n\\t\\t\\t\\t\\tThis makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the \\\"color\\\" style on the <mark>mat-icon</mark> element.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t\\tIn order to prevent XSS vulnerabilities, any SVG URLs passed to the \\r\\n\\t\\t\\t\\t\\t\\t<mark>MatIconRegistry</mark> must be marked as trusted resource URLs by using Angular's \\r\\n\\t\\t\\t\\t\\t\\t<mark>DomSanitizer</mark> service.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"explore\\\"></mat-icon>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic icons',\r\n\thtmlCode: `\r\n<mat-icon>home</mat-icon>\r\n<mat-icon>queue music</mat-icon>\r\n<mat-icon>call split</mat-icon>\r\n<mat-icon>event note</mat-icon>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Basic icons\r\n*/\r\n@Component({\r\n  selector: 'icon-overview-example',\r\n  templateUrl: 'icon-overview-example.html',\r\n  styleUrls: ['icon-overview-example.css']\r\n})\r\nexport class IconOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst sVG = {\r\n\tbeforeCodeTitle: 'SVG icons',\r\n\thtmlCode: `<mat-icon svgIcon=\"thumbs-up\"></mat-icon>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {MatIconRegistry} from '@angular/material';\\n\\n\r\n/**\r\n* @title SVG icons\r\n*/\r\n@Component({\r\n  selector: 'icon-svg-example',\r\n  templateUrl: 'icon-svg-example.html',\r\n  styleUrls: ['icon-svg-example.css'],\r\n})\r\nexport class IconSvgExample {\r\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\r\n  iconRegistry.addSvgIcon(\r\n    'thumbs-up',\r\n     sanitizer.bypassSecurityTrustResourceUrl('assets/img/examples/thumbup-icon.svg'));\r\n  }\r\n}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-icon',\r\n\ttemplateUrl: './icon.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class IconComponent implements OnInit {\r\n\texampleBasic;\r\n\texampleSVG;\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleSVG = sVG;\r\n\t}\r\n\tconstructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\r\n\t\ticonRegistry.addSvgIcon(\r\n\t\t\t'explore',\r\n\t\t\tsanitizer.bypassSecurityTrustResourceUrl('./assets/app/media/img/icons/warning.svg'));\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/button/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDeterminate\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-progress-bar&gt;</code>is a horizontal progress-bar for indicating progress and activity.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b>Determinate:</b> Operations where the percentage of the operation complete is known should use the determinate indicator.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-progress-bar mode=\\\"determinate\\\" value=\\\"40\\\"></mat-progress-bar>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleIndeterminate\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tOperations where the user is asked to wait while something finishes and it’s not necessary to indicate how long it will take should use the indeterminate indicator.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBuffer\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tOperations where the user wants to indicate some activity or loading from the server, use the buffer indicator.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-progress-bar mode=\\\"buffer\\\"></mat-progress-bar>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exmapleQuery\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tFor situations where the user wants to indicate pre-loading (until the loading can actually be made), use the query indicator.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-progress-bar mode=\\\"query\\\"></mat-progress-bar>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleConfig\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h2 class=\\\"example-h2\\\">Progress bar configuration</h2>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Color:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"primary\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPrimary\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"accent\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAccent\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"warn\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWarn\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Mode:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"mode\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"determinate\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeterminate\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"indeterminate\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIndeterminate\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"buffer\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tBuffer\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"query\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tQuery\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\" *ngIf=\\\"mode == 'determinate' || mode == 'buffer'\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Progress:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slider class=\\\"example-margin\\\" [(ngModel)]=\\\"value\\\"></mat-slider>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\" *ngIf=\\\"mode == 'buffer'\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Buffer:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slider class=\\\"example-margin\\\" [(ngModel)]=\\\"bufferValue\\\"></mat-slider>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h2 class=\\\"example-h2\\\">Result</h2>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-progress-bar class=\\\"example-margin\\\" [color]=\\\"color\\\" [mode]=\\\"mode\\\" [value]=\\\"value\\\" [bufferValue]=\\\"bufferValue\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-progress-bar>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst determinate = {\r\n\tbeforeCodeTitle: 'Determinate progress-bar',\r\n\thtmlCode: `<mat-progress-bar mode=\"determinate\" value=\"40\"></mat-progress-bar>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Determinate progress-bar\r\n*/\r\n@Component({\r\n  selector: 'progress-bar-determinate-example',\r\n  templateUrl: 'progress-bar-determinate-example.html',\r\n  styleUrls: ['progress-bar-determinate-example.css'],\r\n})\r\nexport class ProgressBarDeterminateExample {}\\n\\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst indeterminate = {\r\n\tbeforeCodeTitle: 'Indeterminate progress-bar',\r\n\thtmlCode: `<mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Indeterminate progress-bar\r\n*/\r\n@Component({\r\n  selector: 'progress-bar-indeterminate-example',\r\n  templateUrl: 'progress-bar-indeterminate-example.html',\r\n  styleUrls: ['progress-bar-indeterminate-example.css'],\r\n})\r\nexport class ProgressBarIndeterminateExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst buffer = {\r\n\tbeforeCodeTitle: 'Buffer progress-bar',\r\n\thtmlCode: `<mat-progress-bar mode=\"buffer\"></mat-progress-bar>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Buffer progress-bar\r\n*/\r\n@Component({\r\n  selector: 'progress-bar-buffer-example',\r\n  templateUrl: 'progress-bar-buffer-example.html',\r\n  styleUrls: ['progress-bar-buffer-example.css'],\r\n})\r\nexport class ProgressBarBufferExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst query = {\r\n\tbeforeCodeTitle: 'Query progress-bar',\r\n\thtmlCode: `<mat-progress-bar mode=\"query\"></mat-progress-bar>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Query progress-bar\r\n*/\r\n@Component({\r\n  selector: 'progress-bar-query-example',\r\n  templateUrl: 'progress-bar-query-example.html',\r\n  styleUrls: ['progress-bar-query-example.css'],\r\n})\r\nexport class ProgressBarQueryExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst config = {\r\n\tbeforeCodeTitle: 'Configurable progress-bar',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Progress bar configuration</h2>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Color:</label>\r\n      <mat-radio-group [(ngModel)]=\"color\">\r\n        <mat-radio-button class=\"example-margin\" value=\"primary\">\r\n          Primary\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"accent\">\r\n          Accent\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"warn\">\r\n          Warn\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n\t<section class=\"example-section\">\r\n      <label class=\"example-margin\">Mode:</label>\r\n      <mat-radio-group [(ngModel)]=\"mode\">\r\n        <mat-radio-button class=\"example-margin\" value=\"determinate\">\r\n          Determinate\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"indeterminate\">\r\n          Indeterminate\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"buffer\">\r\n          Buffer\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"query\">\r\n          Query\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n    <section class=\"example-section\" *ngIf=\"mode == 'determinate' || mode == 'buffer'\">\r\n      <label class=\"example-margin\">Progress:</label>\r\n      <mat-slider class=\"example-margin\" [(ngModel)]=\"value\"></mat-slider>\r\n    </section>\r\n    <section class=\"example-section\" *ngIf=\"mode == 'buffer'\">\r\n      <label class=\"example-margin\">Buffer:</label>\r\n      <mat-slider class=\"example-margin\" [(ngModel)]=\"bufferValue\"></mat-slider>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <section class=\"example-section\">\r\n     <mat-progress-bar\r\n        class=\"example-margin\"\r\n        [color]=\"color\"\r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\">\r\n      </mat-progress-bar>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Configurable progress-bar\r\n*/\r\n@Component({\r\n  selector: 'progress-bar-configurable-example',\r\n  templateUrl: 'progress-bar-configurable-example.html',\r\n  styleUrls: ['progress-bar-configurable-example.css'],\r\n})\r\nexport class ProgressBarConfigurableExample {\r\n  color = 'primary';\r\n  mode = 'determinate';\r\n  value = 50;\r\n  bufferValue = 75;\r\n}`,\r\n\tcssCode: `\r\n.example-h2 {\r\n  margin: 10px;\r\n}\r\n.example-section {\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  height: 60px;\r\n}\r\n.example-margin {\r\n  margin: 0 10px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-progress-bar',\r\n\ttemplateUrl: './progress-bar.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-h2 {\r\n\t\tmargin: 10px;\r\n\t}\r\n\t.example-section {\r\n\t\tdisplay: flex;\r\n\t\talign-content: center;\r\n\t\talign-items: center;\r\n\t\theight: 60px;\r\n\t}\r\n\r\n\t.example-margin {\r\n\t\tmargin: 0 10px;\r\n\t}`]\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n\r\n\texampleDeterminate;\r\n\texampleIndeterminate;\r\n\texampleBuffer;\r\n\texmapleQuery;\r\n\texampleConfig;\r\n\tcolor = 'primary';\r\n\tmode = 'determinate';\r\n\tvalue = 50;\r\n\tbufferValue = 75;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleDeterminate = determinate;\r\n\t\tthis.exampleIndeterminate = indeterminate;\r\n\t\tthis.exampleBuffer = buffer;\r\n\t\tthis.exmapleQuery = query;\r\n\t\tthis.exampleConfig = config;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/progress-spinner/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-progress-spinner&gt;</code> and\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-spinner&gt;</code> are a circular indicators of progress and activity.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-spinner></mat-spinner>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleWarn\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe color of a progress-spinner can be changed by using the\\r\\n\\t\\t\\t\\t\\t<mark>color</mark> property. By default, progress-spinners use the theme's primary color. This can be changed to\\r\\n\\t\\t\\t\\t\\t<mark>'accent'</mark> or\\r\\n\\t\\t\\t\\t\\t<mark>'warn'</mark>.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-spinner [color]=\\\"'accent'\\\"></mat-spinner>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-spinner [color]=\\\"'warn'\\\"></mat-spinner>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleConfig\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Color:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"primary\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPrimary\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"accent\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAccent\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"warn\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWarn\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Mode:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"mode\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"determinate\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDeterminate\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"indeterminate\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIndeterminate\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"example-section\\\" *ngIf=\\\"mode == 'determinate'\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Progress:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slider class=\\\"example-margin\\\" [(ngModel)]=\\\"value\\\"></mat-slider>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\t\\t\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h2 class=\\\"example-h2\\\">Result</h2>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-progress-spinner class=\\\"example-margin\\\" [color]=\\\"color\\\" [mode]=\\\"mode\\\" [value]=\\\"value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-progress-spinner>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic progressbar-spinner',\r\n\thtmlCode: `<mat-spinner></mat-spinner>`,\r\n\ttsCode: `import {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Basic progress-spinner\r\n*/\r\n@Component({\r\n  selector: 'progress-spinner-overview-example',\r\n  templateUrl: 'progress-spinner-overview-example.html',\r\n  styleUrls: ['progress-spinner-overview-example.css'],\r\n})\r\nexport class ProgressSpinnerOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst config = {\r\n\tbeforeCodeTitle: 'Configurable progress spinner',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Progress spinner configuration</h2>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Color:</label>\r\n      <mat-radio-group [(ngModel)]=\"color\">\r\n        <mat-radio-button class=\"example-margin\" value=\"primary\">\r\n          Primary\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"accent\">\r\n          Accent\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"warn\">\r\n          Warn\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Mode:</label>\r\n      <mat-radio-group [(ngModel)]=\"mode\">\r\n\t    <mat-radio-button class=\"example-margin\" value=\"determinate\">\r\n          Determinate\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"indeterminate\">\r\n          Indeterminate\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n    <section class=\"example-section\" *ngIf=\"mode == 'determinate'\">\r\n      <label class=\"example-margin\">Progress:</label>\r\n        <mat-slider class=\"example-margin\" [(ngModel)]=\"value\"></mat-slider>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <mat-progress-spinner\r\n     class=\"example-margin\"\r\n     [color]=\"color\"\r\n     [mode]=\"mode\"\r\n     [value]=\"value\">\r\n    </mat-progress-spinner>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\\n\r\n/**\r\n* @title Configurable progress spinner\r\n*/\r\n@Component({\r\n  selector: 'progress-spinner-configurable-example',\r\n  templateUrl: 'progress-spinner-configurable-example.html',\r\n  styleUrls: ['progress-spinner-configurable-example.css'],\r\n})\r\nexport class ProgressSpinnerConfigurableExample {\r\n  color = 'primary';\r\n  mode = 'determinate';\r\n  value = 50;\r\n}`,\r\n\tcssCode: `\r\n.example-h2 {\r\n  margin: 10px;\r\n}\r\n.example-section {\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  height: 60px;\r\n}\r\n.example-margin {\r\n  margin: 0 10px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst warn = {\r\n\tbeforeCodeTitle: 'Colorized progressbar-spinner',\r\n\thtmlCode: `\r\n<mat-spinner [color]=\"'accent'\"></mat-spinner>\r\n<mat-spinner [color]=\"'warn'\"></mat-spinner>\\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Colorized progress-spinner\r\n*/\r\n@Component({\r\n  selector: 'progress-spinner-colorized-example',\r\n  templateUrl: 'progress-spinner-colorized-example.html',\r\n  styleUrls: ['progress-spinner-colorized-example.css'],\r\n})\r\nexport class ProgressSpinnerColorizedExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-progress-spinner',\r\n\ttemplateUrl: './progress-spinner.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-h2 {\r\n\t\tmargin: 10px;\r\n\t  }\r\n\t  .example-section {\r\n\t\tdisplay: flex;\r\n\t\talign-content: center;\r\n\t\talign-items: center;\r\n\t\theight: 60px;\r\n\t  }\r\n\t  .example-margin {\r\n\t\tmargin: 0 10px;\r\n\t  }\r\n\t`]\r\n})\r\nexport class ProgressSpinnerComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleWarn;\r\n\texampleConfig;\r\n\r\n\tcolor = 'primary';\r\n\tmode = 'determinate';\r\n\tvalue = 50;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleWarn = warn;\r\n\t\tthis.exampleConfig = config;\r\n\t}\r\n}\r\n\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/table/examples\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\tThe\\r\\n\\t\\t\\t<mark>mat-table</mark> provides a Material Design styled data-table that can be used to display rows of data.\\r\\n\\t\\t</p>\\r\\n\\t\\t<p>\\r\\n\\t\\t\\tThis table builds on the foundation of the CDK data-table and uses a similar interface for its data input and template, except\\r\\n\\t\\t\\tthat its element and attribute selectors will be prefixed with\\r\\n\\t\\t\\t<mark>mat-</mark> instead of\\r\\n\\t\\t\\t<mark>cdk-</mark>. For more information on the interface and a detailed look at how the table is implemented, see the\\r\\n\\t\\t\\t<a href=\\\"https://material.angular.io/cdk/table/overview\\\" target=\\\"_blank\\\">guide covering the CDK data-table</a>.\\r\\n\\t\\t</p>\\r\\n\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<mat-table #table1 [dataSource]=\\\"dataSource1\\\">\\r\\n\\t\\t\\t\\t\\t<!--- Note that these columns can be defined in any order.\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tThe actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns1\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns1;\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"examplePagination\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<mat-table #table2 [dataSource]=\\\"dataSource2\\\">\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns2\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns2;\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t\\t<mat-paginator #matPaginator2 [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[5, 10, 20]\\\" [showFirstLastButtons]=\\\"true\\\">\\r\\n\\t\\t\\t\\t</mat-paginator>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleSorting\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<mat-table #table3 [dataSource]=\\\"dataSource3\\\" #sort3=\\\"matSort\\\" matSort>\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns3\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns3;\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleFiltering\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-header\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"mat-form-field\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput (keyup)=\\\"applyFilter4($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<mat-table #table4 [dataSource]=\\\"dataSource4\\\">\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns4\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns4;\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleSelection\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<mat-table #table5 [dataSource]=\\\"dataSource5\\\">\\r\\n\\t\\t\\t\\t\\t<!-- Checkbox Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"select\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-checkbox (change)=\\\"$event ? masterToggle5() : null\\\" [checked]=\\\"selection.hasValue() && isAllSelected5()\\\" [indeterminate]=\\\"selection.hasValue() && !isAllSelected5()\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t</mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-checkbox (click)=\\\"$event.stopPropagation()\\\" (change)=\\\"$event ? selection.toggle(row) : null\\\" [checked]=\\\"selection.isSelected(row)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t</mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns5\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns5;\\\" (click)=\\\"selection.toggle(row)\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleHTTP\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t<div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\r\\n\\t\\t\\t\\t<mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\r\\n\\t\\t\\t\\t<div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\r\\n\\t\\t\\t\\t\\tGitHub's API rate limit has been reached. It will be reset in one minute.\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t<mat-table #sort6=\\\"matSort\\\" #table6 [dataSource]=\\\"dataSource6\\\" class=\\\"example-table\\\" matSort matSortActive=\\\"created\\\" matSortDisableClear\\r\\n\\t\\t\\t matSortDirection=\\\"asc\\\">\\r\\n\\t\\t\\t\\t<!--- Note that these columns can be defined in any order.\\r\\n\\t\\t                                The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\t\\t\\t\\t<!-- Number Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"number\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef>#</mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\">{{ row.number }}</mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- Title Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"title\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef>Title</mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\">{{ row.title }}</mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- State Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"state\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef>State</mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\">{{ row.state }}</mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- Created Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"created\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header disableClear=\\\"true\\\">\\r\\n\\t\\t\\t\\t\\t\\tCreated\\r\\n\\t\\t\\t\\t\\t</mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\">{{ row.created_at | date }}</mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns6\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns6;\\\"></mat-row>\\r\\n\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t<mat-paginator #matPaginator6 [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleMain\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"example-header\\\">\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t<input matInput (keyup)=\\\"applyFilter7($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t<mat-table #sort7=\\\"matSort\\\" [dataSource]=\\\"dataSource7\\\" matSort>\\r\\n\\t\\t\\t\\t<!-- ID Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"id\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> ID </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- Progress Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"progress\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Progress </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\"> {{row.name}} </mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<!-- Color Column -->\\r\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"color\\\">\\r\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Color </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let row\\\" [style.color]=\\\"row.color\\\"> {{row.color}} </mat-cell>\\r\\n\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns7\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns7;\\\"></mat-row>\\r\\n\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t<mat-paginator #matPaginator7 [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\"","import { Component, OnInit, ViewChild, AfterViewInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MatPaginator, MatTableDataSource, MatSort } from '@angular/material';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {merge, Observable, of as observableOf} from 'rxjs';\r\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Basic table',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\">\r\n    <!--- Note that these columns can be defined in any order.\r\n\t\t\t\tThe actual rendered columns are set as a property on the row definition\" -->\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n\t</ng-container>\r\n\t<!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic table\r\n*/\r\n@Component({\r\n  selector: 'table-basic-example',\r\n  styleUrls: ['table-basic-example.css'],\r\n  templateUrl: 'table-basic-example.html',\r\n})\r\nexport class TableBasicExample {\r\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = ELEMENT_DATA;\r\n}\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 500px;\r\n  min-width: 300px;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst pagination = {\r\n\tbeforeCodeTitle: 'Table with pagination',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator #paginator\r\n    [pageSize]=\"10\"\r\n    [pageSizeOptions]=\"[5, 10, 20]\"\r\n    [showFirstLastButtons]=\"true\">\r\n  </mat-paginator>\r\n</div>\r\n\t\t`,\r\n\ttsCode: `\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\\n\r\n/**\r\n* @title Table with pagination\r\n*/\r\n@Component({\r\n  selector: 'table-pagination-example',\r\n  styleUrls: ['table-pagination-example.css'],\r\n  templateUrl: 'table-pagination-example.html',\r\n})\r\nexport class TablePaginationExample {\r\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\\n\r\n  /**\r\n  * Set the paginator after the view init since this component will\r\n  * be able to query its view for the initialized paginator.\r\n  */\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 300px;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst sorting = {\r\n\tbeforeCodeTitle: 'Table with sorting',\r\n\tbeforeCodeDescription: ``,\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource, MatSort} from '@angular/material';\\n\r\n/**\r\n* @title Table with sorting\r\n*/\r\n@Component({\r\n  selector: 'table-sorting-example',\r\n  styleUrls: ['table-sorting-example.css'],\r\n  templateUrl: 'table-sorting-example.html',\r\n})\r\nexport class TableSortingExample {\r\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\\n\r\n  @ViewChild(MatSort) sort: MatSort;\\n\\n\r\n  /**\r\n  * Set the sort after the view init since this component will\r\n  * be able to query its view for the initialized sort.\r\n  */\r\n  ngAfterViewInit() {\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n}\\n\\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\\n\\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 300px;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}\r\n.mat-header-cell.mat-sort-header-sorted {\r\n  color: black;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst filtering = {\r\n\tbeforeCodeTitle: 'Table with filtering',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <div class=\"example-header\">\r\n    <mat-form-field>\r\n      <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filter\">\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-table #table [dataSource]=\"dataSource\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\\n\\n\r\n/**\r\n* @title Table with filtering\r\n*/\r\n@Component({\r\n  selector: 'table-filtering-example',\r\n  styleUrls: ['table-filtering-example.css'],\r\n  templateUrl: 'table-filtering-example.html',\r\n})\r\nexport class TableFilteringExample {\r\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\\n\\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n}\\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\\n\\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tcssCode: `\r\n/* Structure */\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 300px;\r\n}\r\n.example-header {\r\n  min-height: 64px;\r\n  padding: 8px 24px 0;\r\n}\r\n.mat-form-field {\r\n  font-size: 14px;\r\n  width: 100%;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selection = {\r\n\tbeforeCodeTitle: 'Table with selection',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\">\r\n    <!-- Checkbox Column -->\r\n    <ng-container matColumnDef=\"select\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n        <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n          [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n        </mat-checkbox>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">\r\n        <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n          (change)=\"$event ? selection.toggle(row) : null\"\r\n          [checked]=\"selection.isSelected(row)\">\r\n        </mat-checkbox>\r\n      </mat-cell>\r\n    </ng-container>\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"\r\n      (click)=\"selection.toggle(row)\">\r\n    </mat-row>\r\n  </mat-table>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {SelectionModel} from '@angular/cdk/collections';\\n\r\n/**\r\n* @title Table with selection\r\n*/\r\n@Component({\r\n  selector: 'table-selection-example',\r\n  styleUrls: ['table-selection-example.css'],\r\n  templateUrl: 'table-selection-example.html',\r\n})\r\nexport class TableSelectionExample {\r\n  displayedColumns = ['select', 'position', 'name', 'weight', 'symbol'];\r\n  dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n  selection = new SelectionModel<Element>(true, []);\\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected() ?\r\n    this.selection.clear() :\r\n    this.dataSource.data.forEach(row => this.selection.select(row));\r\n  }\r\n}\\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst main = {\r\n\tbeforeCodeTitle: 'Data table with sorting, pagination, and filtering.',\r\n\thtmlCode: `\r\n<div class=\"example-header\">\r\n  <mat-form-field>\r\n    <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filter\">\r\n  </mat-form-field>\r\n</div>\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table [dataSource]=\"dataSource\" matSort>\r\n    <!-- ID Column -->\r\n    <ng-container matColumnDef=\"id\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> ID </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\"> {{row.id}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Progress Column -->\r\n    <ng-container matColumnDef=\"progress\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Progress </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\"> {{row.progress}}% </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\"> {{row.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Color Column -->\r\n    <ng-container matColumnDef=\"color\">\r\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Color </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\"> {{row.color}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n    </mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\\n\r\n/**\r\n* @title Data table with sorting, pagination, and filtering.\r\n*/\r\n@Component({\r\n  selector: 'table-overview-example',\r\n  styleUrls: ['table-overview-example.css'],\r\n  templateUrl: 'table-overview-example.html',\r\n})\r\nexport class TableOverviewExample {\r\n  displayedColumns = ['id', 'name', 'progress', 'color'];\r\n  dataSource: MatTableDataSource<UserData>;\\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\\n\r\n  constructor() {\r\n    // Create 100 users\r\n    const users: UserData[] = [];\r\n      for (let i = 1; i <= 100; i++) { users.push(createNewUser(i)); }\\n\r\n      // Assign the data to the data source for the table to render\r\n      this.dataSource = new MatTableDataSource(users);\r\n  }\\n\r\n  /**\r\n  * Set the paginator and sort after the view init since this component will\r\n  * be able to query its view for the initialized paginator and sort.\r\n  */\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n}\\n\\n\r\n/** Builds and returns a new User. */\r\nfunction createNewUser(id: number): UserData {\r\n  const name =\r\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\r\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\\n\\n\r\n  return {\r\n    id: id.toString(),\r\n    name: name,\r\n    progress: Math.round(Math.random() * 100).toString(),\r\n    color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\r\n   };\r\n}\\n\\n\r\n/** Constants used to fill up our data base. */\r\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\r\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\r\nconst NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\r\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\r\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\\n\r\nexport interface UserData {\r\n  id: string;\r\n  name: string;\r\n  progress: string;\r\n  color: string;\r\n}`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 300px;\r\n}\r\n.example-header {\r\n  min-height: 64px;\r\n  padding: 8px 24px 0;\r\n}\r\n.mat-form-field {\r\n  font-size: 14px;\r\n  width: 100%;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n\tconst hTTP = {\r\n\tbeforeCodeTitle: 'Table retrieving data through HTTP',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <div class=\"example-loading-shade\"\r\n    *ngIf=\"isLoadingResults || isRateLimitReached\">\r\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\r\n    <div class=\"example-rate-limit-reached\" *ngIf=\"isRateLimitReached\">\r\n\t  GitHub's API rate limit has been reached. It will be reset in one minute.\r\n    </div>\r\n  </div>\r\n  <mat-table #table [dataSource]=\"dataSource\" class=\"example-table\"\r\n    matSort matSortActive=\"created\" matSortDisableClear matSortDirection=\"asc\">\r\n    <!--- Note that these columns can be defined in any order.\r\n    The actual rendered columns are set as a property on the row definition\" -->\r\n    <!-- Number Column -->\r\n    <ng-container matColumnDef=\"number\">\r\n      <mat-header-cell *matHeaderCellDef>#</mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">{{ row.number }}</mat-cell>\r\n    </ng-container>\r\n    <!-- Title Column -->\r\n    <ng-container matColumnDef=\"title\">\r\n      <mat-header-cell *matHeaderCellDef>Title</mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">{{ row.title }}</mat-cell>\r\n    </ng-container>\r\n    <!-- State Column -->\r\n    <ng-container matColumnDef=\"state\">\r\n      <mat-header-cell *matHeaderCellDef>State</mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">{{ row.state }}</mat-cell>\r\n    </ng-container>\r\n    <!-- Created Column -->\r\n    <ng-container matColumnDef=\"created\">\r\n      <mat-header-cell *matHeaderCellDef\r\n        mat-sort-header\r\n        disableClear=\"true\">\r\n        Created\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\">{{ row.created_at | date }}</mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [length]=\"resultsLength\" [pageSize]=\"30\">\r\n  </mat-paginator>\r\n </div>`,\r\n\ttsCode: `\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {catchError} from 'rxjs/operators/catchError';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\\n\r\n/**\r\n* @title Table retrieving data through HTTP\r\n*/\r\n@Component({\r\n  selector: 'table-http-example',\r\n  styleUrls: ['table-http-example.css'],\r\n  templateUrl: 'table-http-example.html',\r\n})\r\nexport class TableHttpExample implements OnInit {\r\n  displayedColumns = ['created', 'state', 'number', 'title'];\r\n  exampleDatabase: ExampleHttpDao | null;\r\n  dataSource = new MatTableDataSource();\\n\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\\n\r\n  constructor(private http: HttpClient) {}\\n\\n\\\r\n  ngOnInit() {\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\\n\\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n\tthis.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n\r\n    merge(this.sort.sortChange, this.paginator.page)\r\n      .pipe(\r\n        startWith({}),\r\n\t    switchMap(() => {\r\n          this.isLoadingResults = true;\r\n\t\t\t  return this.exampleDatabase!.getRepoIssues(\r\n          this.sort.active, this.sort.direction, this.paginator.pageIndex);\r\n        }),\r\n        map(data => {\r\n        // Flip flag to show that loading has finished.\r\n          this.isLoadingResults = false;\r\n          this.isRateLimitReached = false;\r\n          this.resultsLength = data.total_count;\\n\\n\r\n          return data.items;\r\n        }),\r\n        catchError(() => {\r\n          this.isLoadingResults = false;\r\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n          this.isRateLimitReached = true;\r\n            return observableOf([]);\r\n      })\r\n    ).subscribe(data => this.dataSource.data = data);\r\n  }\r\n}\\n\\n\r\nexport interface GithubApi {\r\n  items: GithubIssue[];\r\n  total_count: number;\r\n}\\n\\n\\\r\nexport interface GithubIssue {\r\n  created_at: string;\r\n  number: string;\r\n  state: string;\r\n  title: string;\r\n}\\n\\n\\\r\n/** An example database that the data source uses to retrieve data for the table. */\r\nexport class ExampleHttpDao {\r\n  constructor(private http: HttpClient) {}\r\n  getRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\r\n    const href = 'https://api.github.com/search/issues';\r\n    const requestUrl =\r\n    \\`\\${href}?q=repo:angular/material2&sort=\\${sort}&order=\\${order}&page=\\${page + 1}\\`;\\n\r\n    return this.http.get<GithubApi>(requestUrl);\r\n  }\r\n}`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 500px;\r\n  min-width: 300px;\r\n  position: relative;\r\n}\r\n.example-header {\r\n  min-height: 64px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 24px;\r\n  font-size: 20px;\r\n}\r\n.example-table {\r\n  overflow: auto;\r\n  min-height: 300px;\r\n}\r\n.example-loading-shade {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 56px;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.15);\r\n  z-index: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.example-rate-limit-reached {\r\n  color: #980000;\r\n  max-width: 360px;\r\n  text-align: center;\r\n}\r\n/* Column Widths */\r\n.mat-column-number,\r\n.mat-column-state {\r\n  max-width: 64px;\r\n}\r\n.mat-column-created {\r\n  max-width: 124px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\nconst ELEMENT_DATA2: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nexport interface GithubApi {\r\n  items: GithubIssue[];\r\n  total_count: number;\r\n}\r\n\r\nexport interface GithubIssue {\r\n  created_at: string;\r\n  number: string;\r\n  state: string;\r\n  title: string;\r\n}\r\n\r\n/** An example database that the data source uses to retrieve data for the table. */\r\nexport class ExampleHttpDao {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\r\n    const href = 'https://api.github.com/search/issues';\r\n    const requestUrl =\r\n        `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\r\n\r\n    return this.http.get<GithubApi>(requestUrl);\r\n  }\r\n}\r\n\r\nexport interface UserData {\r\n  id: string;\r\n  name: string;\r\n  progress: string;\r\n  color: string;\r\n}\r\n\r\n/** Constants used to fill up our data base. */\r\nconst COLORS: string[] = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\r\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\r\nconst NAMES: string[] = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\r\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\r\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\r\n\r\n  /** Builds and returns a new User. */\r\nfunction createNewUser(id: number): UserData {\r\n  const name =\r\n      NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\r\n      NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\r\n\r\n  return {\r\n    id: id.toString(),\r\n    name: name,\r\n    progress: Math.round(Math.random() * 100).toString(),\r\n    color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\r\n  };\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-material-table',\r\n\ttemplateUrl: './material-table.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n\tstyles: [`\r\n\t.example-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmax-height: 500px;\r\n\t\tmin-width: 300px;\r\n\t\tposition: relative;\r\n\t  }\r\n\r\n\t  .mat-table {\r\n\t\toverflow: auto;\r\n\t\tmax-height: 500px;\r\n\t  }\r\n\r\n\t  .mat-header-cell.mat-sort-header-sorted {\r\n\t\tcolor: black;\r\n\t  }\r\n\r\n\t  .example-header {\r\n\t\tmin-height: 64px;\r\n\t\tpadding: 8px 24px 0;\r\n\t  }\r\n\r\n\t  .mat-form-field {\r\n\t\tfont-size: 14px;\r\n\t\twidth: 100%;\r\n\t  }\r\n\r\n\t  .mat-table {\r\n\t\toverflow: auto;\r\n\t\tmax-height: 500px;\r\n\t  }\r\n\t  .mat-column-select {\r\n\t\toverflow: initial;\r\n\t  }\r\n\t  .example-header {\r\n\t\tmin-height: 64px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tpadding-left: 24px;\r\n\t\tfont-size: 20px;\r\n\t  }\r\n\r\n\t  .example-table {\r\n\t\toverflow: auto;\r\n\t\tmin-height: 300px;\r\n\t  }\r\n\r\n.example-loading-shade {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbottom: 56px;\r\n\tright: 0;\r\n\tbackground: rgba(0, 0, 0, 0.15);\r\n\tz-index: 1;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n  }\r\n\r\n  .example-rate-limit-reached {\r\n\tcolor: #980000;\r\n\tmax-width: 360px;\r\n\ttext-align: center;\r\n  }\r\n\r\n  /* Column Widths */\r\n  .mat-column-number,\r\n  .mat-column-state {\r\n\tmax-width: 64px;\r\n  }\r\n\r\n  .mat-column-created {\r\n\tmax-width: 124px;\r\n  }\r\n\t`]\r\n})\r\nexport class MaterialTableComponent implements OnInit, AfterViewInit {\r\n\r\n\texampleBasic;\r\n\texamplePagination;\r\n\texampleSorting;\r\n\texampleFiltering;\r\n\texampleSelection;\r\n\texampleHTTP;\r\n\texampleMain;\r\n\r\n  displayedColumns1 = ['position', 'name', 'weight', 'symbol'];\r\n  displayedColumns2: string[] = ['position', 'name', 'weight', 'symbol'];\r\n  displayedColumns3: string[] = ['position', 'name', 'weight', 'symbol'];\r\n  displayedColumns4: string[] = ['position', 'name', 'weight', 'symbol'];\r\n  displayedColumns5: string[] = ['select', 'position', 'name', 'weight', 'symbol'];\r\n  displayedColumns6: string[] = ['created', 'state', 'number', 'title'];\r\n  displayedColumns7: string[] = ['id', 'name', 'progress', 'color'];\r\n\r\n\tdataSource1 = ELEMENT_DATA;\r\n  dataSource2 = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA2);\r\n  dataSource3 = new MatTableDataSource(ELEMENT_DATA);\r\n  dataSource4 = new MatTableDataSource(ELEMENT_DATA);\r\n  dataSource5 = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA);\r\n  dataSource6: GithubIssue[] = [];\r\n  dataSource7: MatTableDataSource<UserData>;\r\n  exampleDatabase: ExampleHttpDao | null;\r\n\r\n  selection = new SelectionModel<PeriodicElement>(true, []);\r\n  resultsLength = 0;\r\n  isLoadingResults = true;\r\n  isRateLimitReached = false;\r\n\r\n\r\n  @ViewChild('matPaginator2') paginator2: MatPaginator;\r\n  @ViewChild('matPaginator6') paginator6: MatPaginator;\r\n  @ViewChild('matPaginator7') paginator7: MatPaginator;\r\n\r\n\r\n  @ViewChild('sort3') sort3: MatSort;\r\n  @ViewChild('sort6') sort6: MatSort;\r\n  @ViewChild('sort7') sort7: MatSort;\r\n\r\n  ngAfterViewInit() {\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n    const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n    this.dataSource7 = new MatTableDataSource(users);\r\n  }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.examplePagination = pagination;\r\n\t\tthis.exampleSorting = sorting;\r\n\t\tthis.exampleFiltering = filtering;\r\n\t\tthis.exampleSelection = selection;\r\n\t\tthis.exampleHTTP = hTTP;\r\n    this.exampleMain = main;\r\n\r\n    this.dataSource2.paginator = this.paginator2;\r\n\r\n    this.dataSource3.sort = this.sort3;\r\n\r\n    // Example 6\r\n    this.exampleDatabase = new ExampleHttpDao(this.http);\r\n\r\n    // If the user changes the sort order, reset back to the first page.\r\n    this.sort6.sortChange.subscribe(() => this.paginator6.pageIndex = 0);\r\n\r\n    merge(this.sort6.sortChange, this.paginator6.page)\r\n    .pipe(\r\n      startWith({}),\r\n      switchMap(() => {\r\n        this.isLoadingResults = true;\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        return this.exampleDatabase!.getRepoIssues(\r\n          this.sort6.active, this.sort6.direction, this.paginator6.pageIndex);\r\n      }),\r\n      map(data => {\r\n        // Flip flag to show that loading has finished.\r\n        this.isLoadingResults = false;\r\n        this.isRateLimitReached = false;\r\n        this.resultsLength = data.total_count;\r\n\r\n        return data.items;\r\n      }),\r\n      catchError(() => {\r\n        this.isLoadingResults = false;\r\n        // Catch if the GitHub API has reached its rate limit. Return empty data.\r\n        this.isRateLimitReached = true;\r\n        return observableOf([]);\r\n      })\r\n    ).subscribe(data => this.dataSource6 = data);\r\n\r\n    // Example 7\r\n    this.dataSource7.paginator = this.paginator7;\r\n    this.dataSource7.sort = this.sort7;\r\n  }\r\n\r\n  applyFilter4(filterValue: string) {\r\n    this.dataSource4.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  applyFilter7(filterValue: string) {\r\n    this.dataSource7.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource7.paginator) {\r\n      this.dataSource7.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n   /** Whether the number of selected elements matches the total number of rows. */\r\n   isAllSelected5() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource5.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle5() {\r\n    this.isAllSelected5() ?\r\n        this.selection.clear() :\r\n        this.dataSource5.data.forEach(row => this.selection.select(row));\r\n  }\r\n\r\n  /** Builds and returns a new User. */\r\n\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/paginator/examples\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t<code>&lt;mat-paginator&gt;</code> provides navigation for paged information, typically used with a table.\\r\\n\\t\\t</p>\\r\\n\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\r\\n\\t\\t\\t<mat-paginator [length]=\\\"100\\\" [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\">\\r\\n\\t\\t\\t</mat-paginator>\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleConfig\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\tList length:\\r\\n\\t\\t\\t\\t<input matInput [(ngModel)]=\\\"length\\\">\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\tPage size:\\r\\n\\t\\t\\t\\t<input matInput [(ngModel)]=\\\"pageSize\\\">\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\tPage size options:\\r\\n\\t\\t\\t\\t<input matInput [ngModel]=\\\"pageSizeOptions\\\" (ngModelChange)=\\\"setPageSizeOptions($event)\\\">\\r\\n\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t<mat-paginator [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" (page)=\\\"pageEvent = $event\\\">\\r\\n\\t\\t\\t</mat-paginator>\\r\\n\\r\\n\\t\\t\\t<div *ngIf=\\\"pageEvent\\\">\\r\\n\\t\\t\\t\\t<h5>Page Change Event Properties</h5>\\r\\n\\t\\t\\t\\t<div>List length: {{pageEvent.length}}</div>\\r\\n\\t\\t\\t\\t<div>Page size: {{pageEvent.pageSize}}</div>\\r\\n\\t\\t\\t\\t<div>Page index: {{pageEvent.pageIndex}}</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PageEvent } from '@angular/material';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Paginator',\r\n\thtmlCode: `\r\n<mat-paginator [length]=\"100\"\r\n  [pageSize]=\"10\"\r\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n</mat-paginator>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Paginator\r\n*/\r\n@Component({\r\n  selector: 'paginator-overview-example',\r\n  templateUrl: 'paginator-overview-example.html',\r\n  styleUrls: ['paginator-overview-example.css'],\r\n})\r\nexport class PaginatorOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst config = {\r\n\tbeforeCodeTitle: 'Configurable paginatorn',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  List length:\r\n  <input matInput [(ngModel)]=\"length\">\r\n</mat-form-field>\r\n  <mat-form-field>\r\n    Page size:\r\n    <input matInput [(ngModel)]=\"pageSize\">\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    Page size options:\r\n    <input matInput\r\n      [ngModel]=\"pageSizeOptions\"\r\n      (ngModelChange)=\"setPageSizeOptions($event)\">\r\n  </mat-form-field>\r\n  <mat-paginator [length]=\"length\"\r\n    [pageSize]=\"pageSize\"\r\n    [pageSizeOptions]=\"pageSizeOptions\"\r\n    (page)=\"pageEvent = $event\">\r\n  </mat-paginator>\r\n  <div *ngIf=\"pageEvent\">\r\n    <h5>Page Change Event Properties</h5>\r\n    <div>List length: {{pageEvent.length}}</div>\r\n    <div>Page size: {{pageEvent.pageSize}}</div>\r\n    <div>Page index: {{pageEvent.pageIndex}}</div>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {PageEvent} from '@angular/material';\\n\r\n/**\r\n* @title Configurable paginator\r\n*/\r\n@Component({\r\n  selector: 'paginator-configurable-example',\r\n  templateUrl: 'paginator-configurable-example.html',\r\n  styleUrls: ['paginator-configurable-example.css'],\r\n})\r\nexport class PaginatorConfigurableExample {\r\n  // MatPaginator Inputs\r\n  length = 100;\r\n  pageSize = 10;\r\n  pageSizeOptions = [5, 10, 25, 100];\\n\r\n  // MatPaginator Output\r\n  pageEvent: PageEvent;\r\n  setPageSizeOptions(setPageSizeOptionsInput: string) {\r\n    this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\r\n  }\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-paginator',\r\n\ttemplateUrl: './paginator.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PaginatorComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleConfig;\r\n\r\n\tlength = 100;\r\n\tpageSize = 10;\r\n\tpageSizeOptions = [5, 10, 25, 100];\r\n\r\n\t// MatPaginator Output\r\n\tpageEvent: PageEvent;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleConfig = config;\r\n\t}\r\n\r\n\tsetPageSizeOptions(setPageSizeOptionsInput: string) {\r\n\t\tthis.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/sort/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\tThe\\r\\n\\t\\t\\t<mark>matSort</mark> and\\r\\n\\t\\t\\t<mark>mat-sort-header</mark> are used, respectively, to add sorting state and display to tabular data.\\r\\n\\t\\t</p>\\r\\n\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<table  #sort1=\\\"matSort\\\" (matSortChange)=\\\"sortData($event)\\\" matSort>\\r\\n\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t<th mat-sort-header=\\\"name\\\">Dessert (100g)</th>\\r\\n\\t\\t\\t\\t\\t<th mat-sort-header=\\\"calories\\\">Calories</th>\\r\\n\\t\\t\\t\\t\\t<th mat-sort-header=\\\"fat\\\">Fat (g)</th>\\r\\n\\t\\t\\t\\t\\t<th mat-sort-header=\\\"carbs\\\">Carbs (g)</th>\\r\\n\\t\\t\\t\\t\\t<th mat-sort-header=\\\"protein\\\">Protein (g)</th>\\r\\n\\t\\t\\t\\t</tr>\\r\\n\\r\\n\\t\\t\\t\\t<tr *ngFor=\\\"let dessert of sortedData\\\">\\r\\n\\t\\t\\t\\t\\t<td>{{dessert.name}}</td>\\r\\n\\t\\t\\t\\t\\t<td>{{dessert.calories}}</td>\\r\\n\\t\\t\\t\\t\\t<td>{{dessert.fat}}</td>\\r\\n\\t\\t\\t\\t\\t<td>{{dessert.carbs}}</td>\\r\\n\\t\\t\\t\\t\\t<td>{{dessert.protein}}</td>\\r\\n\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t</table>\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleConfig\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\r\\n\\t\\t\\t<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\t\\t\\t\\t<mat-table #table [dataSource]=\\\"dataSource\\\" #sort2=\\\"matSort\\\" matSort>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Position Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> No. </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Name Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Weight Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"weight\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Weight </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- Symbol Column -->\\r\\n\\t\\t\\t\\t\\t<ng-container matColumnDef=\\\"symbol\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </mat-header-cell>\\r\\n\\t\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\r\\n\\t\\t\\t\\t\\t</ng-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n\\t\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n\\t\\t\\t\\t</mat-table>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\"","import { Component, OnInit, ViewChild, AfterViewInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Sort } from '@angular/material';\r\nimport { MatTableDataSource, MatSort } from '@angular/material';\r\n\r\nconst basic = {\r\n\tbeforeCodeTitle: 'Sorting overview',\r\n\thtmlCode: `\r\n<table matSort (matSortChange)=\"sortData($event)\">\r\n  <tr>\r\n    <th mat-sort-header=\"name\">Dessert (100g)</th>\r\n    <th mat-sort-header=\"calories\">Calories</th>\r\n    <th mat-sort-header=\"fat\">Fat (g)</th>\r\n    <th mat-sort-header=\"carbs\">Carbs (g)</th>\r\n    <th mat-sort-header=\"protein\">Protein (g)</th>\r\n  </tr>\r\n  <tr *ngFor=\"let dessert of sortedData\">\r\n    <td>{{dessert.name}}</td>\r\n    <td>{{dessert.calories}}</td>\r\n    <td>{{dessert.fat}}</td>\r\n    <td>{{dessert.carbs}}</td>\r\n    <td>{{dessert.protein}}</td>\r\n  </tr>\r\n</table>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {Sort} from '@angular/material';\\n\r\n/**\r\n* @title Sorting overview\r\n*/\r\n@Component({\r\n  selector: 'sort-overview-example',\r\n  templateUrl: 'sort-overview-example.html',\r\n  styleUrls: ['sort-overview-example.css'],\r\n})\r\nexport class SortOverviewExample {\r\n  desserts = [\r\n    {name: 'Frozen yogurt', calories: '159', fat: '6', carbs: '24', protein: '4'},\r\n    {name: 'Ice cream sandwich', calories: '237', fat: '9', carbs: '37', protein: '4'},\r\n    {name: 'Eclair', calories: '262', fat: '16', carbs: '24', protein: '6'},\r\n    {name: 'Cupcake', calories: '305', fat: '4', carbs: '67', protein: '4'},\r\n    {name: 'Gingerbread', calories: '356', fat: '16', carbs: '49', protein: '4'},\r\n  ];\\n\r\n  sortedData;\\n\r\n  constructor() {\r\n    this.sortedData = this.desserts.slice();\r\n  }\\n\r\n  sortData(sort: Sort) {\r\n    const data = this.desserts.slice();\r\n    if (!sort.active || sort.direction == '') {\r\n      this.sortedData = data;\r\n      return;\r\n    }\\n\r\n    this.sortedData = data.sort((a, b) => {\r\n      let isAsc = sort.direction == 'asc';\r\n      switch (sort.active) {\r\n        case 'name': return compare(a.name, b.name, isAsc);\r\n        case 'calories': return compare(+a.calories, +b.calories, isAsc);\r\n        case 'fat': return compare(+a.fat, +b.fat, isAsc);\r\n        case 'carbs': return compare(+a.carbs, +b.carbs, isAsc);\r\n        case 'protein': return compare(+a.protein, +b.protein, isAsc);\r\n        default: return 0;\r\n      }\r\n    });\r\n  }\r\n}\\n\\n\r\nfunction compare(a, b, isAsc) {\r\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\r\n}`,\r\n\tcssCode: `\r\n.mat-sort-header-container {\r\n  align-items: center;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst config = {\r\n\tbeforeCodeTitle: 'Table with sorting',\r\n\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"position\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header> No. </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n  </ng-container>\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n  <!-- Weight Column -->\r\n  <ng-container matColumnDef=\"weight\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header> Weight </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n  </ng-container>\r\n  <!-- Symbol Column -->\r\n  <ng-container matColumnDef=\"symbol\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n  </ng-container>\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource, MatSort} from '@angular/material';\\n\r\n/**\r\n* @title Table with sorting\r\n*/\r\n@Component({\r\n  selector: 'table-sorting-example',\r\n  styleUrls: ['table-sorting-example.css'],\r\n  templateUrl: 'table-sorting-example.html',\r\n})\r\nexport class TableSortingExample {\r\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\\n\r\n  @ViewChild(MatSort) sort: MatSort;\\n\r\n  /**\r\n  * Set the sort after the view init since this component will\r\n  * be able to query its view for the initialized sort.\r\n  */\r\n  ngAfterViewInit() {\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n}\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\r\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\r\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\r\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\r\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\r\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\r\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\r\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\r\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\r\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\r\n];`,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 300px;\r\n}\r\n.mat-table {\r\n  overflow: auto;\r\n  max-height: 500px;\r\n}\r\n.mat-header-cell.mat-sort-header-sorted {\r\n  color: black;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nexport interface Element {\r\n\tname: string;\r\n\tposition: number;\r\n\tweight: number;\r\n\tsymbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n\t{ position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\r\n\t{ position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n\t{ position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n\t{ position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n\t{ position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\r\n\t{ position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n\t{ position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n\t{ position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n\t{ position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n\t{ position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n\t{ position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\r\n\t{ position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\r\n\t{ position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\r\n\t{ position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\r\n\t{ position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\r\n\t{ position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\r\n\t{ position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\r\n\t{ position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\r\n\t{ position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\r\n\t{ position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\r\n];\r\n\r\nfunction compare(a, b, isAsc) {\r\n\treturn (a < b ? -1 : 1) * (isAsc ? 1 : -1);\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-sort-header',\r\n\ttemplateUrl: './sort-header.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.mat-sort-header-container {\r\n\t\talign-items: center;\r\n\t  }\r\n\t  .example-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-width: 300px;\r\n\t  }\r\n\t  .mat-table {\r\n\t\toverflow: auto;\r\n\t\tmax-height: 500px;\r\n\t  }\r\n\t  .mat-header-cell.mat-sort-header-sorted {\r\n\t\tcolor: black;\r\n\t  }\r\n\t`]\r\n})\r\nexport class SortHeaderComponent implements OnInit, AfterViewInit {\r\n\r\n\texampleBasic;\r\n\texampleConfig;\r\n\r\n\tdisplayedColumns = ['position', 'name', 'weight', 'symbol'];\r\n\tdataSource = new MatTableDataSource(ELEMENT_DATA);\r\n\r\n\tdesserts = [\r\n\t\t{ name: 'Frozen yogurt', calories: '159', fat: '6', carbs: '24', protein: '4' },\r\n\t\t{ name: 'Ice cream sandwich', calories: '237', fat: '9', carbs: '37', protein: '4' },\r\n\t\t{ name: 'Eclair', calories: '262', fat: '16', carbs: '24', protein: '6' },\r\n\t\t{ name: 'Cupcake', calories: '305', fat: '4', carbs: '67', protein: '4' },\r\n\t\t{ name: 'Gingerbread', calories: '356', fat: '16', carbs: '49', protein: '4' },\r\n\t];\r\n\r\n\tsortedData;\r\n\r\n  @ViewChild('sort1') sort1: MatSort;\r\n  @ViewChild('sort2') sort2: MatSort;\r\n\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleConfig = config;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tthis.sortedData = this.desserts.slice();\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis.dataSource.sort = this.sort2;\r\n\t}\r\n\r\n\tsortData(_sort: Sort) {\r\n\t\tconst data = this.desserts.slice();\r\n\t\tif (!_sort.active || _sort.direction === '') {\r\n\t\t\tthis.sortedData = data;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.sortedData = data.sort((a, b) => {\r\n\t\t\tconst isAsc = _sort.direction === 'asc';\r\n\t\t\tswitch (_sort.active) {\r\n\t\t\t\tcase 'name': return compare(a.name, b.name, isAsc);\r\n\t\t\t\tcase 'calories': return compare(+a.calories, +b.calories, isAsc);\r\n\t\t\t\tcase 'fat': return compare(+a.fat, +b.fat, isAsc);\r\n\t\t\t\tcase 'carbs': return compare(+a.carbs, +b.carbs, isAsc);\r\n\t\t\t\tcase 'protein': return compare(+a.protein, +b.protein, isAsc);\r\n\t\t\t\tdefault: return 0;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/autocomplete/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSimpleAutocomplete\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">The autocomplete is a normal text input enhanced by a panel of suggested options.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-form\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto1=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ option }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAddingACustomFilter\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAt this point, the autocomplete panel should be toggleable on focus and options should be selectable. But if we want our options to filter when we type, we need to add a custom filter.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-form\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl2\\\" [matAutocomplete]=\\\"auto2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto2=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ option }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSettingSeparateControlAndDisplayValues\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tIf you want the option's control value (what is saved in the form) to be different than the option's display value (what is displayed in the text field), you'll need to set the\\r\\n\\t\\t\\t\\t\\t<code>displayWith</code> property on your autocomplete element. A common use case for this might be if you want to save your data as an object, but display just one of the option's string properties. To make this work, create a function on your component class that maps the control value to the desired display value. Then bind it to the autocomplete's\\r\\n\\t\\t\\t\\t\\t<code>displayWith</code> property.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-form\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" placeholder=\\\"Assignee\\\" aria-label=\\\"Assignee\\\" matInput [formControl]=\\\"myControl33\\\" [matAutocomplete]=\\\"auto33\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto33=\\\"matAutocomplete\\\" [displayWith]=\\\"displayFn\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let option of filteredOptions33 | async\\\" [value]=\\\"option\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ option.name }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAutomaticallyHighlightingTheFirstOption\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tIf your use case requires for the first autocomplete option to be highlighted when the user opens the panel, you can do so by setting the\\r\\n\\t\\t\\t\\t\\t<code>autoActiveFirstOption</code> input on the\\r\\n\\t\\t\\t\\t\\t<code>mat-autocomplete</code> component. This behavior can be configured globally using the\\r\\n\\t\\t\\t\\t\\t<code>MAT_AUTOCOMPLETE_DEFAULT_OPTIONS</code> injection token.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-form\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl44\\\" [matAutocomplete]=\\\"auto44\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete autoActiveFirstOption #auto44=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let option of filteredOptions44 | async\\\" [value]=\\\"option\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ option }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAutocompleteOverview\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tIf your use case requires for the first autocomplete option to be highlighted when the user opens the panel, you can do so by setting the\\r\\n\\t\\t\\t\\t\\t<code>autoActiveFirstOption</code> input on the\\r\\n\\t\\t\\t\\t\\t<code>mat-autocomplete</code> component. This behavior can be configured globally using the\\r\\n\\t\\t\\t\\t\\t<code>MAT_AUTOCOMPLETE_DEFAULT_OPTIONS</code> injection token.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-form\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"State\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto55\\\" [formControl]=\\\"stateCtrl\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto55=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let state of filteredStates | async\\\" [value]=\\\"state.name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<img style=\\\"vertical-align:middle;\\\" aria-hidden src=\\\"{{state.flag}}\\\" height=\\\"25\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ state.name }}</span> |\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<small>Population: {{state.population}}</small>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<br />\\r\\n\\t\\t\\t\\t\\t\\t<mat-slide-toggle [checked]=\\\"stateCtrl.disabled\\\" (change)=\\\"stateCtrl.disabled ? stateCtrl.enable() : stateCtrl.disable()\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tDisable Input?\\r\\n\\t\\t\\t\\t\\t\\t</mat-slide-toggle>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleOptionGroupsAutocomplete\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-option</code>can be collected into groups using the mat-optgroup element:\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<form [formGroup]=\\\"stateForm\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tmatInput \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"States Group\\\" \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tformControlName=\\\"stateGroup\\\" \\r\\n\\t\\t\\t\\t\\t\\t\\t\\trequired \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[matAutocomplete]=\\\"autoGroup\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #autoGroup=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-optgroup *ngFor=\\\"let group of stateGroupOptions | async\\\" [label]=\\\"group.letter\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let name of group.names\\\" [value]=\\\"name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ name }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-optgroup>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, NgModel } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\n\r\nconst simpleAutocomplete = {\r\n\tbeforeCodeTitle: 'Simple autocomplete',\r\n\thtmlCode: `\r\n<form class=\"example-full-width\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input type=\"text\" placeholder=\"Pick one\" aria-label=\"Number\"\r\n      matInput [formControl]=\"myControl\"\r\n      [matAutocomplete]=\"auto\">\r\n      <mat-autocomplete #auto=\"matAutocomplete\">\r\n        <mat-option *ngFor=\"let option of options\" [value]=\"option\">\r\n          {{ option }}\r\n        </mat-option>\r\n       </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/**\r\n* @title Simple autocomplete\r\n*/\r\n@Component({\r\n    selector: 'autocomplete-simple-example',\r\n    templateUrl: 'autocomplete-simple-example.html',\r\n    styleUrls: ['autocomplete-simple-example.css']\r\n})\r\nexport class AutocompleteSimpleExample {\r\n    myControl: FormControl = new FormControl();\r\n    options = [\r\n        'One',\r\n        'Two',\r\n        'Three'\r\n    ];\r\n}`,\r\n\tcssCode: `\r\n.example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n}\r\n.example-full-width {\r\n    width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst addingACustomFilter = {\r\n\tbeforeCodeTitle: 'Adding a custom filter',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input type=\"text\" placeholder=\"Pick one\" aria-label=\"Number\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\r\n      <mat-autocomplete #auto=\"matAutocomplete\">\r\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n          {{ option }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {map} from 'rxjs/operators/map';\\n\r\n/**\r\n* @title Filter autocomplete\r\n*/\r\n@Component({\r\n  selector: 'autocomplete-filter-example',\r\n  templateUrl: 'autocomplete-filter-example.html',\r\n  styleUrls: ['autocomplete-filter-example.css']\r\n})\r\nexport class AutocompleteFilterExample {\\n\r\n  myControl: FormControl = new FormControl();\\n\r\n  options = [\r\n    'One',\r\n    'Two',\r\n\t'Three'\r\n  ];\\n\r\n  filteredOptions: Observable<string[]>;\\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n         map(val => this.filter(val))\r\n      );\r\n  }\\n\r\n  filter(val: string): string[] {\r\n    return this.options.filter(option =>\r\n\t\toption.toLowerCase().includes(val.toLowerCase()));\r\n  }\r\n}`,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst settingSeparateControlAndDisplayValues = {\r\n\tbeforeCodeTitle: 'Setting separate control and display valuess',\r\n\tbeforeCodeDescription: ``,\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input type=\"text\" placeholder=\"Assignee\" aria-label=\"Assignee\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\r\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\r\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n        {{ option.name }}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {map} from 'rxjs/operators/map';\\n\r\nexport class User {\r\n  constructor(public name: string) { }\r\n}\r\n/**\r\n* @title Display value autocomplete\r\n*/\r\n@Component({\r\n  selector: 'autocomplete-display-example',\r\n  templateUrl: 'autocomplete-display-example.html',\r\n  styleUrls: ['autocomplete-display-example.css']\r\n})\r\nexport class AutocompleteDisplayExample {\\n\r\n  myControl = new FormControl();\\n\r\n  options = [\r\n    new User('Mary'),\r\n    new User('Shelley'),\r\n    new User('Igor')\r\n  ];\\n\r\n  filteredOptions: Observable<User[]>;\\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges\r\n      .pipe(\r\n        startWith<string | User>(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this.filter(name) : this.options.slice())\r\n      );\r\n  }\\n\r\n  filter(name: string): User[] {\r\n    return this.options.filter(option =>\r\n      option.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\r\n  }\\n\r\n  displayFn(user?: User): string | undefined {\r\n    return user ? user.name : undefined;\r\n  }\\n\r\n}`,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst automaticallyHighlightingTheFirstOption = {\r\n\tbeforeCodeTitle: 'Automatically highlighting the first option',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input type=\"text\" placeholder=\"Pick one\" aria-label=\"Number\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\r\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n        {{ option }}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {map} from 'rxjs/operators/map';\r\n/**\r\n* @title Highlight the first autocomplete option\r\n*/\r\n@Component({\r\n  selector: 'autocomplete-auto-active-first-option-example',\r\n  templateUrl: 'autocomplete-auto-active-first-option-example.html',\r\n  styleUrls: ['autocomplete-auto-active-first-option-example.css']\r\n})\r\nexport class AutocompleteAutoActiveFirstOptionExample {\r\n  myControl: FormControl = new FormControl();\r\n  options = ['One', 'Two', 'Three'];\r\n  filteredOptions: Observable<string[]>;\\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(val => this.filter(val))\r\n    );\\n\r\n  filter(val: string): string[] {\r\n    return this.options.filter(option => option.toLowerCase().indexOf(val.toLowerCase()) === 0);\r\n  }\\n\r\n}`,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst autocompleteOverview = {\r\n\tbeforeCodeTitle: 'Autocomplete overview',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput placeholder=\"State\" aria-label=\"State\" [matAutocomplete]=\"auto\" [formControl]=\"stateCtrl\">\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let state of filteredStates | async\" [value]=\"state.name\">\r\n        <img style=\"vertical-align:middle;\" aria-hidden src=\"{{state.flag}}\" height=\"25\" />\r\n        <span>{{ state.name }}</span> |\r\n        <small>Population: {{state.population}}</small>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n  <br />\r\n  <mat-slide-toggle\r\n    [checked]=\"stateCtrl.disabled\"\r\n    (change)=\"stateCtrl.disabled ? stateCtrl.enable() : stateCtrl.disable()\">\r\n    Disable Input?\r\n  </mat-slide-toggle>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {map} from 'rxjs/operators/map';\\n\r\nexport class State {\r\n  constructor(public name: string, public population: string, public flag: string) { }\r\n}\\n\r\n/**\r\n * @title Autocomplete overview\r\n*/\r\n@Component({\r\n  selector: 'autocomplete-overview-example',\r\n  templateUrl: 'autocomplete-overview-example.html',\r\n  styleUrls: ['autocomplete-overview-example.css']\r\n})\r\nexport class AutocompleteOverviewExample {\r\n  stateCtrl: FormControl;\r\n  filteredStates: Observable<any[]>;\r\n  states: State[] = [\r\n  {\r\n    name: 'Arkansas',\r\n    population: '2.978M',\r\n    // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\r\n    flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\r\n  },\r\n  {\r\n\tname: 'California',\r\n    population: '39.14M',\r\n    // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\r\n    flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\r\n  },\r\n  {\r\n    name: 'Florida',\r\n\tpopulation: '20.27M',\r\n\t// https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\r\n\tflag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\r\n  },\r\n  {\r\n    name: 'Texas',\r\n    population: '27.47M',\r\n    // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\r\n    flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\r\n  }\r\n];\r\n  constructor() {\r\n    this.stateCtrl = new FormControl();\r\n     this.filteredStates = this.stateCtrl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(state => state ? this.filterStates(state) : this.states.slice())\r\n      );\r\n}\r\n  filterStates(name: string) {\r\n    return this.states.filter(state =>\r\n      state.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\r\n  }\r\n}\r\n`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst optionGroupsAutocomplete = {\r\n\tbeforeCodeTitle: 'Option groups autocomplete',\r\n\thtmlCode: `\r\n<form [formGroup]=\"stateForm\">\r\n  <mat-form-field>\r\n    <input type=\"text\" matInput placeholder=\"States Group\" formControlName=\"stateGroup\" required [matAutocomplete]=\"autoGroup\"/>\r\n      <mat-autocomplete #autoGroup=\"matAutocomplete\">\r\n        <mat-optgroup *ngFor=\"let group of stateGroupOptions | async\" [label]=\"group.letter\">\r\n          <mat-option *ngFor=\"let name of group.names\" [value]=\"name\">\r\n            {{ name }}\r\n          </mat-option>\r\n        </mat-optgroup>\r\n      </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>  `,\r\n\ttsCode: `\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {FormGroup, FormBuilder} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {startWith, map} from 'rxjs/operators';\r\n\r\nexport interface StateGroup {\r\n  letter: string;\r\n  names: string[];\r\n}\r\n\r\n/**\r\n* @title Option groups autocomplete\r\n*/\r\n@Component({\r\n  templateUrl: './autocomplete-optgroup-example.html',\r\n  styleUrls: ['./autocomplete-optgroup-example.css'],\r\n})\r\n\r\nexport class AutocompleteOptgroupExample implements OnInit {\r\n  stateForm: FormGroup = this.fb.group({\r\n  stateGroup: '',\r\n});\r\n\r\nstateGroups: StateGroup[] = [{\r\n  letter: 'A',\r\n  names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\r\n}, {\r\n  letter: 'C',\r\n  names: ['California', 'Colorado', 'Connecticut']\r\n}, {\r\n  letter: 'D',\r\n  names: ['Delaware']\r\n}, {\r\n  letter: 'F',\r\n  names: ['Florida']\r\n}, {\r\n  letter: 'G',\r\n  names: ['Georgia']\r\n}, {\r\n  letter: 'H',\r\n  names: ['Hawaii']\r\n}, {\r\n  letter: 'I',\r\n  names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\r\n}, {\r\n  letter: 'K',\r\n  names: ['Kansas', 'Kentucky']\r\n}, {\r\n  letter: 'L',\r\n  names: ['Louisiana']\r\n}, {\r\n  letter: 'M',\r\n  names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\r\n  'Minnesota', 'Mississippi', 'Missouri', 'Montana']\r\n}, {\r\n  letter: 'N',\r\n  names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\r\n  'New Mexico', 'New York', 'North Carolina', 'North Dakota']\r\n}, {\r\n  letter: 'O',\r\n  names: ['Ohio', 'Oklahoma', 'Oregon']\r\n}, {\r\n  letter: 'P',\r\n  names: ['Pennsylvania']\r\n}, {\r\n  letter: 'R',\r\n  names: ['Rhode Island']\r\n}, {\r\n  letter: 'S',\r\n  names: ['South Carolina', 'South Dakota']\r\n}, {\r\n  letter: 'T',\r\n  names: ['Tennessee', 'Texas']\r\n}, {\r\n  letter: 'U',\r\n  names: ['Utah']\r\n}, {\r\n  letter: 'V',\r\n  names: ['Vermont', 'Virginia']\r\n}, {\r\n  letter: 'W',\r\n  names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\r\n}];\r\n\r\n  stateGroupOptions: Observable<StateGroup[]>;\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.stateGroupOptions = this.stateForm.get('stateGroup')!.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n          map(val => this.filterGroup(val))\r\n       );\r\n  }\r\n\r\n  filterGroup(val: string): StateGroup[] {\r\n    if (val) {\r\n      return this.stateGroups\r\n      .map(group => ({ letter: group.letter, names: this._filter(group.names, val) }))\r\n      .filter(group => group.names.length > 0);\r\n    }\r\n\r\n     return this.stateGroups;\r\n  }\r\n\r\n  private _filter(opt: string[], val: string) {\r\n    const filterValue = val.toLowerCase();\r\n      return opt.filter(item => item.toLowerCase().startsWith(filterValue));\r\n  }\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nexport class User {\r\n\tconstructor(public name: string) { }\r\n  }\r\n\r\nexport class State {\r\n\tconstructor(public name: string, public population: string, public flag: string) { }\r\n}\r\n\r\nexport interface StateGroup {\r\n\tletter: string;\r\n\tnames: string[];\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-autocomplete',\r\n\ttemplateUrl: './autocomplete.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-form {\r\n\t\tmin-width: 150px;\r\n\t\tmax-width: 500px;\r\n\t\twidth: 100%;\r\n\t}\r\n\t.example-full-width {\r\n\t\twidth: 100%;\r\n\t}\r\n\t`]\r\n})\r\nexport class AutocompleteComponent implements OnInit {\r\n\r\n\texampleSimpleAutocomplete;\r\n\texampleAddingACustomFilter;\r\n\texampleSettingSeparateControlAndDisplayValues;\r\n\texampleAutomaticallyHighlightingTheFirstOption;\r\n\texampleAutocompleteOverview;\r\n\texampleOptionGroupsAutocomplete;\r\n\r\n\tmyControl: FormControl = new FormControl();\r\n\toptions = ['One', 'Two', 'Three'];\r\n\r\n\tmyControl2: FormControl = new FormControl();\r\n\tfilteredOptions: Observable<string[]>;\r\n\r\n\tmyControl33 = new FormControl();\r\n\toptions33 = [\r\n\t\tnew User('Mary'),\r\n\t\tnew User('Shelley'),\r\n\t\tnew User('Igor')\r\n\t];\r\n\tfilteredOptions33: Observable<User[]>;\r\n\r\n\tmyControl44: FormControl = new FormControl();\r\n\toptions44 = ['One', 'Two', 'Three'];\r\n\tfilteredOptions44: Observable<string[]>;\r\n\r\n\tstateCtrl: FormControl;\r\n\tfilteredStates: Observable<any[]>;\r\n\r\n\tmyControl3: FormControl = new FormControl();\r\n\r\n\tstates: State[] = [\r\n\t\t{\r\n\t\t\tname: 'Arkansas',\r\n\t\t\tpopulation: '2.978M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'California',\r\n\t\t\tpopulation: '39.14M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Florida',\r\n\t\t\tpopulation: '20.27M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Texas',\r\n\t\t\tpopulation: '27.47M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\r\n\t\t}\r\n\t];\r\n\r\n\tstateForm: FormGroup = this.fb.group({\r\n\t\tstateGroup: '',\r\n\t});\r\n\r\n\tstateGroups: StateGroup[] = [{\r\n\t\tletter: 'A',\r\n\t\tnames: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\r\n\t}, {\r\n\t\tletter: 'C',\r\n\t\tnames: ['California', 'Colorado', 'Connecticut']\r\n\t}, {\r\n\t\tletter: 'D',\r\n\t\tnames: ['Delaware']\r\n\t}, {\r\n\t\tletter: 'F',\r\n\t\tnames: ['Florida']\r\n\t}, {\r\n\t\tletter: 'G',\r\n\t\tnames: ['Georgia']\r\n\t}, {\r\n\t\tletter: 'H',\r\n\t\tnames: ['Hawaii']\r\n\t}, {\r\n\t\tletter: 'I',\r\n\t\tnames: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\r\n\t}, {\r\n\t\tletter: 'K',\r\n\t\tnames: ['Kansas', 'Kentucky']\r\n\t}, {\r\n\t\tletter: 'L',\r\n\t\tnames: ['Louisiana']\r\n\t}, {\r\n\t\tletter: 'M',\r\n\t\tnames: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\r\n\t\t\t'Minnesota', 'Mississippi', 'Missouri', 'Montana']\r\n\t}, {\r\n\t\tletter: 'N',\r\n\t\tnames: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\r\n\t\t\t'New Mexico', 'New York', 'North Carolina', 'North Dakota']\r\n\t}, {\r\n\t\tletter: 'O',\r\n\t\tnames: ['Ohio', 'Oklahoma', 'Oregon']\r\n\t}, {\r\n\t\tletter: 'P',\r\n\t\tnames: ['Pennsylvania']\r\n\t}, {\r\n\t\tletter: 'R',\r\n\t\tnames: ['Rhode Island']\r\n\t}, {\r\n\t\tletter: 'S',\r\n\t\tnames: ['South Carolina', 'South Dakota']\r\n\t}, {\r\n\t\tletter: 'T',\r\n\t\tnames: ['Tennessee', 'Texas']\r\n\t}, {\r\n\t\tletter: 'U',\r\n\t\tnames: ['Utah']\r\n\t}, {\r\n\t\tletter: 'V',\r\n\t\tnames: ['Vermont', 'Virginia']\r\n\t}, {\r\n\t\tletter: 'W',\r\n\t\tnames: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\r\n\t}];\r\n\r\n\tstateGroupOptions: Observable<StateGroup[]>;\r\n\r\n\tconstructor(private fb: FormBuilder) {\r\n\t\tthis.stateCtrl = new FormControl();\r\n\t\tthis.filteredStates = this.stateCtrl.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(''),\r\n\t\t\t\tmap(state => state ? this.filterStates(state) : this.states.slice())\r\n\t\t\t);\r\n\t}\r\n\r\n\tfilterStates(name: string) {\r\n\t\treturn this.states.filter(state =>\r\n\t\t\tstate.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\r\n\t\tthis.exampleSimpleAutocomplete = simpleAutocomplete;\r\n\t\tthis.exampleAddingACustomFilter = addingACustomFilter;\r\n\t\tthis.exampleSettingSeparateControlAndDisplayValues = settingSeparateControlAndDisplayValues;\r\n\t\tthis.exampleAutomaticallyHighlightingTheFirstOption = automaticallyHighlightingTheFirstOption;\r\n\t\tthis.exampleAutocompleteOverview = autocompleteOverview;\r\n\t\tthis.exampleOptionGroupsAutocomplete = optionGroupsAutocomplete;\r\n\r\n\t\tthis.filteredOptions = this.myControl.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(''),\r\n\t\t\t\tmap(val => this.filter(val))\r\n\t\t\t);\r\n\r\n\t\tthis.filteredOptions33 = this.myControl33.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith<string | User>(''),\r\n\t\t\t\tmap(value => typeof value === 'string' ? value : value.name),\r\n\t\t\t\tmap(name => name ? this.filter33(name) : this.options33.slice())\r\n\t\t\t);\r\n\r\n\t\tthis.filteredOptions44 = this.myControl44.valueChanges.pipe(\r\n\t\t\tstartWith(''),\r\n\t\t\tmap(val => this.filter44(val))\r\n\t\t);\r\n\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tthis.stateGroupOptions = this.stateForm.get('stateGroup')!.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(''),\r\n\t\t\t\tmap(val => this.filterGroup(val))\r\n\t\t\t);\r\n\t}\r\n\r\n\tfilter33(name: string): User[] {\r\n\t\treturn this.options33.filter(option =>\r\n\t\t\toption.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\r\n\t}\r\n\r\n\tfilter44(val: string): string[] {\r\n\t\treturn this.options44.filter(option => option.toLowerCase().indexOf(val.toLowerCase()) === 0);\r\n\t}\r\n\r\n\tdisplayFn(user?: User): string | undefined {\r\n\t\treturn user ? user.name : undefined;\r\n\t}\r\n\r\n\r\n\tfilter(val: string): string[] {\r\n\t\treturn this.options.filter(option =>\r\n\t\t\toption.toLowerCase().includes(val.toLowerCase()));\r\n\t}\r\n\r\n\tfilterGroup(val: string): StateGroup[] {\r\n\t\tif (val) {\r\n\t\t\treturn this.stateGroups\r\n\t\t\t\t.map(group => ({ letter: group.letter, names: this._filter(group.names, val) }))\r\n\t\t\t\t.filter(group => group.names.length > 0);\r\n\t\t}\r\n\r\n\t\treturn this.stateGroups;\r\n\t}\r\n\r\n\tprivate _filter(opt: string[], val: string) {\r\n\t\tconst filterValue = val.toLowerCase();\r\n\t\treturn opt.filter(item => item.toLowerCase().startsWith(filterValue));\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/checkbox/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicCheckboxes\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-checkbox&gt;</code> provides the same functionality as a native\\r\\n\\t\\t\\t\\t\\t<code>&lt;input type=\\\"checkbox\\\"&gt;</code> enhanced with Material Design styling and animations.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-checkbox>Check me!</mat-checkbox>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleLabelPositions\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Input() labelPosition: 'before' | 'after'</code> Whether the label should appear after or before the checkbox. Defaults to 'after'\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-checkbox [labelPosition]=\\\"labelPosition\\\">Check me!</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-slide-toggle (change)=\\\"changeLablesPositions()\\\">Slide labels position</mat-slide-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleChangeEvent\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Output() change: EventEmitter&lt;MatCheckboxChange&gt;</code> Event emitted when the checkbox's checked value changes.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-checkbox [(ngModel)]=\\\"myValue\\\" (change)=\\\"changeValueEvent()\\\">Check me!</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<span>Checked: <mark>{{ myValue }}</mark></span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleConfigurableCheckbox\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tWhen user clicks on the\\r\\n\\t\\t\\t\\t\\t<code>mat-checkbox</code>, the default behavior is toggle checked value and set indeterminate to false. This behavior can be customized by\\r\\n\\t\\t\\t\\t\\t<a href=\\\"https://angular.io/guide/dependency-injection\\\" target=\\\"_blank\\\">providing a new value</a> of\\r\\n\\t\\t\\t\\t\\t<code>MAT_CHECKBOX_CLICK_ACTION</code> to the checkbox.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"indeterminate\\\">Indeterminate</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Align:</label>\\r\\n\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"align\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"start\\\">Start</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"end\\\">End</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tResult: \\r\\n\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"checked\\\" [(indeterminate)]=\\\"indeterminate\\\" [disabled]=\\\"disabled\\\">\\r\\n\\t\\t\\t\\t\\t\\tI'm a checkbox\\r\\n\\t\\t\\t\\t\\t</mat-checkbox>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl, NgModel } from '@angular/forms';\r\n\r\nconst basicCheckboxes = {\r\n\tbeforeCodeTitle: 'Basic checkboxes',\r\n\thtmlCode: `<mat-checkbox>Check me!</mat-checkbox>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic checkboxes\r\n*/\r\n@Component({\r\n  selector: 'checkbox-overview-example',\r\n  templateUrl: 'checkbox-overview-example.html',\r\n  styleUrls: ['checkbox-overview-example.css'],\r\n})\r\nexport class CheckboxOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst configurableCheckbox = {\r\n\tbeforeCodeTitle: 'Configurable checkbox',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Checkbox configuration</h2>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"checked\">Checked</mat-checkbox>\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"indeterminate\">Indeterminate</mat-checkbox>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Align:</label>\r\n      <mat-radio-group [(ngModel)]=\"align\">\r\n        <mat-radio-button class=\"example-margin\" value=\"start\">Start</mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"end\">End</mat-radio-button>\r\n      </mat-radio-group>\r\n\t</section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"disabled\">Disabled</mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card class=\"result\">\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox\r\n        class=\"example-margin\"\r\n        [(ngModel)]=\"checked\"\r\n        [(indeterminate)]=\"indeterminate\"\r\n        [align]=\"align\"\r\n        [disabled]=\"disabled\">\r\n        I'm a checkbox\r\n      </mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n * @title Configurable checkbox\r\n */\r\n@Component({\r\n  selector: 'checkbox-configurable-example',\r\n  templateUrl: 'checkbox-configurable-example.html',\r\n  styleUrls: ['checkbox-configurable-example.css'],\r\n})\r\nexport class CheckboxConfigurableExample {\r\n  checked = false;\r\n  indeterminate = false;\r\n  align = 'start';\r\n  disabled = false;\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-h2 {\r\n  margin: 10px;\r\n}\r\n.example-section {\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  height: 60px;\r\n}\r\n.example-margin {\r\n  margin: 0 10px;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\n\r\nconst labelPositions = {\r\n\tbeforeCodeTitle: 'Label positions',\r\n\thtmlCode: `<mat-checkbox>Check me!</mat-checkbox>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'checkbox-label-positions-example',\r\n  templateUrl: 'checkbox-label-positions-example.html',\r\n  styleUrls: ['checkbox-label-positions-example.css'],\r\n})\r\nexport class CheckboxLabelPositionsExample {\\n\r\n  labelPosition: string = \"before\";\\n\r\n  changeLablesPositions() {\r\n    this.labelPosition = this.labelPosition == \"before\" ? \"after\" : \"before\";\r\n  }\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst changeEvent = {\r\n\tbeforeCodeTitle: 'Change event binding',\r\n\thtmlCode: `\r\n<mat-checkbox [(ngModel)]=\"myValue\" (change)=\"changeValueEvent()\">Check me!</mat-checkbox>\r\n<div class=\"m-separator m-separator--dashed\"></div>\r\n<span>Checked: <mark>{{ myValue }}</mark></span>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'checkbox-change-event-example',\r\n  templateUrl: 'checkbox-change-event-example.html',\r\n  styleUrls: ['checkbox-change-event-example.css'],\r\n})\r\nexport class CheckboxChangeEventExample {\r\n  myValue: boolean = true;\r\n  changeValueEvent() {\r\n    console.log(\"myValue:\", this.myValue);\r\n  }\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n@Component({\r\n\tselector: 'm-checkbox',\r\n\ttemplateUrl: './checkbox.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [\r\n\t\t`\r\n\t\t.example-h2 {\r\n\t\t\tmargin: 10px;\r\n\t\t}\r\n\t\t.example-section {\r\n\t\t\tdisplay: flex;\r\n\t\t\talign-content: center;\r\n\t\t\talign-items: center;\r\n\t\t\theight: 60px;\r\n\t\t}\r\n\t\t.example-margin {\r\n\t\t\tmargin: 0 10px;\r\n\t\t}\r\n\t`\r\n\t]\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n\r\n\texampleBasicCheckboxes;\r\n\texampleConfigurableCheckbox;\r\n\texampleLabelPositions;\r\n\texampleChangeEvent;\r\n\r\n\tchecked = false;\r\n\tindeterminate = false;\r\n\talign = 'start';\r\n\tdisabled = false;\r\n\tlabelPosition: string = 'before';\r\n\tmyValue: boolean = true;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicCheckboxes = basicCheckboxes;\r\n\t\tthis.exampleConfigurableCheckbox = configurableCheckbox;\r\n\t\tthis.exampleLabelPositions = labelPositions;\r\n\t\tthis.exampleChangeEvent = changeEvent;\r\n\t}\r\n\r\n\tchangeLablesPositions() {\r\n\t\tthis.labelPosition = this.labelPosition === 'before' ? 'after' : 'before';\r\n\t}\r\n\r\n\tchangeValueEvent() {\r\n\t\tconsole.log('myValue:', this.myValue);\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/datepicker/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicDatepicker\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe datepicker allows users to enter a date either through text input, or by choosing a date from the calendar. It is made up of several components and directives that work together.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerStartDate\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker2 startView=\\\"year\\\" [startAt]=\\\"startDate\\\"></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerSelectedValue\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Angular forms\\\" [formControl]=\\\"date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker1></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Angular forms (w/ deserialization)\\\" [formControl]=\\\"serializedDate\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker3></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Value binding\\\" [value]=\\\"date.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker4></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerWithMinMaxValidation\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker5\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker5\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker5></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerWithFilterValidation\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker6\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker6\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker6></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerInputAndChangeEvents\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker7\\\" placeholder=\\\"Input & change events\\\" (dateInput)=\\\"addEvent('input', $event)\\\" (dateChange)=\\\"addEvent('change', $event)\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker7\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker7></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\" *ngIf=\\\"events && events.length > 0\\\"></div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-demo\\\" *ngIf=\\\"events && events.length > 0\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-demo__preview\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div *ngFor=\\\"let e of events\\\">{{e}}</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDisabledDatepicker\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"dp1\\\" placeholder=\\\"Completely disabled\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"dp1\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #dp1></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"dp2\\\" placeholder=\\\"Popup disabled\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"dp2\\\" disabled></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #dp2></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"dp3\\\" placeholder=\\\"Input disabled\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerTouchUI\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker8\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker8\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker touchUi=\\\"true\\\" #picker8></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDatepickerOpenMethod\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker9\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #picker9></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<button mat-raised-button (click)=\\\"picker9.open()\\\">Open</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleUsesMomentJsDates\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"dp10\\\" placeholder=\\\"Moment.js datepicker\\\" [formControl]=\\\"date10\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"dp10\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t<mat-datepicker #dp10></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t\\r\\n\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the `* as`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the `default as` syntax.\r\nimport * as _moment from 'moment';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { default as _rollupMoment} from 'moment';\r\n\r\n\r\nconst basicDatepicker = {\r\n\tbeforeCodeTitle: 'Basic datepicker',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Basic datepicker */\r\n@Component({\r\n  selector: 'datepicker-overview-example',\r\n  templateUrl: 'datepicker-overview-example.html',\r\n  styleUrls: ['datepicker-overview-example.css'],\r\n})\r\nexport class DatepickerOverviewExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerSelectedValue = {\r\n\tbeforeCodeTitle: 'Datepicker selected value',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Checkbox configuration</h2>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"checked\">Checked</mat-checkbox>\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"indeterminate\">Indeterminate</mat-checkbox>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Align:</label>\r\n      <mat-radio-group [(ngModel)]=\"align\">\r\n        <mat-radio-button class=\"example-margin\" value=\"start\">Start</mat-radio-button>\r\n          <mat-radio-button class=\"example-margin\" value=\"end\">End</mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"disabled\">Disabled</mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card class=\"result\">\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox\r\n        class=\"example-margin\"\r\n        [(ngModel)]=\"checked\"\r\n        [(indeterminate)]=\"indeterminate\"\r\n        [align]=\"align\"\r\n        [disabled]=\"disabled\">\r\n        I'm a checkbox\r\n      </mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/** @title Datepicker selected value */\r\n@Component({\r\n  selector: 'datepicker-value-example',\r\n  templateUrl: 'datepicker-value-example.html',\r\n  styleUrls: ['datepicker-value-example.css'],\r\n})\r\nexport class DatepickerValueExample {\r\n  date = new FormControl(new Date());\r\n  serializedDate = new FormControl((new Date()).toISOString());\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerStartDate = {\r\n\tbeforeCodeTitle: 'Datepicker start date',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker startView=\"year\" [startAt]=\"startDate\"></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker start date */\r\n@Component({\r\n  selector: 'datepicker-start-view-example',\r\n  templateUrl: 'datepicker-start-view-example.html',\r\n  styleUrls: ['datepicker-start-view-example.css'],\r\n})\r\nexport class DatepickerStartViewExample {\r\n  startDate = new Date(1990, 0, 1);\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerWithMinMaxValidation = {\r\n\tbeforeCodeTitle: 'Datepicker with min & max validation',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-full-width\">\r\n  <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker with min & max validation */\r\n@Component({\r\n  selector: 'datepicker-min-max-example',\r\n  templateUrl: 'datepicker-min-max-example.html',\r\n  styleUrls: ['datepicker-min-max-example.css'],\r\n})\r\nexport class DatepickerMinMaxExample {\r\n  minDate = new Date(2000, 0, 1);\r\n  maxDate = new Date(2020, 0, 1);\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerWithFilterValidation = {\r\n\tbeforeCodeTitle: 'Datepicker with filter validation',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-full-width\">\r\n  <input matInput [matDatepickerFilter]=\"myFilter\" [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker with filter validation */\r\n@Component({\r\n  selector: 'datepicker-filter-example',\r\n  templateUrl: 'datepicker-filter-example.html',\r\n  styleUrls: ['datepicker-filter-example.css'],\r\n})\r\nexport class DatepickerFilterExample {\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    // Prevent Saturday and Sunday from being selected.\r\n    return day !== 0 && day !== 6;\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerInputAndChangeEvents = {\r\n\tbeforeCodeTitle: 'Datepicker input and change events',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Input & change events\"\r\n    (dateInput)=\"addEvent('input', $event)\" (dateChange)=\"addEvent('change', $event)\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>\r\n<div class=\"example-events\">\r\n  <div *ngFor=\"let e of events\">{{e}}</div>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatDatepickerInputEvent} from '@angular/material/datepicker';\\n\r\n/** @title Datepicker input and change events */\r\n@Component({\r\n  selector: 'datepicker-events-example',\r\n  templateUrl: 'datepicker-events-example.html',\r\n  styleUrls: ['datepicker-events-example.css'],\r\n})\r\nexport class DatepickerEventsExample {\r\n  events: string[] = [];\\n\r\n  addEvent(type: string, event: MatDatepickerInputEvent<Date>) {\r\n  this.events.push(\\`$\\{type\\}: $\\{event.value\\}\\`);\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst disabledDatepicker = {\r\n\tbeforeCodeTitle: 'Disabled datepicker',\r\n\thtmlCode: `\r\n<p>\r\n  <mat-form-field>\r\n    <input matInput [matDatepicker]=\"dp1\" placeholder=\"Completely disabled\" disabled>\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp1\"></mat-datepicker-toggle>\r\n    <mat-datepicker #dp1></mat-datepicker>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  <mat-form-field>\r\n    <input matInput [matDatepicker]=\"dp2\" placeholder=\"Popup disabled\">\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp2\" disabled></mat-datepicker-toggle>\r\n    <mat-datepicker #dp2></mat-datepicker>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  <mat-form-field>\r\n    <input matInput [matDatepicker]=\"dp3\" placeholder=\"Input disabled\" disabled>\r\n\t<mat-datepicker-toggle matSuffix [for]=\"dp3\">\r\n  </mat-datepicker-toggle>\r\n  <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n    </mat-form-field>\r\n</p>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Disabled datepicker */\r\n@Component({\r\n  selector: 'datepicker-disabled-example',\r\n  templateUrl: 'datepicker-disabled-example.html',\r\n  styleUrls: ['datepicker-disabled-example.css'],\r\n})\r\nexport class DatepickerDisabledExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerTouchUI = {\r\n\tbeforeCodeTitle: 'Datepicker touch UI',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-full-width\">\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker touchUi=\"true\" #picker></mat-datepicker>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker touch UI */\r\n@Component({\r\n  selector: 'datepicker-touch-example',\r\n  templateUrl: 'datepicker-touch-example.html',\r\n  styleUrls: ['datepicker-touch-example.css'],\r\n})\r\nexport class DatepickerTouchExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerOpenMethod = {\r\n\tbeforeCodeTitle: 'Datepicker open method',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-full-width\">\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n    <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>\r\n<button mat-raised-button (click)=\"picker.open()\">Open</button>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker open method */\r\n@Component({\r\n  selector: 'datepicker-api-example',\r\n  templateUrl: 'datepicker-api-example.html',\r\n  styleUrls: ['datepicker-api-example.css'],\r\n})\r\nexport class DatepickerApiExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerWithDifferentLocale = {\r\n\tbeforeCodeTitle: 'Datepicker with different locale',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Different locale\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>\r\n<button mat-button (click)=\"french()\">Dynamically switch to French</button>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\\n\r\n/** @title Datepicker with different locale */\r\n@Component({\r\n  selector: 'datepicker-locale-example',\r\n  templateUrl: 'datepicker-locale-example.html',\r\n  styleUrls: ['datepicker-locale-example.css'],\r\n  providers: [\r\n    // The locale would typically be provided on the root module of your application. We do it at\r\n    // the component level here, due to limitations of our example generation script.\r\n    {provide: MAT_DATE_LOCALE, useValue: 'ja-JP'},\\n\r\n    // \\`MomentDateAdapter\\` and \\`MAT_MOMENT_DATE_FORMATS\\` can be automatically provided by importing\r\n    // \\`MatMomentDateModule\\` in your applications root module. We provide it at the component level\r\n\t// here, due to limitations of our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerLocaleExample {\r\n  constructor(private adapter: DateAdapter<any>) {}\r\n  french() {\r\n    this.adapter.setLocale('fr');\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerThatUsesMomentJsDates = {\r\n\tbeforeCodeTitle: 'Datepicker that uses Moment.js dates',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Moment.js datepicker\" [formControl]=\"date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\\n\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the \\`* as\\`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the \\`default as\\` syntax.\r\nimport * as _moment from 'moment';\r\nimport {default as _rollupMoment} from 'moment';\r\nconst moment = _rollupMoment || _moment;\\n\r\n/** @title Datepicker that uses Moment.js dates */\r\n@Component({\r\n  selector: 'datepicker-moment-example',\r\n  templateUrl: 'datepicker-moment-example.html',\r\n  styleUrls: ['datepicker-moment-example.css'],\r\n  providers: [\r\n    // \\`MomentDateAdapter\\` and \\`MAT_MOMENT_DATE_FORMATS\\` can be automatically provided by importing\r\n    // \\`MatMomentDateModule\\` in your applications root module. We provide it at the component level\r\n    // here, due to limitations of our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerMomentExample {\r\n// Datepicker takes \\`Moment\\` objects instead of \\`Date\\` objects.\r\n  date = new FormControl(moment([2017, 0, 1]));\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerWithCustomFormats = {\r\n\tbeforeCodeTitle: 'Datepicker with custom formats',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Verbose datepicker\" [formControl]=\"date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\\n\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the \\`* as\\`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the \\`default as\\` syntax.\r\nimport * as _moment from 'moment';\r\nimport {default as _rollupMoment} from 'moment';\r\nconst moment = _rollupMoment || _moment;\r\n// See the Moment.js docs for the meaning of these formats:\r\n// https://momentjs.com/docs/#/displaying/format/\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n    dateInput: 'LL',\r\n  },\r\n  display: {\r\n    dateInput: 'LL',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n/** @title Datepicker with custom formats */\r\n@Component({\r\n  selector: 'datepicker-formats-example',\r\n  templateUrl: 'datepicker-formats-example.html',\r\n  styleUrls: ['datepicker-formats-example.css'],\r\n  providers: [\r\n  // \\`MomentDateAdapter\\` can be automatically provided by importing \\`MomentDateModule\\` in your\r\n  // application's root module. We provide it at the component level here, due to limitations of\r\n  // our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n\t{provide: MAT_DATE_FORMATS, useValue: MY_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerFormatsExample {\r\n  date = new FormControl(moment());\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst usesMomentJsDates = {\r\n\tbeforeCodeTitle: 'Datepicker uses Moment.js dates',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Moment.js datepicker\" [formControl]=\"date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\r\n\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the \\`* as\\`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the \\`default as\\` syntax.\r\nimport * as _moment from 'moment';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport {default as _rollupMoment} from 'moment';\r\n\r\nconst moment = _rollupMoment || _moment;\r\n\r\n/** @title Datepicker that uses Moment.js dates */\r\n@Component({\r\n  selector: 'datepicker-moment-example',\r\n  templateUrl: 'datepicker-moment-example.html',\r\n  styleUrls: ['datepicker-moment-example.css'],\r\n  providers: [\r\n  // \\`MomentDateAdapter\\` and \\`MAT_MOMENT_DATE_FORMATS\\` can be automatically provided by importing\r\n  // \\`MatMomentDateModule\\` in your applications root module. We provide it at the component level\r\n  // here, due to limitations of our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerMomentExample {\r\n  // Datepicker takes \\`Moment\\` objects instead of \\`Date\\` objects.\r\n  date = new FormControl(moment([2017, 0, 1]));\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n\r\n\r\nconst moment = _rollupMoment || _moment;\r\n\r\n\r\n@Component({\r\n\tselector: 'm-datepicker',\r\n\ttemplateUrl: './datepicker.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-events {\r\n\t\twidth: 400px;\r\n\t\theight: 200px;\r\n\t\tborder: 1px solid #555;\r\n\t\toverflow: auto;\r\n\t  }\r\n\t`],\r\n\tproviders: [\r\n\t\t// `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing\r\n\t\t// `MatMomentDateModule` in your applications root module. We provide it at the component level\r\n\t\t// here, due to limitations of our example generation script.\r\n\t\t{provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n\t\t{provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n\t  ],\r\n})\r\nexport class DatepickerComponent implements OnInit {\r\n\r\n\texampleBasicDatepicker;\r\n\texampleDatepickerStartDate;\r\n\texampleDatepickerSelectedValue;\r\n\texampleDatepickerWithMinMaxValidation;\r\n\texampleDatepickerWithFilterValidation;\r\n\texampleDatepickerInputAndChangeEvents;\r\n\texampleDisabledDatepicker;\r\n\texampleDatepickerTouchUI;\r\n\texampleDatepickerOpenMethod;\r\n\texampleDatepickerWithDifferentLocale;\r\n\texampleDatepickerThatUsesMomentJsDates;\r\n\texampleDatepickerWithCustomFormats;\r\n\texampleUsesMomentJsDates;\r\n\r\n\tstartDate = new Date(1990, 0, 1);\r\n\tdate = new FormControl(new Date());\r\n\tdate10 = new FormControl(moment([2017, 0, 1]));\r\n\r\n\tserializedDate = new FormControl((new Date()).toISOString());\r\n\tminDate = new Date(2011, 0, 1);\r\n\tmaxDate = new Date(2018, 11, 1);\r\n\r\n\tevents: string[] = [];\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicDatepicker = basicDatepicker;\r\n\t\tthis.exampleDatepickerStartDate = datepickerStartDate;\r\n\t\tthis.exampleDatepickerSelectedValue = datepickerSelectedValue;\r\n\t\tthis.exampleDatepickerWithMinMaxValidation = datepickerWithMinMaxValidation;\r\n\t\tthis.exampleDatepickerWithFilterValidation = datepickerWithFilterValidation;\r\n\t\tthis.exampleDatepickerInputAndChangeEvents = datepickerInputAndChangeEvents;\r\n\t\tthis.exampleDisabledDatepicker = disabledDatepicker;\r\n\t\tthis.exampleDatepickerTouchUI = datepickerTouchUI;\r\n\t\tthis.exampleDatepickerOpenMethod = datepickerOpenMethod;\r\n\t\tthis.exampleDatepickerWithDifferentLocale = datepickerWithDifferentLocale;\r\n\t\tthis.exampleDatepickerThatUsesMomentJsDates = datepickerThatUsesMomentJsDates;\r\n\t\tthis.exampleDatepickerWithCustomFormats = datepickerWithCustomFormats;\r\n\t\tthis.exampleUsesMomentJsDates = usesMomentJsDates;\r\n\t}\r\n\r\n\tmyFilter = (d: Date): boolean => {\r\n\t\tconst day = d.getDay();\r\n\t\t// Prevent Saturday and Sunday from being selected.\r\n\t\treturn day !== 0 && day !== 6;\r\n\t}\r\n\r\n\taddEvent(type: string, event: MatDatepickerInputEvent<Date>) {\r\n\t\tthis.events.push(`${type}: ${event.value}`);\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/form-field/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSimpleFormField\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-form-field</code> is a component used to wrap several Angular Material components and apply common Text field styles such as the underline, floating label, and hint messages.\\r\\n\\t\\t\\t\\t\\t<br /> The following Angular Material components are designed to work inside a\\r\\n\\t\\t\\t\\t\\t<code>mat-form-field</code>:\\r\\n\\t\\t\\t\\t\\t<ul>\\r\\n\\t\\t\\t\\t\\t\\t<li>\\r\\n\\t\\t\\t\\t\\t\\t\\t<code>input matInput & textarea matInput</code>\\r\\n\\t\\t\\t\\t\\t\\t\\t<li>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>mat-select</code>\\r\\n\\t\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t\\t\\t<li>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<code>mat-chip-list</code>\\r\\n\\t\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t</ul>\\r\\n\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Input\\\">\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<textarea matInput placeholder=\\\"Textarea\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Select\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Alabama</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Alaska</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Florida</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Illinois</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Kansas</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Michigan</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldWithLabel\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\" [formGroup]=\\\"options\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox formControlName=\\\"hideRequired\\\">Hide required marker</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<label>Float label: </label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-radio-group formControlName=\\\"floatLabel\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"auto\\\">Auto</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"always\\\">Always</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"never\\\">Never</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t\\t<mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\" [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Simple placeholder\\\" required>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<mat-form-field [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-label>Both a label and a placeholder</mat-label>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Simple placeholder\\\">\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\" [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-select required>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>-- None --</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Alabama</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Alaska</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Florida</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Illinois</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Kansas</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Michigan</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t<mat-placeholder>\\r\\n\\t\\t\\t\\t\\t\\t\\t<!-- <mat-icon>favorite</mat-icon> -->\\r\\n\\t\\t\\t\\t\\t\\t\\t<b> Fancy</b>\\r\\n\\t\\t\\t\\t\\t\\t\\t<i> placeholder</i>\\r\\n\\t\\t\\t\\t\\t\\t</mat-placeholder>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldWithHints\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field hintLabel=\\\"Max 10 characters\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput #input maxlength=\\\"10\\\" placeholder=\\\"Enter some input\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/10</mat-hint>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Select me\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option\\\">Option</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"end\\\">Here's the dropdown arrow ^</mat-hint>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldWithErrorMessages\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldWithPrefixSuffix\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<i matSuffix (click)=\\\"hide = !hide\\\" class=\\\"la\\\" [ngClass]=\\\"{'la-toggle-on' : !hide, 'la-toggle-off': hide }\\\"></i>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\" class=\\\"example-right-align\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span matPrefix>$&nbsp;</span>\\r\\n\\t\\t\\t\\t\\t\\t<span matSuffix>.00</span>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldTheming\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\" [formGroup]=\\\"options2\\\" [style.fontSize.px]=\\\"getFontSize()\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field [color]=\\\"options2.value.color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Color\\\" formControlName=\\\"color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"primary\\\">Primary</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"accent\\\">Accent</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"warn\\\">Warn</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field [color]=\\\"options2.value.color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Font size (px)\\\" formControlName=\\\"fontSize\\\" min=\\\"10\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"options2.get('fontSize')?.invalid\\\">Min size: 10px</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleFormFieldAppearanceVariants\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field appearance=\\\"legacy\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-label>Legacy form field</mat-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Placeholder\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint>Hint</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field appearance=\\\"standard\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-label>Standard form field</mat-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Placeholder\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint>Hint</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field appearance=\\\"fill\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-label>Fill form field</mat-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Placeholder\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint>Hint</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field appearance=\\\"outline\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-label>Outline form field</mat-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Placeholder\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint>Hint</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</p>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ElementRef, Input, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport {MatFormFieldControl} from '@angular/material';\r\n\r\nconst simpleFormField = {\r\n\t\tbeforeCodeTitle: 'Simple form field',\r\n\t\thtmlCode: `\r\n<div class=\"example-container\">\r\n  <mat-form-field>\r\n     <input matInput placeholder=\"Input\">\r\n  </mat-form-field>\r\n\r\n  <mat-form-field>\r\n    <textarea matInput placeholder=\"Textarea\"></textarea>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field>\r\n    <mat-select placeholder=\"Select\">\r\n      <mat-option value=\"option\">Option</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</div>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Simple form field */\r\n=@Component({\r\n  selector: 'form-field-overview-example',\r\n  templateUrl: 'form-field-overview-example.html',\r\n  styleUrls: ['form-field-overview-example.css']\r\n})\r\nexport class FormFieldOverviewExample {}`,\r\n\t\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldAppearanceVariants = {\r\n\tbeforeCodeTitle: 'Form field appearance variants',\r\n\thtmlCode: `\r\n<p>\r\n  <mat-form-field appearance=\"legacy\">\r\n    <mat-label>Legacy form field</mat-label>\r\n      <input matInput placeholder=\"Placeholder\">\r\n      <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n      <mat-hint>Hint</mat-hint>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  <mat-form-field appearance=\"standard\">\r\n    <mat-label>Standard form field</mat-label>\r\n    <input matInput placeholder=\"Placeholder\">\r\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n    <mat-hint>Hint</mat-hint>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Fill form field</mat-label>\r\n    <input matInput placeholder=\"Placeholder\">\r\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n     <mat-hint>Hint</mat-hint>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Outline form field</mat-label>\r\n    <input matInput placeholder=\"Placeholder\">\r\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n    <mat-hint>Hint</mat-hint>\r\n  </mat-form-field>\r\n</p>\r\n  `,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n\r\n/** @title Form field appearance variants */\r\n@Component({\r\n  selector: 'form-field-appearance-example',\r\n  templateUrl: 'form-field-appearance-example.html',\r\n  styleUrls: ['form-field-appearance-example.css'],\r\n})\r\nexport class FormFieldAppearanceExample {}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldWithLabel = {\r\n\t\tbeforeCodeTitle: 'Form field with label',\r\n\t\thtmlCode: `\r\n<div class=\"example-container\">\r\n  <form class=\"example-container\" [formGroup]=\"options\">\r\n    <mat-checkbox formControlName=\"hideRequired\">Hide required marker</mat-checkbox>\r\n    <div>\r\n      <label>Float label: </label>\r\n      <mat-radio-group formControlName=\"floatLabel\">\r\n        <mat-radio-button value=\"auto\">Auto</mat-radio-button>\r\n        <mat-radio-button value=\"always\">Always</mat-radio-button>\r\n        <mat-radio-button value=\"never\">Never</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n  </form>\r\n  <mat-form-field\r\n    [hideRequiredMarker]=\"options.value.hideRequired\"\r\n    [floatLabel]=\"options.value.floatLabel\">\r\n    <input matInput placeholder=\"Simple placeholder\" required>\r\n  </mat-form-field>\r\n  <mat-form-field [floatLabel]=\"options.value.floatLabel\">\r\n    <mat-label>Both a label and a placeholder</mat-label>\r\n    <input matInput placeholder=\"Simple placeholder\">\r\n  </mat-form-field>\r\n  <mat-form-field\r\n    [hideRequiredMarker]=\"options.value.hideRequired\"\r\n    [floatLabel]=\"options.value.floatLabel\">\r\n    <mat-select required>\r\n      <mat-option>-- None --</mat-option>\r\n      <mat-option value=\"option\">Option</mat-option>\r\n    </mat-select>\r\n    <mat-placeholder><mat-icon>favorite</mat-icon> <b> Fancy</b> <i> placeholder</i></mat-placeholder>\r\n  </mat-form-field>\r\n</div>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\n/** @title Form field with label */\r\n@Component({\r\n  selector: 'form-field-label-example',\r\n  templateUrl: 'form-field-label-example.html',\r\n  styleUrls: ['form-field-label-example.css']\r\n})\r\nexport class FormFieldLabelExample {\r\n  options: FormGroup;\r\n  constructor(fb: FormBuilder) {\r\n    this.options = fb.group({\r\n      hideRequired: false,\r\n      floatLabel: 'auto',\r\n    });\r\n  }\r\n}`,\r\n\t\tviewCode: ``,\r\n\t\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}\r\n.example-container form {\r\n  margin-bottom: 20px;\r\n}\r\n.example-container form > * {\r\n  margin: 5px 0;\r\n}\r\n.example-container .mat-radio-button {\r\n  margin: 0 5px;\r\n}`,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst formFieldWithHints = {\r\n\tbeforeCodeTitle: 'Form field with hints',\r\n\thtmlCode: `\r\n<div class=\"example-container\">\r\n  <mat-form-field hintLabel=\"Max 10 characters\">\r\n    <input matInput #input maxlength=\"10\" placeholder=\"Enter some input\">\r\n    <mat-hint align=\"end\">{{input.value?.length || 0}}/10</mat-hint>\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-select placeholder=\"Select me\">\r\n      <mat-option value=\"option\">Option</mat-option>\r\n    </mat-select>\r\n    <mat-hint align=\"end\">Here's the dropdown arrow ^</mat-hint>\r\n  </mat-form-field>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Form field with hints */\r\n@Component({\r\n  selector: 'form-field-hint-example',\r\n  templateUrl: 'form-field-hint-example.html',\r\n  styleUrls: ['form-field-hint-example.css']\r\n})\r\nexport class FormFieldHintExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldWithErrorMessages = {\r\n\tbeforeCodeTitle: 'Form field with error messages',\r\n\thtmlCode: `\r\n<div class=\"example-container\">\r\n  <mat-form-field>\r\n    <input matInput placeholder=\"Enter your email\" [formControl]=\"email\" required>\r\n      <mat-error *ngIf=\"email.invalid\">{{getErrorMessage()}}</mat-error>\r\n  </mat-form-field>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\\n\r\n/** @title Form field with error messages */\r\n@Component({\r\n  selector: 'form-field-error-example',\r\n  templateUrl: 'form-field-error-example.html',\r\n  styleUrls: ['form-field-error-example.css']\r\n})\r\nexport class FormFieldErrorExample {\r\n  email = new FormControl('', [Validators.required, Validators.email]);\\n\r\n  getErrorMessage() {\r\n    return this.email.hasError('required') ? 'You must enter a value' :\r\n      this.email.hasError('email') ? 'Not a valid email' :\r\n    '';\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldWithPrefixSuffix = {\r\n\tbeforeCodeTitle: 'Form field with prefix & suffix',\r\n\thtmlCode: `\r\n<div class=\"example-container\">\r\n  <mat-form-field>\r\n    <input matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\">\r\n    <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <input matInput placeholder=\"Amount\" type=\"number\" class=\"example-right-align\">\r\n    <span matPrefix>$&nbsp;</span>\r\n    <span matSuffix>.00</span>\r\n  </mat-form-field>\r\n</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Form field with prefix & suffix */\r\n@Component({\r\n  selector: 'form-field-prefix-suffix-example',\r\n  templateUrl: 'form-field-prefix-suffix-example.html',\r\n  styleUrls: ['form-field-prefix-suffix-example.css']\r\n})\r\nexport class FormFieldPrefixSuffixExample {\r\n  hide = true;\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}\r\n.example-right-align {\r\n  text-align: right;\r\n}\r\ninput.example-right-align::-webkit-outer-spin-button,\r\ninput.example-right-align::-webkit-inner-spin-button {\r\n  display: none;\r\n}\r\ninput.example-right-align {\r\n  -moz-appearance: textfield;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldTheming = {\r\n\tbeforeCodeTitle: 'Form field theming',\r\n\thtmlCode: `\r\n<form class=\"example-container\" [formGroup]=\"options\" [style.fontSize.px]=\"getFontSize()\">\r\n  <mat-form-field [color]=\"options.value.color\">\r\n    <mat-select placeholder=\"Color\" formControlName=\"color\">\r\n      <mat-option value=\"primary\">Primary</mat-option>\r\n      <mat-option value=\"accent\">Accent</mat-option>\r\n      <mat-option value=\"warn\">Warn</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <mat-form-field [color]=\"options.value.color\">\r\n    <input matInput type=\"number\" placeholder=\"Font size (px)\" formControlName=\"fontSize\" min=\"10\">\r\n     <mat-error *ngIf=\"options.get('fontSize')?.invalid\">Min size: 10px</mat-error>\r\n  </mat-form-field>\r\n </form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\\n\r\n/** @title Form field theming */\r\n@Component({\r\n  selector: 'form-field-theming-example',\r\n  templateUrl: 'form-field-theming-example.html',\r\n  styleUrls: ['form-field-theming-example.css']\r\n})\r\nexport class FormFieldThemingExample {\r\n  options: FormGroup;\\n\r\n  constructor(fb: FormBuilder) {\r\n    this.options = fb.group({\r\n      'color': 'primary',\r\n      'fontSize': [16, Validators.min(10)],\r\n    });\r\n  }\r\n  getFontSize() {\r\n    return Math.max(10, this.options.value.fontSize);\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.example-container > * {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst formFieldWithCustomTelephoneNumberInputControl = {\r\n\tbeforeCodeTitle: 'Form field with custom telephone number input control.',\r\n\thtmlCode: `\r\n<div [formGroup]=\"parts\">\r\n  <input class=\"area\" formControlName=\"area\" size=\"3\">\r\n  <span>&ndash;</span>\r\n  <input class=\"exchange\" formControlName=\"exchange\" size=\"3\">\r\n  <span>&ndash;</span>\r\n  <input class=\"subscriber\" formControlName=\"subscriber\" size=\"4\">\r\n</div>`,\r\n\ttsCode: `\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Component, ElementRef, Input, OnDestroy} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {MatFormFieldControl} from '@angular/material';\r\nimport {Subject} from 'rxjs/Subject';\\n\r\n/** Data structure for holding telephone number. */\r\nexport class MyTel {\r\n  constructor(public area: string, public exchange: string, public subscriber: string) {}\r\n}\r\n/** Custom \\`MatFormFieldControl\\` for telephone number input. */\r\n@Component({\r\n  selector: 'my-tel-input',\r\n  templateUrl: 'form-field-custom-control-example.html',\r\n  styleUrls: ['form-field-custom-control-example.css'],\r\n  providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}],\r\n  host: {\r\n    '[class.floating]': 'shouldLabelFloat',\r\n    '[id]': 'id',\r\n    '[attr.aria-describedby]': 'describedBy',\r\n  }\r\n})\r\nexport class MyTelInput implements MatFormFieldControl<MyTel>, OnDestroy {\r\n  static nextId = 0;\r\n  parts: FormGroup;\r\n  stateChanges = new Subject<void>();\r\n  focused = false;\r\n  ngControl = null;\r\n  errorState = false;\r\n  controlType = 'my-tel-input';\r\n  get empty() {\r\n    let n = this.parts.value;\r\n    return !n.area && !n.exchange && !n.subscriber;\r\n  }\r\n  get shouldLabelFloat() { return this.focused || !this.empty; }\r\n  id = \\`my-tel-input-\\${MyTelInput.nextId++}\\`;\r\n  describedBy = '';\\n\r\n  @Input()\r\n  get placeholder() { return this._placeholder; }\r\n  set placeholder(plh) {\r\n    this._placeholder = plh;\r\n    this.stateChanges.next();\r\n  }\\n\r\n  private _placeholder: string;\r\n  @Input()\r\n  get required() { return this._required; }\r\n  set required(req) {\r\n    this._required = coerceBooleanProperty(req);\r\n    this.stateChanges.next();\r\n  }\\n\r\n  private _required = false;\\n\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(dis) {\r\n    this._disabled = coerceBooleanProperty(dis);\r\n    this.stateChanges.next();\r\n  }\\n\r\n  private _disabled = false;\\n\r\n  @Input()\r\n  get value(): MyTel | null {\r\n    let n = this.parts.value;\r\n    if (n.area.length == 3 && n.exchange.length == 3 && n.subscriber.length == 4) {\r\n      return new MyTel(n.area, n.exchange, n.subscriber);\r\n    }\r\n    return null;\r\n  }\r\n  set value(tel: MyTel | null) {\r\n    tel = tel || new MyTel('', '', '');\r\n    this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber});\r\n    this.stateChanges.next();\r\n  }\\n\r\n  constructor(fb: FormBuilder, private fm: FocusMonitor, private elRef: ElementRef) {\r\n    this.parts = fb.group({\r\n      'area': '',\r\n      'exchange': '',\r\n     'subscriber': '',\r\n    });\\n\r\n    fm.monitor(elRef.nativeElement, true).subscribe((origin) => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n  }\\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n  }\\n\r\n  setDescribedByIds(ids: string[]) {\r\n    this.describedBy = ids.join(' ');\r\n  }\\n\r\n  onContainerClick(event: MouseEvent) {\r\n    if ((event.target as Element).tagName.toLowerCase() != 'input') {\r\n      this.elRef.nativeElement.querySelector('input').focus();\r\n    }\r\n  }\r\n}\\n\\n\r\n/** @title Form field with custom telephone number input control. */\r\n@Component({\r\n  selector: 'form-field-custom-control-example',\r\n  template: \\`\r\n    <mat-form-field>\r\n      <my-tel-input placeholder=\"Phone number\" required></my-tel-input>\r\n      <mat-icon matSuffix>phone</mat-icon>\r\n      <mat-hint>Include area code</mat-hint>\r\n    </mat-form-field>\r\n  \\`\r\n})\r\nexport class FormFieldCustomControlExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\ndiv {\r\n  display: flex;\r\n}\\n\r\ninput {\r\n  border: none;\r\n  background: none;\r\n  padding: 0;\r\n  outline: none;\r\n  font: inherit;\r\n  text-align: center;\r\n}\\n\r\nspan {\r\n  opacity: 0;\r\n  transition: opacity 200ms;\r\n}\\n\r\n:host.floating span {\r\n  opacity: 1;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-formfield',\r\n\ttemplateUrl: './formfield.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t  }\r\n\t  .example-container > * {\r\n\t\twidth: 100%;\r\n\t  }\r\n\r\n\t  .example-container form {\r\n\t  \tmargin-bottom: 20px;\r\n  \t  }\r\n  \t  .example-container form > * {\r\n\t    margin: 5px 0;\r\n      }\r\n  \t  .example-container .mat-radio-button {\r\n\t    margin: 0 5px;\r\n\t  }\r\n\t  .example-right-align {\r\n\t\ttext-align: right;\r\n\t  }\r\n\t  input.example-right-align::-webkit-outer-spin-button,\r\n\t  input.example-right-align::-webkit-inner-spin-button {\r\n\t\tdisplay: none;\r\n\t  }\r\n\t  input.example-right-align {\r\n\t\t-moz-appearance: textfield;\r\n\t  }\r\n\t`]\r\n})\r\nexport class FormfieldComponent implements OnInit {\r\n\r\n\texampleSimpleFormField;\r\n\texampleFormFieldWithLabel;\r\n\texampleFormFieldWithHints;\r\n\texampleFormFieldWithErrorMessages;\r\n\texampleFormFieldWithPrefixSuffix;\r\n\texampleFormFieldTheming;\r\n\texampleFormFieldWithCustomTelephoneNumberInputControl;\r\n\texampleFormFieldAppearanceVariants;\r\n\toptions: FormGroup;\r\n\toptions2: FormGroup;\r\n\r\n\temail = new FormControl('', [Validators.required, Validators.email]);\r\n\thide = true;\r\n\r\n\tgetErrorMessage() {\r\n\t\treturn this.email.hasError('required') ? 'You must enter a value' :\r\n\t\t\tthis.email.hasError('email') ? 'Not a valid email' :\r\n\t\t\t\t'';\r\n\t}\r\n\r\n\tconstructor(fb: FormBuilder) {\r\n\t\tthis.options = fb.group({\r\n\t\t\thideRequired: false,\r\n\t\t\tfloatLabel: 'auto',\r\n\t\t});\r\n\r\n\t\tthis.options2 = fb.group({\r\n\t\t\t'color': 'primary',\r\n\t\t\t'fontSize': [16, Validators.min(10)],\r\n\t\t});\r\n\t}\r\n\r\n\tgetFontSize() {\r\n\t\treturn Math.max(10, this.options2.value.fontSize);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleSimpleFormField = simpleFormField;\r\n\t\tthis.exampleFormFieldWithLabel = formFieldWithLabel;\r\n\t\tthis.exampleFormFieldWithHints = formFieldWithHints;\r\n\t\tthis.exampleFormFieldWithErrorMessages = formFieldWithErrorMessages;\r\n\t\tthis.exampleFormFieldWithPrefixSuffix = formFieldWithPrefixSuffix;\r\n\t\tthis.exampleFormFieldTheming = formFieldTheming;\r\n\t\tthis.exampleFormFieldWithCustomTelephoneNumberInputControl = formFieldWithCustomTelephoneNumberInputControl;\r\n\t\tthis.exampleFormFieldAppearanceVariants = formFieldAppearanceVariants;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/input/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicInputs\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tmatInput is a directive that allows native\\r\\n\\t\\t\\t\\t\\t<mark>input</mark> and\\r\\n\\t\\t\\t\\t\\t<mark>textarea</mark> elements to work with\\r\\n\\t\\t\\t\\t\\t<code>mat-form-field</code>.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Favorite food\\\" value=\\\"Sushi\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<textarea matInput placeholder=\\\"Leave a comment\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputWithACustomErrorStateMatcher\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint>Errors appear instantly!</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tPlease enter a valid email address\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tEmail is\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>required</strong>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAutoResizingTextarea\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<textarea matInput placeholder=\\\"Autosize textarea\\\" matTextareaAutosize matAutosizeMinRows=\\\"2\\\" matAutosizeMaxRows=\\\"5\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputWithAClearButton\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-form-field\\\">\\r\\n\\t\\t\\t\\t\\t\\t<input matInput type=\\\"text\\\" placeholder=\\\"Clearable input\\\" [(ngModel)]=\\\"value\\\" />\\r\\n\\t\\t\\t\\t\\t\\t<button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-close\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputWithErrorMessages\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"emailFormControl2.hasError('email') && !emailFormControl2.hasError('required')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tPlease enter a valid email address\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"emailFormControl2.hasError('required')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tEmail is\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>required</strong>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputsInAForm\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t<table class=\\\"example-full-width\\\" cellspacing=\\\"0\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"First name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Long Last Name That Will Be Truncated\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t\\t</table>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<textarea matInput placeholder=\\\"Address\\\">1600 Amphitheatre Pkwy</textarea>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<textarea matInput placeholder=\\\"Address 2\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t<table class=\\\"example-full-width\\\" cellspacing=\\\"0\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"City\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"State\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput #postalCode maxlength=\\\"5\\\" placeholder=\\\"Postal Code\\\" value=\\\"94043\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"end\\\">{{postalCode.value.length}} / 5</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t\\t</table>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputWithHints\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput #message maxlength=\\\"256\\\" placeholder=\\\"Message\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>Don't disclose personal info</strong>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"end\\\">{{message.value.length}} / 256</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInputsWithPrefixesAndSuffixes\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<span matPrefix>+1 &nbsp;</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"tel\\\" matInput placeholder=\\\"Telephone\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-edit\\\" matSuffix></i>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n\r\nconst basicInputs = {\r\n\tbeforeCodeTitle: 'Basic Inputs',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput placeholder=\"Favorite food\" value=\"Sushi\">\r\n  </mat-form-field>\r\n  <mat-form-field class=\"example-full-width\">\r\n    <textarea matInput placeholder=\"Leave a comment\"></textarea>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic Inputs\r\n*/\r\n@Component({\r\n  selector: 'input-overview-example',\r\n  styleUrls: ['input-overview-example.css'],\r\n  templateUrl: 'input-overview-example.html',\r\n})\r\nexport class InputOverviewExample {}`,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputWithACustomErrorStateMatcher = {\r\n\tbeforeCodeTitle: 'Input with a custom ErrorStateMatcher',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput placeholder=\"Email\" [formControl]=\"emailFormControl\"\r\n      [errorStateMatcher]=\"matcher\">\r\n    <mat-hint>Errors appear instantly!</mat-hint>\r\n    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\r\n      Please enter a valid email address\r\n    </mat-error>\r\n    <mat-error *ngIf=\"emailFormControl.hasError('required')\">\r\n      Email is <strong>required</strong>\r\n    </mat-error>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n  const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n  }\r\n}\r\n/** @title Input with a custom ErrorStateMatcher */\r\n@Component({\r\n  selector: 'input-error-state-matcher-example',\r\n  templateUrl: './input-error-state-matcher-example.html',\r\n  styleUrls: ['./input-error-state-matcher-example.css'],\r\n})\r\nexport class InputErrorStateMatcherExample {\r\n  emailFormControl = new FormControl('', [\r\n  Validators.required,\r\n  Validators.email,\r\n]);\r\n  matcher = new MyErrorStateMatcher();\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst autoResizingTextarea = {\r\n\tbeforeCodeTitle: 'Auto-resizing textarea',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <textarea matInput placeholder=\"Autosize textarea\" matTextareaAutosize matAutosizeMinRows=\"2\"\r\n    matAutosizeMaxRows=\"5\"></textarea>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';'n\r\n/** @title Auto-resizing textarea */\r\n@Component({\r\n  selector: 'input-autosize-textarea-example',\r\n  templateUrl: './input-autosize-textarea-example.html',\r\n  styleUrls: ['./input-autosize-textarea-example.css'],\r\n})\r\nexport class InputAutosizeTextareaExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputWithAClearButton = {\r\n\tbeforeCodeTitle: 'Input with a clear button',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-form-field\">\r\n  <input matInput type=\"text\" placeholder=\"Clearable input\" [(ngModel)]=\"value\"/>\r\n  <button mat-button *ngIf=\"value\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"value=''\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n </mat-form-field>\r\n\t\t`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Input with a clear button\r\n*/\r\n@Component({\r\n  selector: 'input-clearable-example',\r\n  templateUrl: './input-clearable-example.html',\r\n  styleUrls: ['./input-clearable-example.css'],\r\n})\r\nexport class InputClearableExample {\r\n  value = 'Clear me';\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form-field {\r\n  width: 200px;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputWithErrorMessages = {\r\n\tbeforeCodeTitle: 'Input with error messages',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput placeholder=\"Email\" [formControl]=\"emailFormControl\">\r\n    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\r\n      Please enter a valid email address\r\n    </mat-error>\r\n    <mat-error *ngIf=\"emailFormControl.hasError('required')\">\r\n      Email is <strong>required</strong>\r\n    </mat-error>\r\n  </mat-form-field>\r\n </form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\\n\r\n/**\r\n* @title Input with error messages\r\n*/\r\n@Component({\r\n  selector: 'input-errors-example',\r\n  templateUrl: 'input-errors-example.html',\r\n  styleUrls: ['input-errors-example.css'],\r\n})\r\nexport class InputErrorsExample {\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.email,\r\n  ]);\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputsInAForm = {\r\n\tbeforeCodeTitle: 'Inputs in a form',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput placeholder=\"Company (disabled)\" disabled value=\"Google\">\r\n  </mat-form-field>\r\n  <table class=\"example-full-width\" cellspacing=\"0\"><tr>\r\n    <td><mat-form-field class=\"example-full-width\">\r\n      <input matInput placeholder=\"First name\">\r\n    </mat-form-field></td>\r\n    <td><mat-form-field class=\"example-full-width\">\r\n      <input matInput placeholder=\"Long Last Name That Will Be Truncated\">\r\n    </mat-form-field></td>\r\n  </tr></table>\r\n  <p>\r\n    <mat-form-field class=\"example-full-width\">\r\n      <textarea matInput placeholder=\"Address\">1600 Amphitheatre Pkwy</textarea>\r\n    </mat-form-field>\r\n    <mat-form-field class=\"example-full-width\">\r\n      <textarea matInput placeholder=\"Address 2\"></textarea>\r\n    </mat-form-field>\r\n  </p>\r\n  <table class=\"example-full-width\" cellspacing=\"0\"><tr>\r\n    <td><mat-form-field class=\"example-full-width\">\r\n      <input matInput placeholder=\"City\">\r\n    </mat-form-field></td>\r\n    <td><mat-form-field class=\"example-full-width\">\r\n      <input matInput placeholder=\"State\">\r\n    </mat-form-field></td>\r\n    <td><mat-form-field class=\"example-full-width\">\r\n      <input matInput #postalCode maxlength=\"5\" placeholder=\"Postal Code\" value=\"94043\">\r\n      <mat-hint align=\"end\">{{postalCode.value.length}} / 5</mat-hint>\r\n    </mat-form-field></td>\r\n  </tr></table>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Inputs in a form\r\n*/\r\n@Component({\r\n  selector: 'input-form-example',\r\n  templateUrl: 'input-form-example.html',\r\n  styleUrls: ['input-form-example.css'],\r\n})\r\nexport class InputFormExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputWithHints = {\r\n\tbeforeCodeTitle: 'Input with hints',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <input matInput #message maxlength=\"256\" placeholder=\"Message\">\r\n    <mat-hint align=\"start\"><strong>Don't disclose personal info</strong> </mat-hint>\r\n    <mat-hint align=\"end\">{{message.value.length}} / 256</mat-hint>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Input with hints\r\n*/\r\n@Component({\r\n  selector: 'input-hint-example',\r\n  templateUrl: 'input-hint-example.html',\r\n  styleUrls: ['input-hint-example.css'],\r\n})\r\nexport class InputHintExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst inputsWithPrefixesAndSuffixes = {\r\n\tbeforeCodeTitle: 'Inputs with prefixes and suffixes',\r\n\thtmlCode: `\r\n<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <span matPrefix>+1 &nbsp;</span>\r\n    <input type=\"tel\" matInput placeholder=\"Telephone\">\r\n    <mat-icon matSuffix>mode_edit</mat-icon>\r\n  </mat-form-field>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Inputs with prefixes and suffixes\r\n*/\r\n@Component({\r\n  selector: 'input-prefix-suffix-example',\r\n  templateUrl: 'input-prefix-suffix-example.html',\r\n styleUrls: ['input-prefix-suffix-example.css'],\r\n})\r\nexport class InputPrefixSuffixExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-form {\r\n  min-width: 150px;\r\n  max-width: 500px;\r\n  width: 100%;\r\n}\r\n.example-full-width {\r\n  width: 100%;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerOpenMethod = {\r\n\tbeforeCodeTitle: 'Datepicker open method',\r\n\thtmlCode: `\r\n<mat-form-field class=\"example-full-width\">\r\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\r\n    <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>\r\n<button mat-raised-button (click)=\"picker.open()\">Open</button>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Datepicker open method */\r\n@Component({\r\n  selector: 'datepicker-api-example',\r\n  templateUrl: 'datepicker-api-example.html',\r\n  styleUrls: ['datepicker-api-example.css'],\r\n})\r\nexport class DatepickerApiExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst datepickerWithDifferentLocale = {\r\n\tbeforeCodeTitle: 'Datepicker with different locale',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Different locale\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>\r\n<button mat-button (click)=\"french()\">Dynamically switch to French</button>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\r\n/** @title Datepicker with different locale */\r\n@Component({\r\n  selector: 'datepicker-locale-example',\r\n  templateUrl: 'datepicker-locale-example.html',\r\n  styleUrls: ['datepicker-locale-example.css'],\r\n  providers: [\r\n    // The locale would typically be provided on the root module of your application. We do it at\r\n    // the component level here, due to limitations of our example generation script.\r\n    {provide: MAT_DATE_LOCALE, useValue: 'ja-JP'},\r\n    // \\`MomentDateAdapter\\` and \\`MAT_MOMENT_DATE_FORMATS\\` can be automatically provided by importing\r\n    // \\`MatMomentDateModule\\` in your applications root module. We provide it at the component level\r\n\t// here, due to limitations of our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerLocaleExample {\r\n  constructor(private adapter: DateAdapter<any>) {}\r\n  french() {\r\n    this.adapter.setLocale('fr');\r\n  }\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n\t\t`,\r\n\tisCodeVisible: false\r\n};\r\n\r\n\r\n\r\nconst datepickerThatUsesMomentJsDates = {\r\n\tbeforeCodeTitle: 'Datepicker that uses Moment.js dates',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput [matDatepicker]=\"dp\" placeholder=\"Moment.js datepicker\" [formControl]=\"date\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n  <mat-datepicker #dp></mat-datepicker>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\\n\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the \\`* as\\`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the \\`default as\\` syntax.\r\nimport * as _moment from 'moment';\r\nimport {default as _rollupMoment} from 'moment';\r\nconst moment = _rollupMoment || _moment;\\n\r\n/** @title Datepicker that uses Moment.js dates */\r\n@Component({\r\n  selector: 'datepicker-moment-example',\r\n  templateUrl: 'datepicker-moment-example.html',\r\n  styleUrls: ['datepicker-moment-example.css'],\r\n  providers: [\r\n    // \\`MomentDateAdapter\\` and \\`MAT_MOMENT_DATE_FORMATS\\` can be automatically provided by importing\r\n    // \\`MatMomentDateModule\\` in your applications root module. We provide it at the component level\r\n    // here, due to limitations of our example generation script.\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\r\n  ],\r\n})\r\nexport class DatepickerMomentExample {\r\n// Datepicker takes \\`Moment\\` objects instead of \\`Date\\` objects.\r\n  date = new FormControl(moment([2017, 0, 1]));\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n\t\t`,\r\n\tisCodeVisible: false\r\n};\r\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n\tisErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n\t\tconst isSubmitted = form && form.submitted;\r\n\t\treturn !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-input',\r\n\ttemplateUrl: './input.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-form {\r\n\t\tmin-width: 150px;\r\n\t\tmax-width: 500px;\r\n\t\twidth: 100%;\r\n\t  }\r\n\t  .example-full-width {\r\n\t\twidth: 100%;\r\n\t  }\r\n\t  .example-form-field {\r\n\t\twidth: 200px;\r\n\t  }\r\n\t`]\r\n})\r\nexport class InputComponent implements OnInit {\r\n\r\n\texampleBasicInputs;\r\n\texampleInputWithACustomErrorStateMatcher;\r\n\texampleAutoResizingTextarea;\r\n\texampleInputWithAClearButton;\r\n\texampleInputWithErrorMessages;\r\n\texampleInputsInAForm;\r\n\texampleInputWithHints;\r\n\texampleInputsWithPrefixesAndSuffixes;\r\n\r\n\tconstructor() { }\r\n\temailFormControl = new FormControl('', [\r\n\t\tValidators.required,\r\n\t\tValidators.email,\r\n\t]);\r\n\temailFormControl2 = new FormControl('', [\r\n\t\tValidators.required,\r\n\t\tValidators.email,\r\n\t]);\r\n\r\n\tmatcher = new MyErrorStateMatcher();\r\n\tvalue = 'Clear me';\r\n\r\n\tngOnInit() {\r\n\r\n\t\tthis.exampleBasicInputs = basicInputs;\r\n\t\tthis.exampleInputWithACustomErrorStateMatcher = inputWithACustomErrorStateMatcher;\r\n\t\tthis.exampleAutoResizingTextarea = autoResizingTextarea;\r\n\t\tthis.exampleInputWithAClearButton = inputWithAClearButton;\r\n\t\tthis.exampleInputWithErrorMessages = inputWithErrorMessages;\r\n\t\tthis.exampleInputsInAForm = inputsInAForm;\r\n\t\tthis.exampleInputWithHints = inputWithHints;\r\n\t\tthis.exampleInputsWithPrefixesAndSuffixes = inputsWithPrefixesAndSuffixes;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/radio/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicRadios\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-radio</code> provides the same functionality as a native\\r\\n\\t\\t\\t\\t\\t<code>&lt;input type=\\\"radio\\\"&gt;</code> enhanced with Material Design styling and animations.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alabama\\\">Alabama</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alaska\\\">Alaska</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Florida\\\">Florida</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Illinois\\\">Illinois</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Kansas\\\">Kansas</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDisabledRadios\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Input() disabled: boolean</code> Whether the radio group is disabled\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-radio-group disabled=\\\"true\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alabama\\\">Alabama</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alaska\\\">Alaska</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Florida\\\">Florida</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Illinois\\\">Illinois</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Kansas\\\">Kansas</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exmapleLabelPosition\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Input() labelPosition: 'before' | 'after'</code> Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-radio-group [labelPosition]=\\\"labelPosition\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alabama\\\">Alabama</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alaska\\\">Alaska</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Florida\\\">Florida</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Illinois\\\">Illinois</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Kansas\\\">Kansas</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-slide-toggle (change)=\\\"changeLablesPositions()\\\">Slide labels position</mat-slide-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleRadiosWithNgModel\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-radio-group class=\\\"example-radio-group\\\" [(ngModel)]=\\\"favoriteSeason\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let season of seasons\\\" [value]=\\\"season\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t{{season}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"example-selected-value\\\">Your favorite season is: <mark *ngIf=\\\"favoriteSeason\\\">{{favoriteSeason}}</mark></div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleChangeEvent\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Output() change: EventEmitter&lt;MatRadioChange&gt;</code> \\r\\n\\t\\t\\t\\t\\t\\tEvent emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button (the same behavior as \\r\\n\\t\\t\\t\\t\\t\\t<code>&lt;input type-\\\"radio\\\"&gt;</code>).\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-radio-group (change)=\\\"changeState()\\\" [(ngModel)]=\\\"selectedState\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alabama\\\">Alabama</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Alaska\\\">Alaska</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Florida\\\">Florida</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Illinois\\\">Illinois</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-button  value=\\\"Kansas\\\">Kansas</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\" *ngIf=\\\"state\\\"></div>\\r\\n\\t\\t\\t\\t\\t<span *ngIf=\\\"state\\\">Welcome to <mark>{{ state }}</mark>!</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicRadios = {\r\n\tbeforeCodeTitle: 'Basic radios',\r\n\thtmlCode: `\r\n<mat-radio-group>\r\n  <mat-radio-button value=\"1\">Option 1</mat-radio-button>\r\n  <mat-radio-button value=\"2\">Option 2</mat-radio-button>\r\n</mat-radio-group>\r\n\t\t`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic radios\r\n*/\r\n@Component({\r\n  selector: 'radio-overview-example',\r\n  templateUrl: 'radio-overview-example.html',\r\n styleUrls: ['radio-overview-example.css'],\r\n})\r\nexport class RadioOverviewExample {}`,\r\n\tcssCode: `\r\n.mat-radio-button ~ .mat-radio-button {\r\n  padding-right: 16px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst radiosWithNgModel = {\r\n\tbeforeCodeTitle: 'Radios with ngModel',\r\n\thtmlCode: `\r\n<mat-radio-group class=\"example-radio-group\" [(ngModel)]=\"favoriteSeason\">\r\n  <mat-radio-button class=\"example-radio-button\" *ngFor=\"let season of seasons\" [value]=\"season\">\r\n    {{season}}\r\n  </mat-radio-button>\r\n</mat-radio-group>\r\n<div class=\"example-selected-value\">Your favorite season is: {{favoriteSeason}}</div>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Radios with ngModel\r\n*/\r\n@Component({\r\n  selector: 'radio-ng-model-example',\r\n  templateUrl: 'radio-ng-model-example.html',\r\n  styleUrls: ['radio-ng-model-example.css'],\r\n})\r\nexport class RadioNgModelExample {\r\n  favoriteSeason: string;\\n\r\n  seasons = [\r\n    'Winter',\r\n    'Spring',\r\n    'Summer',\r\n    'Autumn',\r\n  ];\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-radio-group {\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n}\r\n.example-radio-button {\r\n  margin: 5px;\r\n}\r\n.example-selected-value {\r\n  margin: 15px 0;\r\n}\r\n\t\t`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst disabledRadios = {\r\n\tbeforeCodeTitle: 'Disabled radios',\r\n\thtmlCode: `\r\n<mat-radio-group disabled=\"true\">\r\n  <mat-radio-button  value=\"Alabama\">Alabama</mat-radio-button>\r\n  <mat-radio-button  value=\"Alaska\">Alaska</mat-radio-button>\r\n  <mat-radio-button  value=\"Florida\">Florida</mat-radio-button>\r\n  <mat-radio-button  value=\"Illinois\">Illinois</mat-radio-button>\r\n  <mat-radio-button  value=\"Kansas\">Kansas</mat-radio-button>\r\n</mat-radio-group>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'radio-disabled-example',\r\n  templateUrl: 'radio-disabled-example.html',\r\n styleUrls: ['radio-disabled-example.css'],\r\n})\r\nexport class RadioDisabledExample {}`,\r\n\tcssCode: `\r\n.mat-radio-button ~ .mat-radio-button {\r\n  padding-right: 16px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst labelPosition = {\r\n\tbeforeCodeTitle: 'Label position',\r\n\thtmlCode: `\r\n<mat-radio-group [labelPosition]=\"labelPosition\">\r\n  <mat-radio-button  value=\"Alabama\">Alabama</mat-radio-button>\r\n  <mat-radio-button  value=\"Alaska\">Alaska</mat-radio-button>\r\n  <mat-radio-button  value=\"Florida\">Florida</mat-radio-button>\r\n  <mat-radio-button  value=\"Illinois\">Illinois</mat-radio-button>\r\n  <mat-radio-button  value=\"Kansas\">Kansas</mat-radio-button>\r\n</mat-radio-group>\r\n<div class=\"m-separator m-separator--dashed\"></div>\r\n<mat-slide-toggle (change)=\"changeLablesPositions()\">Slide labels position</mat-slide-toggle>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'radio-label-position-example',\r\n  templateUrl: 'radio-lablel-position.html',\r\n styleUrls: ['radio-label-position-example.css'],\r\n})\r\nexport class RadioLabelPositionExample {\r\n  labelPosition: string = \"before\";\\n\r\n  changeLablesPositions() {\r\n    this.labelPosition = this.labelPosition == \"before\" ? \"after\" : \"before\";\r\n  }\r\n}`,\r\n\tcssCode: `\r\n.mat-radio-button ~ .mat-radio-button {\r\n  padding-right: 16px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst changeEvent = {\r\n\tbeforeCodeTitle: 'Change event binding',\r\n\thtmlCode: `\r\n<mat-radio-group (change)=\"changeState()\" [(ngModel)]=\"selectedState\">\r\n  <mat-radio-button  value=\"Alabama\">Alabama</mat-radio-button>\r\n  <mat-radio-button  value=\"Alaska\">Alaska</mat-radio-button>\r\n  <mat-radio-button  value=\"Florida\">Florida</mat-radio-button>\r\n  <mat-radio-button  value=\"Illinois\">Illinois</mat-radio-button>\r\n  <mat-radio-button  value=\"Kansas\">Kansas</mat-radio-button>\r\n</mat-radio-group>\r\n<div class=\"m-separator m-separator--dashed\" *ngIf=\"state\"></div>\r\n<span *ngIf=\"state\">Welcome to <mark>{{ state }}</mark>!</span>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\nselector: 'radio-change-event-example',\r\ntemplateUrl: 'radio-change-event.html',\r\nstyleUrls: ['radio-change-event-example.css'],\r\n})\r\nexport class RadioChangeEventExample {\r\n  state: string = \"\";\r\n  selectedState: string = \"\";\r\n\r\n  changeState() {\r\n    this.state = this.selectedState;\r\n  }\r\n}`,\r\n\tcssCode: `\r\n.mat-radio-button ~ .mat-radio-button {\r\n  padding-right: 16px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-radiobutton',\r\n\ttemplateUrl: './radiobutton.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\tmat-radio-button {\r\n\t\tpadding-right: 16px;\r\n\t}\r\n\t.example-radio-group {\r\n\t\tdisplay: inline-flex;\r\n\t\tflex-direction: column;\r\n\t  }\r\n\t  .example-radio-button {\r\n\t\tmargin: 15px;\r\n\t  }\r\n\t.example-selected-value {\r\n\t\tmargin: 15px 0;\r\n\t}\r\n\t`]\r\n})\r\nexport class RadiobuttonComponent implements OnInit {\r\n\r\n\texampleBasicRadios;\r\n\texampleRadiosWithNgModel;\r\n\texampleDisabledRadios;\r\n\texmapleLabelPosition;\r\n\texampleChangeEvent;\r\n\r\n\tfavoriteSeason: string;\r\n\r\n\tseasons = [\r\n\t\t'Winter',\r\n\t\t'Spring',\r\n\t\t'Summer',\r\n\t\t'Autumn',\r\n\t];\r\n\r\n\tstate: string = '';\r\n\tselectedState: string = '';\r\n\r\n\tlabelPosition: string = 'before';\r\n\r\n\tchangeLablesPositions() {\r\n\t\tthis.labelPosition = this.labelPosition === 'before' ? 'after' : 'before';\r\n\t}\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicRadios = basicRadios;\r\n\t\tthis.exampleRadiosWithNgModel = radiosWithNgModel;\r\n\t\tthis.exampleDisabledRadios = disabledRadios;\r\n\t\tthis.exmapleLabelPosition = labelPosition;\r\n\t\tthis.exampleChangeEvent = changeEvent;\r\n\t}\r\n\r\n\tchangeState() {\r\n\t\tthis.state = this.selectedState;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/select/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicSelect\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-select</code> is a form control for selecting a value from a set of options, similar to the native\\r\\n\\t\\t\\t\\t\\t<code>&lt;select&gt;</code> element. You can read more about selects in the Material Design spec. It is designed to work inside of a\\r\\n\\t\\t\\t\\t\\t<code>mat-form-field</code> element.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Favorite food\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{{ food.viewValue }}\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWith2WayValueBinding\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select [(value)]=\\\"selected\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>None</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option1\\\">Option 1</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option2\\\">Option 2</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"option3\\\">Option 3</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t\\tYou selected:\\r\\n\\t\\t\\t\\t\\t<mark *ngIf=\\\"selected\\\">{{selected}}</mark>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectInAForm\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<form class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Favorite food\\\" [(ngModel)]=\\\"selectedValue\\\" name=\\\"food\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{food.viewValue}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>Selected value:\\r\\n\\t\\t\\t\\t\\t\\t<mark *ngIf=\\\"selectedValue\\\">{{selectedValue}}</mark>\\r\\n\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithFormFieldFeature\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Favorite animal\\\" [formControl]=\\\"animalControl\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>--</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{{animal.name}}\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"animalControl.hasError('required')\\\">Please choose an animal</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t<mat-hint>{{animalControl.value?.sound}}</mat-hint>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithResetOption\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"State\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>None</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let state of states\\\" [value]=\\\"state\\\">{{state}}</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithOptionGroups\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Pokemon\\\" [formControl]=\\\"pokemonControl\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>-- None --</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-optgroup *ngFor=\\\"let group of pokemonGroups\\\" [label]=\\\"group.name\\\" [disabled]=\\\"group.disabled\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let pokemon of group.pokemon\\\" [value]=\\\"pokemon.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ pokemon.viewValue }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-optgroup>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithMultipleSelection\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings\\\" multiple>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithCustomTriggerText\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings2\\\" multiple>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-select-trigger>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{{toppings2.value ? toppings2.value[0] : ''}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span *ngIf=\\\"toppings2.value?.length > 1\\\" class=\\\"example-additional-selection\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(+{{toppings2.value.length - 1}} others)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-select-trigger>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let topping of toppingList2\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithCustomPanelStyling\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Panel color\\\" [formControl]=\\\"panelColor\\\" panelClass=\\\"example-panel-{{panelColor.value}}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"red\\\">Red</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"green\\\">Green</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"blue\\\">Blue</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSelectWithACustomErrorStateMatcher\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Choose one\\\" [formControl]=\\\"selected2\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option>Clear</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"valid\\\">Valid option</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"invalid\\\">Invalid option</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t<mat-hint>Errors appear instantly!</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"selected2.hasError('required')\\\">You must make a selection</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"selected2.hasError('pattern') && !selected2.hasError('required')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tYour selection is invalid\\r\\n\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl, Validators, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\nconst basicSelect = {\r\n\t\tbeforeCodeTitle: 'Basic select',\r\n\t\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Favorite food\">\r\n    <mat-option *ngFor=\"let food of foods\" [value]=\"food.value\">\r\n      {{ food.viewValue }}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n\t\t`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic select\r\n*/\r\n@Component({\r\n  selector: 'select-overview-example',\r\n  templateUrl: 'select-overview-example.html',\r\n  styleUrls: ['select-overview-example.css'],\r\n})\r\nexport class SelectOverviewExample {\r\n  foods = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos'}\r\n  ];\r\n}`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst selectWith2WayValueBinding = {\r\n\tbeforeCodeTitle: 'Select with 2-way value binding',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select [(value)]=\"selected\">\r\n    <mat-option>None</mat-option>\r\n    <mat-option value=\"option1\">Option 1</mat-option>\r\n    <mat-option value=\"option2\">Option 2</mat-option>\r\n    <mat-option value=\"option3\">Option 3</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n<p>You selected: {{selected}}</p>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Select with 2-way value binding */\r\n@Component({\r\n  selector: 'select-value-binding-example',\r\n  templateUrl: 'select-value-binding-example.html',\r\n  styleUrls: ['select-value-binding-example.css'],\r\n})\r\nexport class SelectValueBindingExample {\r\n  selected = 'option2';\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectInAForm = {\r\n\tbeforeCodeTitle: 'Select in a form',\r\n\thtmlCode: `\r\n<form>\r\n  <mat-form-field>\r\n    <mat-select placeholder=\"Favorite food\" [(ngModel)]=\"selectedValue\" name=\"food\">\r\n      <mat-option *ngFor=\"let food of foods\" [value]=\"food.value\">\r\n        {{food.viewValue}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\t<p> Selected value: {{selectedValue}} </p>\r\n</form>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Select in a form\r\n*/\r\n@Component({\r\n  selector: 'select-form-example',\r\n  templateUrl: 'select-form-example.html',\r\n  styleUrls: ['select-form-example.css'],\r\n})\r\nexport class SelectFormExample {\r\n selectedValue: string;\r\n  foods = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos'}\r\n  ];\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithFormFieldFeature = {\r\n\tbeforeCodeTitle: 'Select with form field features',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Favorite animal\" [formControl]=\"animalControl\" required>\r\n    <mat-option>--</mat-option>\r\n    <mat-option *ngFor=\"let animal of animals\" [value]=\"animal\">\r\n      {{animal.name}}\r\n\t</mat-option>\r\n  </mat-select>\r\n  <mat-error *ngIf=\"animalControl.hasError('required')\">Please choose an animal</mat-error>\r\n  <mat-hint>{{animalControl.value?.sound}}</mat-hint>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\\n\r\n/** @title Select with form field features */\r\n@Component({\r\n  selector: 'select-hint-error-example',\r\n  templateUrl: 'select-hint-error-example.html',\r\n  styleUrls: ['select-hint-error-example.css'],\r\n})\r\nexport class SelectHintErrorExample {\r\n  animalControl = new FormControl('', [Validators.required]);\r\n  animals = [\r\n    {name: 'Dog', sound: 'Woof!'},\r\n    {name: 'Cat', sound: 'Meow!'},\r\n    {name: 'Cow', sound: 'Moo!'},\r\n    {name: 'Fox', sound: 'Wa-pa-pa-pa-pa-pa-pow!'},\r\n  ];\r\n}\r\n`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n\r\nconst selectWithResetOption = {\r\n\tbeforeCodeTitle: 'Select with reset option',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"State\">\r\n    <mat-option>None</mat-option>\r\n    <mat-option *ngFor=\"let state of states\" [value]=\"state\">{{state}}</mat-option>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Select with reset option */\r\n@Component({\r\n  selector: 'select-reset-example',\r\n  templateUrl: 'select-reset-example.html',\r\n  styleUrls: ['select-reset-example.css'],\r\n})\r\nexport class SelectResetExample {\r\n  states = [\r\n    'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',\r\n    'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',\r\n    'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\r\n    'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',\r\n    'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\r\n    'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\r\n    'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'\r\n  ];\r\n}\r\n`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithOptionGroups = {\r\n\tbeforeCodeTitle: 'Select with option groups',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Pokemon\" [formControl]=\"pokemonControl\">\r\n    <mat-option>-- None --</mat-option>\r\n    <mat-optgroup *ngFor=\"let group of pokemonGroups\" [label]=\"group.name\"\r\n      [disabled]=\"group.disabled\">\r\n      <mat-option *ngFor=\"let pokemon of group.pokemon\" [value]=\"pokemon.value\">\r\n         {{ pokemon.viewValue }}\r\n        </mat-option>\r\n    </mat-optgroup>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/** @title Select with option groups */\r\n@Component({\r\n  selector: 'select-optgroup-example',\r\n  templateUrl: 'select-optgroup-example.html',\r\n  styleUrls: ['select-optgroup-example.css'],\r\n})\r\nexport class SelectOptgroupExample {\r\n  pokemonControl = new FormControl();\r\n  pokemonGroups = [\r\n  {\r\n    name: 'Grass',\r\n    pokemon: [\r\n    { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\r\n    { value: 'oddish-1', viewValue: 'Oddish' },\r\n    { value: 'bellsprout-2', viewValue: 'Bellsprout' }\r\n  ]\r\n  },\r\n  {\r\n    name: 'Water',\r\n    pokemon: [\r\n    { value: 'squirtle-3', viewValue: 'Squirtle' },\r\n    { value: 'psyduck-4', viewValue: 'Psyduck' },\r\n    { value: 'horsea-5', viewValue: 'Horsea' }\r\n  ]\r\n  },\r\n  {\r\n    name: 'Fire',\r\n    disabled: true,\r\n    pokemon: [\r\n    { value: 'charmander-6', viewValue: 'Charmander' },\r\n    { value: 'vulpix-7', viewValue: 'Vulpix' },\r\n    { value: 'flareon-8', viewValue: 'Flareon' }\r\n  ]\r\n  },\r\n  {\r\n    name: 'Psychic',\r\n    pokemon: [\r\n    { value: 'mew-9', viewValue: 'Mew' },\r\n    { value: 'mewtwo-10', viewValue: 'Mewtwo' },\r\n  ]\r\n  }\r\n  ];\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithMultipleSelection = {\r\n\tbeforeCodeTitle: 'Select with multiple selection',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Toppings\" [formControl]=\"toppings\" multiple>\r\n    <mat-option *ngFor=\"let topping of toppingList\" [value]=\"topping\">{{topping}}</mat-option>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/** @title Select with multiple selection */\r\n@Component({\r\n  selector: 'select-multiple-example',\r\n  templateUrl: 'select-multiple-example.html',\r\n  styleUrls: ['select-multiple-example.css'],\r\n})\r\nexport class SelectMultipleExample {\r\n  toppings = new FormControl();\r\n  toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n}\r\n\t\t`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithCustomTriggerText = {\r\n\tbeforeCodeTitle: 'Select with custom trigger text',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Toppings\" [formControl]=\"toppings\" multiple>\r\n    <mat-select-trigger>\r\n      {{toppings.value ? toppings.value[0] : ''}}\r\n      <span *ngIf=\"toppings.value?.length > 1\" class=\"example-additional-selection\">\r\n        (+{{toppings.value.length - 1}} others)\r\n       </span>\r\n    </mat-select-trigger>\r\n    <mat-option *ngFor=\"let topping of toppingList\" [value]=\"topping\">{{topping}}</mat-option>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/** @title Select with custom trigger text */\r\n@Component({\r\n  selector: 'select-custom-trigger-example',\r\n  templateUrl: 'select-custom-trigger-example.html',\r\n  styleUrls: ['select-custom-trigger-example.css'],\r\n})\r\nexport class SelectCustomTriggerExample {\r\n  toppings = new FormControl();\r\n  toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-additional-selection {\r\n  opacity: 0.75;\r\n  font-size: 0.75em;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithNoOptionRipple = {\r\n\tbeforeCodeTitle: 'Select with no option ripple',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Select an option\" disableRipple>\r\n    <mat-option value=\"1\">Option 1</mat-option>\r\n    <mat-option value=\"2\">Option 2</mat-option>\r\n    <mat-option value=\"3\">Option 3</mat-option>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Select with no option ripple */\r\n@Component({\r\n  selector: 'select-no-ripple-example',\r\n  templateUrl: 'select-no-ripple-example.html',\r\n  styleUrls: ['select-no-ripple-example.css'],\r\n})\r\nexport class SelectNoRippleExample {}`,\r\n\tviewCode: ``,\r\n\tcssCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithCustomPanelStyling = {\r\n\tbeforeCodeTitle: 'Select with custom panel styling',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Panel color\" [formControl]=\"panelColor\"\r\n    panelClass=\"example-panel-{{panelColor.value}}\">\r\n    <mat-option value=\"red\">Red</mat-option>\r\n    <mat-option value=\"green\">Green</mat-option>\r\n    <mat-option value=\"blue\">Blue</mat-option>\r\n  </mat-select>\r\n</mat-form-field>`,\r\n\ttsCode: `\r\nimport {Component, ViewEncapsulation} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\\n\r\n/**\r\n* @title Select with custom panel styling\r\n*/\r\n@Component({\r\n  selector: 'select-panel-class-example',\r\n  templateUrl: 'select-panel-class-example.html',\r\n  styleUrls: ['select-panel-class-example.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SelectPanelClassExample {\r\n  panelColor = new FormControl('red');\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-panel-red .mat-select-content {\r\n  background: rgba(255, 0, 0, 0.5);\r\n}\r\n.example-panel-green .mat-select-content {\r\n  background: rgba(0, 255, 0, 0.5);\r\n}\r\n.example-panel-blue .mat-select-content {\r\n  background: rgba(0, 0, 255, 0.5);\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst selectWithACustomErrorStateMatcher = {\r\n\tbeforeCodeTitle: 'Select with a custom ErrorStateMatcher',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <mat-select placeholder=\"Choose one\" [formControl]=\"selected\" [errorStateMatcher]=\"matcher\">\r\n    <mat-option>Clear</mat-option>\r\n    <mat-option value=\"valid\">Valid option</mat-option>\r\n    <mat-option value=\"invalid\">Invalid option</mat-option>\r\n  </mat-select>\r\n  <mat-hint>Errors appear instantly!</mat-hint>\r\n  <mat-error *ngIf=\"selected.hasError('required')\">You must make a selection</mat-error>\r\n  <mat-error *ngIf=\"selected.hasError('pattern') && !selected.hasError('required')\">\r\n    Your selection is invalid\r\n  </mat-error>\r\n</mat-form-field>\r\n\t  \t`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n  }\r\n}\\n\r\n/** @title Select with a custom ErrorStateMatcher */\r\n@Component({\r\n  selector: 'select-error-state-matcher-example',\r\n  templateUrl: 'select-error-state-matcher-example.html',\r\n  styleUrls: ['select-error-state-matcher-example.css'],\r\n})\r\nexport class SelectErrorStateMatcherExample {\r\n  selected = new FormControl('valid', [\r\n    Validators.required,\r\n    Validators.pattern('valid'),\r\n  ]);\\n\r\n  matcher = new MyErrorStateMatcher();\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n\t\t`,\r\n\tisCodeVisible: false\r\n};\r\n\r\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n\tisErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n\t  const isSubmitted = form && form.submitted;\r\n\t  return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n\t}\r\n  }\r\n\r\n@Component({\r\n\tselector: 'm-select',\r\n\ttemplateUrl: './select.component.html',\r\n\tstyles: [`\r\n\t.example-additional-selection {\r\n\t\topacity: 0.75;\r\n\t\tfont-size: 0.75em;\r\n\t  }\r\n\t  .example-panel-red .mat-select-content {\r\n\t\tbackground: rgba(255, 0, 0, 0.5);\r\n\t  }\r\n\t  .example-panel-green .mat-select-content {\r\n\t\tbackground: rgba(0, 255, 0, 0.5);\r\n\t  }\r\n\t  .example-panel-blue .mat-select-content {\r\n\t\tbackground: rgba(0, 0, 255, 0.5);\r\n\t  }\r\n\t`]\r\n})\r\nexport class SelectComponent implements OnInit {\r\n\r\n\texampleBasicSelect;\r\n\texampleSelectWith2WayValueBinding;\r\n\texampleSelectInAForm;\r\n\texampleSelectWithFormFieldFeature;\r\n\texampleSelectWithResetOption;\r\n\texampleSelectWithOptionGroups;\r\n\texampleSelectWithMultipleSelection;\r\n\texampleSelectWithCustomTriggerText;\r\n\texampleSelectWithCustomPanelStyling;\r\n\texampleSelectWithACustomErrorStateMatcher;\r\n\r\n\ttoppings = new FormControl();\r\n\ttoppings2 = new FormControl();\r\n\tpanelColor = new FormControl('red');\r\n\r\n  \ttoppingList2 = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\ttoppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\r\n\tfoods = [\r\n\t\t{ value: 'steak-0', viewValue: 'Steak' },\r\n\t\t{ value: 'pizza-1', viewValue: 'Pizza' },\r\n\t\t{ value: 'tacos-2', viewValue: 'Tacos' }\r\n\t];\r\n\r\n\tstates = [\r\n\t\t'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',\r\n\t\t'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',\r\n\t\t'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\r\n\t\t'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',\r\n\t\t'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\r\n\t\t'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\r\n\t\t'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'\r\n\t];\r\n\tselected = 'option2';\r\n\r\n\tselectedValue: string;\r\n\r\n\tpokemonControl = new FormControl();\r\n\r\n\tpokemonGroups = [\r\n\t\t{\r\n\t\t\tname: 'Grass',\r\n\t\t\tpokemon: [\r\n\t\t\t\t{ value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\r\n\t\t\t\t{ value: 'oddish-1', viewValue: 'Oddish' },\r\n\t\t\t\t{ value: 'bellsprout-2', viewValue: 'Bellsprout' }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Water',\r\n\t\t\tpokemon: [\r\n\t\t\t\t{ value: 'squirtle-3', viewValue: 'Squirtle' },\r\n\t\t\t\t{ value: 'psyduck-4', viewValue: 'Psyduck' },\r\n\t\t\t\t{ value: 'horsea-5', viewValue: 'Horsea' }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Fire',\r\n\t\t\tdisabled: true,\r\n\t\t\tpokemon: [\r\n\t\t\t\t{ value: 'charmander-6', viewValue: 'Charmander' },\r\n\t\t\t\t{ value: 'vulpix-7', viewValue: 'Vulpix' },\r\n\t\t\t\t{ value: 'flareon-8', viewValue: 'Flareon' }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Psychic',\r\n\t\t\tpokemon: [\r\n\t\t\t\t{ value: 'mew-9', viewValue: 'Mew' },\r\n\t\t\t\t{ value: 'mewtwo-10', viewValue: 'Mewtwo' },\r\n\t\t\t]\r\n\t\t}\r\n\t];\r\n\r\n\tanimalControl = new FormControl('', [Validators.required]);\r\n\r\n\tanimals = [\r\n\t\t{ name: 'Dog', sound: 'Woof!' },\r\n\t\t{ name: 'Cat', sound: 'Meow!' },\r\n\t\t{ name: 'Cow', sound: 'Moo!' },\r\n\t\t{ name: 'Fox', sound: 'Wa-pa-pa-pa-pa-pa-pow!' },\r\n\t];\r\n\r\n\tselected2 = new FormControl('valid', [\r\n\t\tValidators.required,\r\n\t\tValidators.pattern('valid'),\r\n\t]);\r\n\r\n\tmatcher = new MyErrorStateMatcher();\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicSelect = basicSelect;\r\n\t\tthis.exampleSelectWith2WayValueBinding = selectWith2WayValueBinding;\r\n\t\tthis.exampleSelectInAForm = selectInAForm;\r\n\t\tthis.exampleSelectWithFormFieldFeature = selectWithFormFieldFeature;\r\n\t\tthis.exampleSelectWithResetOption = selectWithResetOption;\r\n\t\tthis.exampleSelectWithOptionGroups = selectWithOptionGroups;\r\n\t\tthis.exampleSelectWithMultipleSelection = selectWithMultipleSelection;\r\n\t\tthis.exampleSelectWithCustomTriggerText = selectWithCustomTriggerText;\r\n\t\tthis.exampleSelectWithCustomPanelStyling = selectWithCustomPanelStyling;\r\n\t\tthis.exampleSelectWithACustomErrorStateMatcher = selectWithACustomErrorStateMatcher;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/slider/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicSlider\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-slider</code> allows for the selection of a value from a range via mouse, touch, or keyboard, similar to\\r\\n\\t\\t\\t\\t\\t<code>&lt;input type=\\\"range\\\"&gt;</code>.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-slider></mat-slider>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleChangeEvent\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Output() change: EventEmitter&lt;MatSliderChange&gt;</code> Event emitted when the slider value has changed.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-slider (change)=\\\"changeSlider()\\\" [(ngModel)]=\\\"myValue\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\"1\\\"></mat-slider>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\" *ngIf=\\\"myValue\\\"></div>\\r\\n\\t\\t\\t\\t\\t<span *ngIf=\\\"myValue\\\">Selected: <mark>{{ myValue }}</mark>%</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleConfigurableSlider\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-margin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Value\\\" [(ngModel)]=\\\"value\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-margin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Min value\\\" [(ngModel)]=\\\"min\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-margin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Max value\\\" [(ngModel)]=\\\"max\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-margin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Step size\\\" [(ngModel)]=\\\"step\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"showTicks\\\">Show ticks</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"autoTicks\\\" *ngIf=\\\"showTicks\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tAuto ticks\\r\\n\\t\\t\\t\\t\\t\\t</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-margin\\\" *ngIf=\\\"showTicks && !autoTicks\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" placeholder=\\\"Tick interval\\\" [(ngModel)]=\\\"tickInterval\\\">\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"thumbLabel\\\">Show thumb label</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"vertical\\\">Vertical</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"invert\\\">Inverted</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<h5>Result</h5>\\r\\n\\t\\t\\t\\t\\t<mat-slider class=\\\"example-margin\\\" [disabled]=\\\"disabled\\\" [invert]=\\\"invert\\\" [max]=\\\"max\\\" [min]=\\\"min\\\" [step]=\\\"step\\\" [thumbLabel]=\\\"thumbLabel\\\" [tickInterval]=\\\"tickInterval\\\" [(ngModel)]=\\\"value\\\" [vertical]=\\\"vertical\\\">\\r\\n\\t\\t\\t\\t\\t</mat-slider>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicSlider = {\r\n\t\tbeforeCodeTitle: 'Basic slider',\r\n\t\thtmlCode: `<mat-slider></mat-slider>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n * @title Basic slider\r\n */\r\n@Component({\r\n  selector: 'slider-overview-example',\r\n  templateUrl: 'slider-overview-example.html',\r\n  styleUrls: ['slider-overview-example.css'],\r\n})\r\nexport class SliderOverviewExample {}\r\n\t\t`,\r\n\t\tcssCode: `\r\n/** No CSS for this example */\r\n.mat-slider {\r\n  width: 300px;\r\n}`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst configurableSlider = {\r\n\tbeforeCodeTitle: 'Configurable slider',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Slider configuration</h2>\r\n    <section class=\"example-section\">\r\n      <mat-form-field class=\"example-margin\">\r\n        <input matInput type=\"number\" placeholder=\"Value\" [(ngModel)]=\"value\">\r\n      </mat-form-field>\r\n      <mat-form-field class=\"example-margin\">\r\n        <input matInput type=\"number\" placeholder=\"Min value\" [(ngModel)]=\"min\">\r\n      </mat-form-field>\r\n      <mat-form-field class=\"example-margin\">\r\n        <input matInput type=\"number\" placeholder=\"Max value\" [(ngModel)]=\"max\">\r\n      </mat-form-field>\r\n      <mat-form-field class=\"example-margin\">\r\n        <input matInput type=\"number\" placeholder=\"Step size\" [(ngModel)]=\"step\">\r\n      </mat-form-field>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"showTicks\">Show ticks</mat-checkbox>\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"autoTicks\" *ngIf=\"showTicks\">\r\n        Auto ticks\r\n      </mat-checkbox>\r\n      <mat-form-field class=\"example-margin\" *ngIf=\"showTicks && !autoTicks\">\r\n        <input matInput type=\"number\" placeholder=\"Tick interval\" [(ngModel)]=\"tickInterval\">\r\n      </mat-form-field>\r\n     </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"thumbLabel\">Show thumb label</mat-checkbox>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"vertical\">Vertical</mat-checkbox>\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"invert\">Inverted</mat-checkbox>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"disabled\">Disabled</mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card class=\"result\">\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <mat-slider\r\n      class=\"example-margin\"\r\n      [disabled]=\"disabled\"\r\n      [invert]=\"invert\"\r\n      [max]=\"max\"\r\n      [min]=\"min\"\r\n      [step]=\"step\"\r\n      [thumb-label]=\"thumbLabel\"\r\n      [tick-interval]=\"tickInterval\"\r\n      [(ngModel)]=\"value\"\r\n      [vertical]=\"vertical\">\r\n    </mat-slider>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component, ViewEncapsulation} from '@angular/core';\\n\r\n/**\r\n* @title Configurable slider\r\n*/\r\n@Component({\r\n  selector: 'slider-configurable-example',\r\n  templateUrl: 'slider-configurable-example.html',\r\n  styleUrls: ['slider-configurable-example.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class SliderConfigurableExample {\r\n  autoTicks = false;\r\n  disabled = false;\r\n  invert = false;\r\n  max = 100;\r\n  min = 0;\r\n  showTicks = false;\r\n  step = 1;\r\n  thumbLabel = false;\r\n  value = 0;\r\n  vertical = false;\\n\r\n  get tickInterval(): number | 'auto' {\r\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\r\n  }\r\n  set tickInterval(v) {\r\n    this._tickInterval = Number(v);\r\n  }\r\n  private _tickInterval = 1;\r\n}`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-h2 {\r\n  margin: 10px;\r\n}\r\n.example-section {\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  height: 60px;\r\n}\r\n.example-margin {\r\n  margin: 10px;\r\n}\r\n.mat-slider-horizontal {\r\n  width: 300px;\r\n}\r\n.mat-slider-vertical {\r\n  height: 300px;\r\n}`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst changeEvent = {\r\n\tbeforeCodeTitle: 'Change event binding',\r\n\thtmlCode: `\r\n<mat-slider (change)=\"changeSlider()\" [(ngModel)]=\"myValue\" min=\"0\" max=\"100\" step=\"1\"></mat-slider>\r\n<div class=\"m-separator m-separator--dashed\" *ngIf=\"myValue\"></div>\r\n<span *ngIf=\"myValue\">Selected: <mark>{{ myValue }}</mark>%</span>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'slider-change-event-example',\r\n  templateUrl: 'slider-change-event-example.html',\r\n  styleUrls: ['slider-change-event-example.css'],\r\n})\r\nexport class SliderChangeEventExample {\\n\r\n  myValue = 50;\r\n  changeSlider() {\r\n    console.log('myValue:', this.myValue);\r\n  }\r\n}`,\r\n\tcssCode: `\r\n.mat-slider {\r\n  width: 300px;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-slider',\r\n\ttemplateUrl: './slider.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.mat-slider {\r\n\t\twidth: 300px;\r\n\t}\r\n\t.example-margin {\r\n\t\t  margin: 15px;\r\n\t  }\r\n\t`],\r\n\tencapsulation: ViewEncapsulation.None,\r\n\tpreserveWhitespaces: false,\r\n})\r\nexport class SliderComponent implements OnInit {\r\n\r\n\texampleBasicSlider;\r\n\texampleConfigurableSlider;\r\n\texampleChangeEvent;\r\n\r\n\tautoTicks = false;\r\n\tdisabled = false;\r\n\tinvert = false;\r\n\tmax = 100;\r\n\tmin = 0;\r\n\tshowTicks = false;\r\n\tstep = 1;\r\n\tthumbLabel = false;\r\n\tvalue = 0;\r\n\tvertical = false;\r\n\r\n\tprivate _tickInterval = 1;\r\n\tmyValue = 50;\r\n\r\n\tget tickInterval(): number | 'auto' {\r\n\t\treturn this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\r\n\t}\r\n\tset tickInterval(v) {\r\n\t\tthis._tickInterval = Number(v);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicSlider = basicSlider;\r\n\t\tthis.exampleConfigurableSlider = configurableSlider;\r\n\t\tthis.exampleChangeEvent = changeEvent;\r\n\t}\r\n\r\n\tchangeSlider() {\r\n\t\tconsole.log('myValue', this.myValue);\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/slide-toggle/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicSlideToggles\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>mat-slide-toggle</code> is an\\r\\n\\t\\t\\t\\t\\t<mark>on/off</mark> control that can be toggled via clicking or dragging.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-slide-toggle>Slide me!</mat-slide-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleLabelPositions\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Input() labelPosition: 'before' | 'after'</code> Whether the label should appear after or before the slide-toggle. Defaults to 'after'\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>@Output() change: EventEmitter&lt;MatSlideToggleChange&gt;</code> An event will be dispatched each time the slide-toggle changes its value.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<mat-slide-toggle [labelPosition]=\\\"labelPosition\\\">Slide me!</mat-slide-toggle>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<mat-slide-toggle (change)=\\\"changeLablesPositions()\\\">Slide labels position</mat-slide-toggle>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleConfigurableSlideToggle\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"example-margin\\\">Color:</label>\\r\\n\\t\\t\\t\\t\\t\\t<mat-radio-group [(ngModel)]=\\\"color\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"primary\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tPrimary\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"accent\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tAccent\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-radio-button class=\\\"example-margin\\\" value=\\\"warn\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tWarn\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<h5 class=\\\"example-h2\\\">Result</h5>\\r\\n\\t\\t\\t\\t\\t<section class=\\\"example-section\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-slide-toggle class=\\\"example-margin\\\" [color]=\\\"color\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tSlide me!\\r\\n\\t\\t\\t\\t\\t\\t</mat-slide-toggle>\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicSlideToggles = {\r\n\t\tbeforeCodeTitle: 'Basic slide-toggles',\r\n\t\thtmlCode: `<mat-slide-toggle>Slide me!</mat-slide-toggle>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic slide-toggles\r\n*/\r\n@Component({\r\n  selector: 'slide-toggle-overview-example',\r\n  templateUrl: 'slide-toggle-overview-example.html',\r\n  styleUrls: ['slide-toggle-overview-example.css'],\r\n})\r\nexport class SlideToggleOverviewExample {}`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst configurableSlideToggle = {\r\n\tbeforeCodeTitle: 'Configurable slide-toggle',\r\n\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Slider configuration</h2>\r\n    <section class=\"example-section\">\r\n      <label class=\"example-margin\">Color:</label>\r\n      <mat-radio-group [(ngModel)]=\"color\">\r\n        <mat-radio-button class=\"example-margin\" value=\"primary\">\r\n          Primary\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"accent\">\r\n          Accent\r\n        </mat-radio-button>\r\n        <mat-radio-button class=\"example-margin\" value=\"warn\">\r\n          Warn\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"checked\">Checked</mat-checkbox>\r\n    </section>\r\n    <section class=\"example-section\">\r\n      <mat-checkbox class=\"example-margin\" [(ngModel)]=\"disabled\">Disabled</mat-checkbox>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card class=\"result\">\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Result</h2>\r\n    <section class=\"example-section\">\r\n      <mat-slide-toggle\r\n        class=\"example-margin\"\r\n        [color]=\"color\"\r\n        [checked]=\"checked\"\r\n        [disabled]=\"disabled\">\r\n        Slide me!\r\n      </mat-slide-toggle>\r\n    </section>\r\n  </mat-card-content>\r\n</mat-card>`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Configurable slide-toggle\r\n*/\r\n@Component({\r\n  selector: 'slide-toggle-configurable-example',\r\n  templateUrl: 'slide-toggle-configurable-example.html',\r\n  styleUrls: ['slide-toggle-configurable-example.css'],\r\n})\r\nexport class SlideToggleConfigurableExample {\r\n  color = 'accent';\r\n  checked = false;\r\n  disabled = false;\r\n}\r\n\t\t`,\r\n\tviewCode: ``,\r\n\tcssCode: `\r\n.example-h2 {\r\n  margin: 10px;\r\n}\r\n.example-section {\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  height: 60px;\r\n}\r\n.example-margin {\r\n  margin: 10px;\r\n}\r\n\t\t`,\r\n\tisCodeVisible: false\r\n};\r\n\r\nconst labelPositions = {\r\n\t\tbeforeCodeTitle: 'Label positions and \\'Change\\' event binding examples',\r\n\t\thtmlCode: `\r\n<mat-slide-toggle [labelPosition]=\"labelPosition\">Slide me!</mat-slide-toggle>\r\n<div class=\"m-separator m-separator--dashed\"></div>\r\n<mat-slide-toggle (change)=\"changeLablesPositions()\">Slide labels position</mat-slide-toggle>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n@Component({\r\n  selector: 'slide-toggle-label-positions-example',\r\n  templateUrl: 'slide-toggle-lable-positions-example.html',\r\n  styleUrls: ['slide-toggle-label-positions--example.css'],\r\n})\r\nexport class SlideToggleLabelPositionsExample {\\n\r\n  labelPosition: string = \"before\";\\n\r\n  changeLablesPositions() {\r\n    this.labelPosition = this.labelPosition == \"before\" ? \"after\" : \"before\";\r\n  }\r\n}`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n@Component({\r\n\tselector: 'm-slidertoggle',\r\n\ttemplateUrl: './slidertoggle.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-h2 {\r\n\t\tmargin: 10px;\r\n\t  }\r\n\t  .example-section {\r\n\t\tdisplay: flex;\r\n\t\talign-content: center;\r\n\t\talign-items: center;\r\n\t\theight: 60px;\r\n\t  }\r\n\t  .example-margin {\r\n\t\tmargin: 10px;\r\n\t  }\r\n\t`]\r\n})\r\nexport class SlidertoggleComponent implements OnInit {\r\n\r\n\texampleBasicSlideToggles;\r\n\texampleConfigurableSlideToggle;\r\n\texampleLabelPositions;\r\n\r\n\tcolor = 'accent';\r\n\tchecked = false;\r\n\tdisabled = false;\r\n\r\n\tlabelPosition: string = 'before';\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicSlideToggles = basicSlideToggles;\r\n\t\tthis.exampleConfigurableSlideToggle = configurableSlideToggle;\r\n\t\tthis.exampleLabelPositions = labelPositions;\r\n\t}\r\n\r\n\tchangeLablesPositions() {\r\n\t\tthis.labelPosition = this.labelPosition === 'before' ? 'after' : 'before';\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/card/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicCards\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-card&gt;</code> is a content container for text, photos, and actions in the context of a single subject.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-card>Simple card</mat-card>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleCardWithTitle\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tIn addition to the aforementioned sections,\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-card-header&gt;</code> gives the ability to add a rich header to a card.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div mat-card-avatar class=\\\"example-header-image\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-card-title>Shiba Inu</mat-card-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-card-subtitle>Dog Breed</mat-card-subtitle>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-header>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>Simple card</mat-card-content>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"examplBigExample\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-card class=\\\"example-card\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div mat-card-avatar class=\\\"example-header-image\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-card-title>Shiba Inu</mat-card-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-card-subtitle>Dog Breed</mat-card-subtitle>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-header>\\r\\n\\t\\t\\t\\t\\t\\t<img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tThe Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan. A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally bred for hunting.\\r\\n\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t\\t\\t\\t<mat-card-actions>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-button>LIKE</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-button>SHARE</button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-card-actions>\\r\\n\\t\\t\\t\\t\\t</mat-card>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicCards = {\r\n\t\tbeforeCodeTitle: 'Basic cards',\r\n\t\thtmlCode: `<mat-card>Simple card</mat-card>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n/**\r\n* @title Basic cards\r\n*/\r\n@Component({\r\n  selector: 'card-overview-example',\r\n  templateUrl: 'card-overview-example.html',\r\n  styleUrls: ['card-overview-example.css'],\r\n})\r\nexport class CardOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst cardWithTitle = {\r\n\tbeforeCodeTitle: 'Card header',\r\n\thtmlCode: `\r\n<mat-toolbar>\r\n  <mat-toolbar-row>\r\n    <span>First Row</span>\r\n  </mat-toolbar-row>\r\n  <mat-toolbar-row>\r\n    <span>Second Row</span>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Card with title\r\n*/\r\n@Component({\r\nselector: 'card-title-example',\r\ntemplateUrl: 'card-title-example.html',\r\nstyleUrls: ['card-title-example.css'],\r\n})\r\nexport class CardTitleExample {}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst bigExample = {\r\n\tbeforeCodeTitle: 'Example with image',\r\n\thtmlCode: `\r\n<mat-card class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n  </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Card with iamge\r\n*/\r\n@Component({\r\nselector: 'card-image-example',\r\ntemplateUrl: 'card-image-example.html',\r\nstyleUrls: ['card-image-example.css'],\r\n})\r\nexport class CardImageExample {}\r\n`,\r\n\t\tcssCode: `\r\n.example-card {\r\n  max-width: 400px;\r\n}\r\n.example-header-image {\r\n  background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n  background-size: cover;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n@Component({\r\n\tselector: 'm-card',\r\n\ttemplateUrl: './card.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-card {\r\n\t\tmax-width: 400px;\r\n\t  }\r\n\t.example-header-image {\r\n\t\tbackground-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n\t\tbackground-size: cover;\r\n\t  }\r\n\t`]\r\n})\r\nexport class CardComponent implements OnInit {\r\n\texampleBasicCards;\r\n\texampleCardWithTitle;\r\n\texamplBigExample;\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicCards = basicCards;\r\n\t\tthis.exampleCardWithTitle = cardWithTitle;\r\n\t\tthis.examplBigExample = bigExample;\r\n\t}\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tDefault Form Layout\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--first\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter email\\\" type=\\\"email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your email with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"State\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto\\\" [formControl]=\\\"stateCtrl\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let state of filteredStates | async\\\" [value]=\\\"state.name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img style=\\\"vertical-align:middle;\\\" aria-hidden src=\\\"{{state.flag}}\\\" height=\\\"25\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ state.name }}</span> |\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<small>Population: {{state.population}}</small>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\" class=\\\"example-right-align\\\" value=\\\"99.9\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span matPrefix>$&nbsp;</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" (click)=\\\"openSnackBar()\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tHorizontal Form Layout\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--first\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">Full Name:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">Email address:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"email\\\" placeholder=\\\"Enter email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">State:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"State\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto\\\" [formControl]=\\\"stateCtrl\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let state of filteredStates | async\\\" [value]=\\\"state.name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img style=\\\"vertical-align:middle;\\\" aria-hidden src=\\\"{{state.flag}}\\\" height=\\\"25\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>{{ state.name }}</span> |\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<small>Population: {{state.population}}</small>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-autocomplete>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">Progress:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slider></mat-slider>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">Contact</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon matPrefix>local_phone</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"tel\\\" matInput placeholder=\\\"Phone number\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-3 col-form-label\\\">Communication:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-inline\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-3\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"accent\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tForm Sections\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form m-form--fit\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--first\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__heading\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-form__heading-title\\\">1. Customer Info:</h3>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter email\\\" type=\\\"email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your email with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Favorite food\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ food.viewValue }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label>Contact:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-input-icon m-input-icon--left\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon matPrefix>local_phone</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"tel\\\" matInput placeholder=\\\"Phone number\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your phone number with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"\\\">Communication:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__seperator m-form__seperator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--last\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__heading\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-form__heading-title\\\">2. Payment Info:</h3>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"\\\">Payment Method:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-radio-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"1\\\">Credit Card</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"2\\\">Bitcoin</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"3\\\">Cash</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please select payment method:</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group m-form__group--last\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter amount</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__no-border m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions--solid\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"accent\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tHorizontal Form Sections\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form m-form--label-align-right\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--first\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__heading\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-form__heading-title\\\">Customer Info:</h3>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Full Name:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Email address:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter email\\\" type=\\\"email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your email with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Date of birth:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker #picker></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Communication:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__seperator m-form__seperator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__section m-form__section--last\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__heading\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-form__heading-title\\\">Payment Info:</h3>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"m-form__group form-group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Payment Method:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-radio-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"1\\\">Credit Card</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"2\\\">Bitcoin</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-radio-button value=\\\"3\\\">Cash</mat-radio-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-radio-group>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"m-form__help\\\">Please select payment method</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Amount:</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter amount</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slide-toggle [(ngModel)]=\\\"isHuman\\\" (change)=\\\"onChange($event)\\\" name=\\\"human1\\\"\\t>I am not a robot</mat-slide-toggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" disabled=\\\"{{!isHuman}}\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tBorder Seperator Form Groups\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form m-form--fit m-form--label-align-right m-form--group-seperator\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Full Name:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Email address:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter email\\\" type=\\\"email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your email with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Date of birth:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"dp3\\\" placeholder=\\\"Input disabled\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Favorite foods:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6 example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"dexample-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-chip-list #chipList>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-chip *ngFor=\\\"let fruit of fruits\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\" (remove)=\\\"remove(fruit)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{fruit.name}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-chip>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input placeholder=\\\"New food...\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\" [matChipInputAddOnBlur]=\\\"addOnBlur\\\" (matChipInputTokenEnd)=\\\"add($event)\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-chip-list>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__group m-form__group--last form-group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Communication:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__no-border m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions--solid\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-slide-toggle [(ngModel)]=\\\"isHuman2\\\" (change)=\\\"onChange2($event)\\\" name=\\\"human2\\\">I am not a robot</mat-slide-toggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"accent\\\" disabled=\\\"{{!isHuman2}}\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t\\t<div class=\\\"m-portlet\\\">\\r\\n\\t\\t\\t<div class=\\\"m-portlet__head\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__head-caption\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-portlet__head-title\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"m-portlet__head-icon m--hide\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"la la-gear\\\"></i>\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t<h3 class=\\\"m-portlet__head-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tDashed Seperator Form Groups\\r\\n\\t\\t\\t\\t\\t\\t</h3>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!--begin::Form-->\\r\\n\\t\\t\\t<form class=\\\"m-form m-form--fit m-form--label-align-right m-form--group-seperator-dashed\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__body\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Full Name:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter full name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">Please enter your full name</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Email address:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Enter email\\\" type=\\\"email\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-hint align=\\\"start\\\">We'll never share your email with anyone else</mat-hint>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group m-form__group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Favorite food:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field class=\\\"example-full-width\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-select placeholder=\\\"Favorite food\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{ food.viewValue }}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__group m-form__group--last form-group row\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label class=\\\"col-lg-2 col-form-label\\\">Communication:</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"m-checkbox-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Email</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>SMS</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<p>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-checkbox>Phone</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-portlet__foot m-portlet__no-border m-portlet__foot--fit\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-form__actions m-form__actions--solid\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-2\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\">Submit</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-raised-button type=\\\"reset\\\">Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</form>\\r\\n\\t\\t\\t<!--end::Form-->\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith, filter, catchError, mergeMap } from 'rxjs/operators';\r\nimport { MatChipInputEvent } from '@angular/material';\r\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { PizzaPartyComponent } from '../../popups-and-modals/snackbar/pizza-party.component';\r\n\r\n\r\nexport class State {\r\n\tconstructor(public name: string, public population: string, public flag: string) { }\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-default-forms',\r\n\ttemplateUrl: './default-forms.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-container {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.example-full-width {\r\n\t\twidth: 100%;\r\n\t  }\r\n\r\n\t .m-checkbox-inline > mat-checkbox {\r\n\t\t padding-right: 20px;\r\n\t }\r\n\t`]\r\n})\r\nexport class DefaultFormsComponent implements OnInit {\r\n\tstateCtrl: FormControl;\r\n\tfilteredStates: Observable<any[]>;\r\n\tstates: State[] = [\r\n\t\t{\r\n\t\t\tname: 'Arkansas',\r\n\t\t\tpopulation: '2.978M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'California',\r\n\t\t\tpopulation: '39.14M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Florida',\r\n\t\t\tpopulation: '20.27M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Texas',\r\n\t\t\tpopulation: '27.47M',\r\n\t\t\t// https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\r\n\t\t\tflag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\r\n\t\t}\r\n\t];\r\n\tfoods = [\r\n\t\t{ value: 'steak-0', viewValue: 'Steak' },\r\n\t\t{ value: 'pizza-1', viewValue: 'Pizza' },\r\n\t\t{ value: 'tacos-2', viewValue: 'Tacos' }\r\n\t];\r\n\tisHuman: boolean = true;\r\n\tisHuman2: boolean = true;\r\n\tvisible: boolean = true;\r\n\tselectable: boolean = true;\r\n\tremovable: boolean = true;\r\n\taddOnBlur: boolean = true;\r\n\r\n\t// Enter, comma\r\n\tseparatorKeysCodes = [ENTER, COMMA];\r\n\r\n\tfruits = [\r\n\t\t{ name: 'Pizza' },\r\n\t\t{ name: 'Steak' },\r\n\t\t{ name: 'Tacos' },\r\n\t];\r\n\r\n\r\n\tconstructor(public snackBar: MatSnackBar) {\r\n\t\tthis.stateCtrl = new FormControl();\r\n\t\tthis.filteredStates = this.stateCtrl.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(''),\r\n\t\t\t\tmap(state => state ? this.filterStates(state) : this.states.slice())\r\n\t\t\t);\r\n\t}\r\n\r\n\tngOnInit() { }\r\n\r\n\tonChange(value) {\r\n\t\tthis.isHuman = value.checked === true;\r\n\t}\r\n\tonChange2(value) {\r\n\t\tthis.isHuman2 = value.checked === true;\r\n    }\r\n\tfilterStates(name: string) {\r\n\t\treturn this.states.filter(state =>\r\n\t\t\tstate.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\r\n\t}\r\n\tadd(event: MatChipInputEvent): void {\r\n\t\tconst input = event.input;\r\n\t\tconst value = event.value;\r\n\r\n\t\t// Add our fruit\r\n\t\tif ((value || '').trim()) {\r\n\t\t  this.fruits.push({ name: value.trim() });\r\n\t\t}\r\n\r\n\t\t// Reset the input value\r\n\t\tif (input) {\r\n\t\t  input.value = '';\r\n\t\t}\r\n\t  }\r\n\tremove(fruit: any): void {\r\n\t\tconst index = this.fruits.indexOf(fruit);\r\n\t\tif (index >= 0) {\r\n\t\t\tthis.fruits.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\topenSnackBar() {\r\n\t\tthis.snackBar.openFromComponent(PizzaPartyComponent, {\r\n\t\t\tduration: 500,\r\n\t\t});\r\n\t}\r\n}\r\n\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/divider\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicDivider\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-divider&gt;</code> is a component that allows for Material styling of a line separator with various orientation options.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-list>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Alabama</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Alaska</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Arizona</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Arizona</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>California</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Colorado</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Connecticut</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Delaware</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Florida</mat-list-item>\\r\\n\\t\\t\\t\\t\\t</mat-list>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleVertical\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAdd the\\r\\n\\t\\t\\t\\t\\t<mark>vertical</mark> attribute in order to set whether or not the divider is vertically-oriented.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-list>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Item 1</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider [vertical]=\\\"true\\\"></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Item 2</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider [vertical]=\\\"true\\\"></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item>Item 3</mat-list-item>\\r\\n\\t\\t\\t\\t\\t</mat-list>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleList\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tDividers can be added to lists as a means of separating content into distinct sections. Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-list>\\r\\n\\t\\t\\t\\t\\t\\t<h3 mat-subheader>Folders</h3>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon mat-list-icon>folder</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h4 mat-line>{{folder.name}}</h4>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p mat-line> {{folder.updated | date}} </p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<h3 mat-subheader>Notes</h3>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item *ngFor=\\\"let note of notes\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon mat-list-icon>note</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h4 mat-line>{{note.name}}</h4>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p mat-line> {{note.updated | date}} </p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-list-item>\\r\\n\\t\\t\\t\\t\\t</mat-list>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicDivider = {\r\n\t\tbeforeCodeTitle: 'Basic divider',\r\n\t\thtmlCode: `\r\n\t\t<mat-list>\r\n\t\t<mat-list-item>Item 1</mat-list-item>\r\n\t\t<mat-divider></mat-divider>\r\n\t\t<mat-list-item>Item 2</mat-list-item>\r\n\t\t<mat-divider></mat-divider>\r\n\t\t<mat-list-item>Item 3</mat-list-item>\r\n\t  </mat-list>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic divider\r\n*/\r\n@Component({\r\n  selector: 'divider-overview-example',\r\n  templateUrl: 'divider-overview-example.html',\r\n  styleUrls: ['divider-overview-example.css'],\r\n})\r\nexport class DividerOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst verticalDivider = {\r\n\t\tbeforeCodeTitle: 'Vertical divider',\r\n\t\thtmlCode: `\r\n<mat-divider [vertical]=\"true\"></mat-divider>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title vertical divider\r\n*/\r\n@Component({\r\n  selector: 'divider-vertical-example',\r\n  templateUrl: 'divider-vertical-example.html',\r\n  styleUrls: ['divider-vertical-example.css'],\r\n})\r\nexport class DividerVerticalExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst listExample = {\r\n\t\tbeforeCodeTitle: 'Lists with inset dividers',\r\n\t\thtmlCode: `\r\n<mat-list>\r\n  <h3 mat-subheader>Folders</h3>\r\n  <mat-list-item *ngFor=\"let folder of folders; last as last\">\r\n    <mat-icon mat-list-icon>folder</mat-icon>\r\n    <h4 mat-line>{{folder.name}}</h4>\r\n    <p mat-line class=\"demo-2\"> {{folder.updated}} </p>\r\n    <mat-divider [inset]=\"true\" *ngIf=\"!last\"></mat-divider>\r\n  </mat-list-item>\r\n  <mat-divider></mat-divider>\r\n  <h3 md-subheader>Notes</h3>\r\n  <mat-list-item *ngFor=\"let note of notes\">\r\n    <mat-icon md-list-icon>note</mat-icon>\r\n    <h4 md-line>{{note.name}}</h4>\r\n    <p md-line class=\"demo-2\"> {{note.updated}} </p>\r\n  </mat-list-item>\r\n</mat-list>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title list divider\r\n*/\r\n@Component({\r\n  selector: 'divider-list-example',\r\n  templateUrl: 'divider-list-example.html',\r\n  styleUrls: ['divider-list-example.css'],\r\n})\r\nexport class DividerListExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-divider',\r\n\ttemplateUrl: './divider.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.mat-list-icon {\r\n\t\tcolor: rgba(0, 0, 0, 0.54);\r\n\t  }\r\n\t  .mat-toolbar > * + .mat-divider-vertical {\r\n\t\tmargin-right: 16px;\r\n\t}\r\n\t.mat-toolbar > .mat-divider-vertical + * {\r\n\t\tmargin-right: 24px;\r\n\t\tmargin-left: -1px;\r\n\t}\r\n\t`]\r\n})\r\nexport class DividerComponent implements OnInit {\r\n\r\n\tfolders = [\r\n\t\t{\r\n\t\t\tname: 'Photos',\r\n\t\t\tupdated: new Date('1/1/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Recipes',\r\n\t\t\tupdated: new Date('1/17/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Work',\r\n\t\t\tupdated: new Date('1/28/16'),\r\n\t\t}\r\n\t];\r\n\tnotes = [\r\n\t\t{\r\n\t\t\tname: 'Vacation Itinerary',\r\n\t\t\tupdated: new Date('2/20/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Kitchen Remodel',\r\n\t\t\tupdated: new Date('1/18/16'),\r\n\t\t}\r\n\t];\r\n\r\n\texampleBasicDivider;\r\n\texampleVertical;\r\n\texampleList;\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicDivider = basicDivider;\r\n\t\tthis.exampleVertical = verticalDivider;\r\n\t\tthis.exampleList = listExample;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/expansion/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicPanel\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-expansion-panel&gt;</code> provides an expandable details-summary view.is a component that allows for Material styling of a line separator with various orientation options.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-accordion>\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tPersonal data\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tType your name and age\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"First name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Age\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSelf aware panel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tCurrently I am {{panelOpenState ? 'open' : 'closed'}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p>I'm visible because I am open</p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\t\\t\\t\\t\\t</mat-accordion>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDisabledPanel\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tExpansion panels can be\\r\\n\\t\\t\\t\\t\\t<mark>disabled</mark> using the disabled attribute. A disabled expansion panel can't be toggled by the user, but can still be manipulated programmatically.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-expansion-panel [disabled]=\\\"isDisabled\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\tThis is the expansion title\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\tThis is a summary of the content\\r\\n\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAccordion\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-accordion class=\\\"example-headers-align\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel [expanded]=\\\"step === 0\\\" (opened)=\\\"setStep(0)\\\" hideToggle=\\\"true\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tPersonal data\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tType your name and age\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>account_circle</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"First name\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput type=\\\"number\\\" min=\\\"1\\\" placeholder=\\\"Age\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"primary\\\" (click)=\\\"nextStep()\\\">Next</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\" hideToggle=\\\"true\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tDestination\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tType the country name\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>map</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Country\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"warn\\\" (click)=\\\"prevStep()\\\">Previous</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"primary\\\" (click)=\\\"nextStep()\\\">Next</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-expansion-panel [expanded]=\\\"step === 2\\\" (opened)=\\\"setStep(2)\\\" hideToggle=\\\"true\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-expansion-panel-header>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tDay of the trip\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-title>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tInform the date you wish to travel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>date_range</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-panel-description>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-expansion-panel-header>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Date\\\" [matDatepicker]=\\\"picker\\\" (focus)=\\\"picker.open()\\\" readonly>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-datepicker #picker></mat-datepicker>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"warn\\\" (click)=\\\"prevStep()\\\">Previous</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button color=\\\"primary\\\" (click)=\\\"nextStep()\\\">End</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-action-row>\\r\\n\\t\\t\\t\\t\\t\\t</mat-expansion-panel>\\r\\n\\r\\n\\t\\t\\t\\t\\t</mat-accordion>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicPanel = {\r\n\t\tbeforeCodeTitle: 'Basic expansion panel',\r\n\t\thtmlCode: `\r\n<mat-accordion>\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Personal data\r\n      </mat-panel-title>\r\n\t  <mat-panel-description>\r\n        Type your name and age\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"First name\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Age\">\r\n    </mat-form-field>\r\n  </mat-expansion-panel>\r\n  <mat-expansion-panel (opened)=\"panelOpenState = true\"\r\n    (closed)=\"panelOpenState = false\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Self aware panel\r\n      </mat-panel-title>\r\n      <mat-panel-description>\r\n        Currently I am {{panelOpenState ? 'open' : 'closed'}}\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <p>I'm visible because I am open</p>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic expansion panel\r\n*/\r\n@Component({\r\n  selector: 'expansion-overview-example',\r\n  templateUrl: 'expansion-overview-example.html',\r\n  styleUrls: ['expansion-overview-example.css'],\r\n})\r\nexport class ExpansionOverviewExample {\r\n  panelOpenState: boolean = false;\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst disabledPanel = {\r\n\t\tbeforeCodeTitle: 'Disabling a panel',\r\n\t\thtmlCode: `\r\n<mat-expansion-panel [disabled]=\"isDisabled\">\r\n  <mat-expansion-panel-header>\r\n\tThis is the expansion title\r\n  </mat-expansion-panel-header>\r\n  <mat-panel-description>\r\n    This is a summary of the content\r\n  </mat-panel-description>\r\n</mat-expansion-panel>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Disabled expansion panel\r\n*/\r\n@Component({\r\n  selector: 'expansion-disabled-example',\r\n  templateUrl: 'expansion-disabled-example.html',\r\n  styleUrls: ['expansion-disabled-example.css'],\r\n})\r\nexport class ExpansionDisabledExample {\r\n  isDisabled: boolean = true;\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst accordion = {\r\n\t\tbeforeCodeTitle: 'Expansion panel as accordion',\r\n\t\thtmlCode: `\r\n<mat-accordion class=\"example-headers-align\">\r\n  <mat-expansion-panel [expanded]=\"step === 0\" (opened)=\"setStep(0)\" hideToggle=\"true\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Personal data\r\n      </mat-panel-title>\r\n\t  <mat-panel-description>\r\n\t\tType your name and age\r\n        <mat-icon>account_circle</mat-icon>\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"First name\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput type=\"number\" min=\"1\" placeholder=\"Age\">\r\n    </mat-form-field>\r\n    <mat-action-row>\r\n      <button mat-button color=\"primary\" (click)=\"nextStep()\">Next</button>\r\n    </mat-action-row>\r\n  </mat-expansion-panel>\r\n  <mat-expansion-panel [expanded]=\"step === 1\" (opened)=\"setStep(1)\" hideToggle=\"true\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Destination\r\n      </mat-panel-title>\r\n      <mat-panel-description>\r\n        Type the country name\r\n        <mat-icon>map</mat-icon>\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Country\">\r\n    </mat-form-field>\r\n    <mat-action-row>\r\n      <button mat-button color=\"warn\" (click)=\"prevStep()\">Previous</button>\r\n      <button mat-button color=\"primary\" (click)=\"nextStep()\">Next</button>\r\n    </mat-action-row>\r\n   </mat-expansion-panel>\r\n  <mat-expansion-panel [expanded]=\"step === 2\" (opened)=\"setStep(2)\" hideToggle=\"true\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Day of the trip\r\n\t  </mat-panel-title>\r\n      <mat-panel-description>\r\n        Inform the date you wish to travel\r\n        <mat-icon>date_range</mat-icon>\r\n      </mat-panel-description>\r\n     </mat-expansion-panel-header>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Date\" [matDatepicker]=\"picker\" (focus)=\"picker.open()\" readonly>\r\n    </mat-form-field>\r\n    <mat-datepicker #picker></mat-datepicker>\r\n    <mat-action-row>\r\n      <button mat-button color=\"warn\" (click)=\"prevStep()\">Previous</button>\r\n      <button mat-button color=\"primary\" (click)=\"nextStep()\">End</button>\r\n    </mat-action-row>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Expansion panel as accordion\r\n*/\r\n@Component({\r\n  selector: 'expansion-steps-example',\r\n  templateUrl: 'expansion-steps-example.html',\r\n  styleUrls: ['expansion-steps-example.css']\r\n})\r\nexport class ExpansionStepsExample {\r\n  step = 0;\\n\r\n  setStep(index: number) {\r\n    this.step = index;\r\n  }\\n\r\n  nextStep() {\r\n    this.step++;\r\n   }\\n\r\n  prevStep() {\r\n    this.step--;\r\n  }\r\n}\r\n`,\r\n\t\tcssCode: `\r\n.example-headers-align .mat-expansion-panel-header-title,\r\n.example-headers-align .mat-expansion-panel-header-description {\r\n  flex-basis: 0;\r\n}\\n\r\n.example-headers-align .mat-expansion-panel-header-description {\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-expansion-panel',\r\n\ttemplateUrl: './expansion-panel.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n.example-headers-align .mat-expansion-panel-header-title,\r\n.example-headers-align .mat-expansion-panel-header-description {\r\n  flex-basis: 0;\r\n}\r\n.example-headers-align .mat-expansion-panel-header-description {\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\t`]\r\n})\r\nexport class ExpansionPanelComponent implements OnInit {\r\n\r\n\texampleBasicPanel;\r\n\texampleDisabledPanel;\r\n\texampleAccordion;\r\n\tpanelOpenState: boolean = false;\r\n\tisDisabled: boolean = true;\r\n\tstep = 0;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicPanel = basicPanel;\r\n\t\tthis.exampleDisabledPanel = disabledPanel;\r\n\t\tthis.exampleAccordion = accordion;\r\n\t}\r\n\r\n\tsetStep(index: number) {\r\n\t\tthis.step = index;\r\n\t}\r\n\r\n\tnextStep() {\r\n\t\tthis.step++;\r\n\t}\r\n\r\n\tprevStep() {\r\n\t\tthis.step--;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/grid-list\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n<m-material-preview [viewItem]=\\\"exampleBasicGrid\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t<code>&lt;mat-grid-list&gt;</code> is a two-dimensional list view that arranges cells into grid-based layout. See Material Design spec here.\\r\\n\\t\\t</span>\\r\\n\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<mat-grid-list cols=\\\"2\\\" rowHeight=\\\"2:1\\\">\\r\\n\\t\\t\\t\\t<mat-grid-tile>1</mat-grid-tile>\\r\\n\\t\\t\\t\\t<mat-grid-tile>2</mat-grid-tile>\\r\\n\\t\\t\\t\\t<mat-grid-tile>3</mat-grid-tile>\\r\\n\\t\\t\\t\\t<mat-grid-tile>4</mat-grid-tile>\\r\\n\\t\\t\\t</mat-grid-list>\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleDynamicGrid\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<mat-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\r\\n\\t\\t\\t\\t<mat-grid-tile *ngFor=\\\"let tile of tiles\\\" [colspan]=\\\"tile.cols\\\" [rowspan]=\\\"tile.rows\\\" [style.background]=\\\"tile.color\\\">\\r\\n\\t\\t\\t\\t\\t{{tile.text}}\\r\\n\\t\\t\\t\\t</mat-grid-tile>\\r\\n\\t\\t\\t</mat-grid-list>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst dynamicGrid = {\r\n\tbeforeCodeTitle: 'Dynamic grid-list',\r\n\thtmlCode: `\r\n<mat-grid-list cols=\"4\" rowHeight=\"100px\">\r\n<mat-grid-tile\r\n*ngFor=\"let tile of tiles\"\r\n[colspan]=\"tile.cols\"\r\n[rowspan]=\"tile.rows\"\r\n[style.background]=\"tile.color\">\r\n{{tile.text}}\r\n</mat-grid-tile>\r\n</mat-grid-list>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Dynamic grid-list\r\n*/\r\n@Component({\r\nselector: 'grid-list-dynamic-example',\r\ntemplateUrl: 'grid-list-dynamic-example.html',\r\nstyleUrls: ['grid-list-dynamic-example.css'],\r\n})\r\nexport class GridListDynamicExample {\r\ntiles = [\r\n{text: 'One', cols: 3, rows: 1, color: 'lightblue'},\r\n{text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\r\n{text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\r\n{text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\r\n];\r\n}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n\r\nconst basicGrid = {\r\n\tbeforeCodeTitle: 'Basic grid-list',\r\n\thtmlCode: `\r\n<mat-grid-list cols=\"2\" rowHeight=\"2:1\">\r\n<mat-grid-tile>1</mat-grid-tile>\r\n<mat-grid-tile>2</mat-grid-tile>\r\n<mat-grid-tile>3</mat-grid-tile>\r\n<mat-grid-tile>4</mat-grid-tile>\r\n</mat-grid-list>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic grid-list\r\n*/\r\n@Component({\r\nselector: 'grid-list-overview-example',\r\nstyleUrls: ['grid-list-overview-example.css'],\r\ntemplateUrl: 'grid-list-overview-example.html',\r\n})\r\nexport class GridListOverviewExample {}\r\n`,\r\n\tcssCode: `\r\nmat-grid-tile {\r\nbackground: lightblue;\r\n}\r\n\t`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-grid-list',\r\n\ttemplateUrl: './grid-list.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\tmat-grid-tile {\r\n\t\tbackground: lightblue;\r\n\t  }\r\n\t`]\r\n})\r\nexport class GridListComponent implements OnInit {\r\n\r\n\ttiles = [\r\n\t\t{ text: 'One', cols: 3, rows: 1, color: 'lightblue' },\r\n\t\t{ text: 'Two', cols: 1, rows: 2, color: 'lightgreen' },\r\n\t\t{ text: 'Three', cols: 1, rows: 1, color: 'lightpink' },\r\n\t\t{ text: 'Four', cols: 2, rows: 1, color: '#DDBDF1' },\r\n\t];\r\n\r\n\texampleBasicGrid;\r\n\texampleDynamicGrid;\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicGrid = basicGrid;\r\n\t\tthis.exampleDynamicGrid = dynamicGrid;\r\n\t}\r\n\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/list/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicList\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-list&gt;</code> is a container component that wraps and formats a series of line items. As the base list component, it provides Material Design styling, but no behavior of its own.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-list role=\\\"list\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item role=\\\"listitem\\\">Item 1</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item role=\\\"listitem\\\">Item 2</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item role=\\\"listitem\\\">Item 3</mat-list-item>\\r\\n\\t\\t\\t\\t\\t</mat-list>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleListWithSelection\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tA selection list provides an interface for selecting values, where each list item is an option.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-selection-list #shoes>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-option *ngFor=\\\"let shoe of typesOfShoes\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t{{shoe}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-list-option>\\r\\n\\t\\t\\t\\t\\t</mat-selection-list>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\tOptions selected: <mark>{{shoes.selectedOptions.selected.length}}</mark>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleListWithSection\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-list>\\r\\n\\t\\t\\t\\t\\t\\t<h3 mat-subheader>Folders</h3>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item *ngFor=\\\"let folder of folders\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon mat-list-icon>folder</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h4 mat-line>{{folder.name}}</h4>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p mat-line> {{folder.updated | date}} </p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-list-item>\\r\\n\\t\\t\\t\\t\\t\\t<mat-divider></mat-divider>\\r\\n\\t\\t\\t\\t\\t\\t<h3 mat-subheader>Notes</h3>\\r\\n\\t\\t\\t\\t\\t\\t<mat-list-item *ngFor=\\\"let note of notes\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon mat-list-icon>note</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<h4 mat-line>{{note.name}}</h4>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p mat-line> {{note.updated | date}} </p>\\r\\n\\t\\t\\t\\t\\t\\t</mat-list-item>\\r\\n\\t\\t\\t\\t\\t</mat-list>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicList = {\r\n\t\tbeforeCodeTitle: 'Basic list',\r\n\t\thtmlCode: `\r\n<mat-list role=\"list\">\r\n  <mat-list-item role=\"listitem\">Item 1</mat-list-item>\r\n  <mat-list-item role=\"listitem\">Item 2</mat-list-item>\r\n  <mat-list-item role=\"listitem\">Item 3</mat-list-item>\r\n</mat-list>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic list\r\n*/\r\n@Component({\r\n  selector: 'list-overview-example',\r\n  templateUrl: 'list-overview-example.html',\r\n  styleUrls: ['list-overview-example.css'],\r\n})\r\nexport class ListOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\nconst listWithSelection = {\r\n\t\tbeforeCodeTitle: 'List with selection',\r\n\t\thtmlCode: `\r\n<mat-selection-list #shoes>\r\n  <mat-list-option *ngFor=\"let shoe of typesOfShoes\">\r\n    {{shoe}}\r\n  </mat-list-option>\r\n</mat-selection-list>\r\n<p>\r\n  Options selected: {{shoes.selectedOptions.selected.length}}\r\n</p>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n\r\n/**\r\n* @title List with selection\r\n*/\r\n@Component({\r\n  selector: 'list-selection-example',\r\n  styleUrls: ['list-selection-example.css'],\r\n  templateUrl: 'list-selection-example.html',\r\n})\r\nexport class ListSelectionExample {\r\n  typesOfShoes = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst listWithSection = {\r\n\t\tbeforeCodeTitle: 'List with sections',\r\n\t\thtmlCode: `\r\n<mat-list>\r\n  <h3 mat-subheader>Folders</h3>\r\n  <mat-list-item *ngFor=\"let folder of folders\">\r\n    <mat-icon mat-list-icon>folder</mat-icon>\r\n\t<h4 mat-line>{{folder.name}}</h4>\r\n    <p mat-line> {{folder.updated | date}} </p>\r\n  </mat-list-item>\r\n  <mat-divider></mat-divider>\r\n  <h3 mat-subheader>Notes</h3>\r\n  <mat-list-item *ngFor=\"let note of notes\">\r\n    <mat-icon mat-list-icon>note</mat-icon>\r\n    <h4 mat-line>{{note.name}}</h4>\r\n    <p mat-line> {{note.updated | date}} </p>\r\n  </mat-list-item>\r\n</mat-list>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title List with sections\r\n*/\r\n@Component({\r\n  selector: 'list-sections-example',\r\n  styleUrls: ['list-sections-example.css'],\r\ntemplateUrl: 'list-sections-example.html',\r\n})\r\nexport class ListSectionsExample {\r\n  folders = [\r\n  {\r\n    name: 'Photos',\r\n    updated: new Date('1/1/16'),\r\n  },\r\n  {\r\n    name: 'Recipes',\r\n    updated: new Date('1/17/16'),\r\n  },\r\n  {\r\n    name: 'Work',\r\n    updated: new Date('1/28/16'),\r\n  }\r\n  ];\r\n  notes = [\r\n  {\r\n    name: 'Vacation Itinerary',\r\n    updated: new Date('2/20/16'),\r\n  },\r\n  {\r\n    name: 'Kitchen Remodel',\r\n    updated: new Date('1/18/16'),\r\n  }\r\n  ];\r\n}\r\n`,\r\n\t\tcssCode: `\r\n.mat-list-icon {\r\n  color: rgba(0, 0, 0, 0.54);\r\n}\r\n`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-list',\r\n\ttemplateUrl: './list.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.mat-list-icon {\r\n\t\tcolor: rgba(0, 0, 0, 0.54);\r\n\t  }\r\n\t`]\r\n})\r\nexport class ListComponent implements OnInit {\r\n\texampleBasicList;\r\n\texampleListWithSelection;\r\n\texampleListWithSection;\r\n\tfolders = [\r\n\t\t{\r\n\t\t\tname: 'Photos',\r\n\t\t\tupdated: new Date('1/1/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Recipes',\r\n\t\t\tupdated: new Date('1/17/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Work',\r\n\t\t\tupdated: new Date('1/28/16'),\r\n\t\t}\r\n\t];\r\n\tnotes = [\r\n\t\t{\r\n\t\t\tname: 'Vacation Itinerary',\r\n\t\t\tupdated: new Date('2/20/16'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Kitchen Remodel',\r\n\t\t\tupdated: new Date('1/18/16'),\r\n\t\t}\r\n\t];\r\n\ttypesOfShoes = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicList = basicList;\r\n\t\tthis.exampleListWithSelection = listWithSelection;\r\n\t\tthis.exampleListWithSection = listWithSection;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/tabs/examples\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleBasicTabs\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\tAngular Material\\r\\n\\t\\t\\t<mark>tabs</mark> organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels.\\r\\n\\t\\t</span>\\r\\n\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<mat-tab-group>\\r\\n\\t\\t\\t\\t<mat-tab label=\\\"Tab 1\\\">Content 1</mat-tab>\\r\\n\\t\\t\\t\\t<mat-tab label=\\\"Tab 2\\\">Content 2</mat-tab>\\r\\n\\t\\t\\t</mat-tab-group>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\\r\\n\\r\\n\\r\\n<m-material-preview [viewItem]=\\\"exampleComplex\\\">\\r\\n\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t<h5 class=\\\"example-h2\\\">Tabs with text labels</h5>\\r\\n\\t\\t\\t\\t\\t<mat-tab-group class=\\\"demo-tab-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div \\tclass=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 3\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 4\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<br />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<br /> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 5\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t</mat-tab-group>\\r\\n\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t</mat-card>\\r\\n\\r\\n\\t\\t\\t<mat-card>\\r\\n\\t\\t\\t\\t<mat-card-content>\\r\\n\\t\\t\\t\\t\\t<h5 class=\\\"example-h2\\\">Tabs with icon labels</h5>\\r\\n\\t\\t\\t\\t\\t<mat-tab-group class=\\\"demo-tab-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>security</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 2\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>attach_file</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 3\\\" disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>block</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 4\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>loop</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"demo-tab-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<br />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<br /> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue. Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus. In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec, feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor, orci enim rutrum enim, vel tempor sapien arcu a tellus.\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 5\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>build</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tab label=\\\"Tab 6\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template mat-tab-label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>thumb_down</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\tNo content\\r\\n\\t\\t\\t\\t\\t\\t</mat-tab>\\r\\n\\t\\t\\t\\t\\t</mat-tab-group>\\r\\n\\t\\t\\t\\t</mat-card-content>\\r\\n\\t\\t\\t</mat-card>\\r\\n\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</m-material-preview>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicTabs = {\r\n\t\tbeforeCodeTitle: 'Basic tabs',\r\n\t\thtmlCode: `\r\n<mat-tab-group>\r\n  <mat-tab label=\"Tab 1\">Content 1</mat-tab>\r\n  <mat-tab label=\"Tab 2\">Content 2</mat-tab>\r\n</mat-tab-group>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n\r\n/**\r\n* @title Basic tabs\r\n*/\r\n@Component({\r\n  selector: 'tabs-overview-example',\r\n  templateUrl: 'tabs-overview-example.html',\r\n  styleUrls: ['tabs-overview-example.css'],\r\n})\r\nexport class TabsOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst complex = {\r\n\t\tbeforeCodeTitle: 'Complex Example',\r\n\t\thtmlCode: `\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Tabs with text labels</h2>\r\n    <mat-tab-group class=\"demo-tab-group\">\r\n      <mat-tab label=\"Tab 1\">\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 2\">\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 3\" disabled>\r\n        No content\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 4\">\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n          <br />\r\n          <br />\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 5\">\r\n        No content\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 6\">\r\n        No content\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card>\r\n  <mat-card-content>\r\n    <h2 class=\"example-h2\">Tabs with icon labels</h2>\r\n    <mat-tab-group class=\"demo-tab-group\">\r\n      <mat-tab label=\"Tab 1\">\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>security</mat-icon>\r\n        </ng-template>\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n\t\t  In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 2\">\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>attach_file</mat-icon>\r\n        </ng-template>\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 3\" disabled>\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>block</mat-icon>\r\n        </ng-template>\r\n        No content\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 4\">\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>loop</mat-icon>\r\n        </ng-template>\r\n        <div class=\"demo-tab-content\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n          <br />\r\n          <br />\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis ante augue.\r\n          Phasellus volutpat neque ac dui mattis vulputate. Etiam consequat aliquam cursus.\r\n          In sodales pretium ultrices. Maecenas lectus est, sollicitudin consectetur felis nec,\r\n          feugiat ultricies mi. Aliquam erat volutpat. Nam placerat, tortor in ultrices porttitor,\r\n          orci enim rutrum enim, vel tempor sapien arcu a tellus.\r\n\t\t</div>\r\n      </mat-tab>\r\n      <mat-tab label=\"Tab 5\">\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>build</mat-icon>\r\n        </ng-template>\r\n        No content\r\n      </mat-tab>\r\n\t  <mat-tab label=\"Tab 6\">\r\n        <ng-template mat-tab-label>\r\n          <mat-icon>thumb_down</mat-icon>\r\n        </ng-template>\r\n        No content\r\n\t  </mat-tab>\r\n\t</mat-tab-group>\r\n  </mat-card-content>\r\n</mat-card>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n\r\n/**\r\n* @title Complex Example\r\n*/\r\n@Component({\r\n  selector: 'tabs-template-label-example',\r\n  templateUrl: 'tabs-template-label-example.html',\r\n  styleUrls: ['./tabs-template-label-example.css']\r\n  })\r\nexport class TabsTemplateLabelExample {}\r\n`,\r\n\t\tcssCode: `\r\n.demo-tab-group {\r\n  border: 1px solid #e8e8e8;\r\n}\r\n.demo-tab-content {\r\n  padding: 16px;\r\n}\r\n\t\t`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-material-tabs',\r\n\ttemplateUrl: './material-tabs.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.demo-tab-group {\r\n\t\tborder: 1px solid #e8e8e8;\r\n\t  }\r\n\t  .demo-tab-content {\r\n\t\tpadding: 16px;\r\n\t  }\r\n\t`]\r\n})\r\nexport class MaterialTabsComponent implements OnInit {\r\n\r\n\texampleBasicTabs;\r\n\texampleComplex;\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicTabs = basicTabs;\r\n\t\tthis.exampleComplex = complex;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/list/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicStepper\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAngular Material's stepper provides a wizard-like workflow by dividing content into logical steps.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-vertical-stepper>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step label=\\\"Step 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tContent 1\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step label=\\\"Step 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tContent 2\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t</mat-vertical-stepper>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleHorizontalStepper\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe only difference is the orientation of stepper.\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-horizontal-steppert&gt;</code> selector can be used to create a horizontal stepper\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-horizontal-stepper>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step label=\\\"Step 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tContent 1\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step label=\\\"Step 1\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tContent 2\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t</mat-horizontal-stepper>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleStepperOverview\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-raised-button (click)=\\\"isLinear = true\\\" id=\\\"toggle-linear\\\">Enable linear mode</button>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-horizontal-stepper [linear]=\\\"isLinear\\\" #stepper=\\\"matHorizontalStepper\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-step [stepControl]=\\\"firstFormGroup\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<form [formGroup]=\\\"firstFormGroup\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-template matStepLabel>Fill out your name</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Last name, First name\\\" formControlName=\\\"firstCtrl\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button matStepperNext>Next</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step [stepControl]=\\\"secondFormGroup\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<form [formGroup]=\\\"secondFormGroup\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<ng-template matStepLabel>Fill out your address</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput placeholder=\\\"Address\\\" formControlName=\\\"secondCtrl\\\" required>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button matStepperPrevious>Back</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button matStepperNext>Next</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t\\t<mat-step>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ng-template matStepLabel>Done</ng-template>\\r\\n\\t\\t\\t\\t\\t\\t\\tYou are now done.\\r\\n\\t\\t\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button matStepperPrevious>Back</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"stepper.reset()\\\">Reset</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</mat-step>\\r\\n\\t\\t\\t\\t\\t</mat-horizontal-stepper>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\n\r\nconst basicStepper = {\r\n\t\tbeforeCodeTitle: 'Basic stepper',\r\n\t\thtmlCode: `\r\n<button mat-raised-button (click)=\"isLinear = true\" id=\"toggle-linear\">Enable linear mode</button>\r\n<mat-horizontal-stepper [linear]=\"isLinear\" #stepper=\"matHorizontalStepper\">\r\n  <mat-step [stepControl]=\"firstFormGroup\">\r\n    <form [formGroup]=\"firstFormGroup\">\r\n      <ng-template matStepLabel>Fill out your name</ng-template>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\r\n      </mat-form-field>\r\n      <div>\r\n        <button mat-button matStepperNext>Next</button>\r\n      </div>\r\n    </form>\r\n  </mat-step>\r\n  <mat-step [stepControl]=\"secondFormGroup\">\r\n    <form [formGroup]=\"secondFormGroup\">\r\n      <ng-template matStepLabel>Fill out your address</ng-template>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Address\" formControlName=\"secondCtrl\" required>\r\n      </mat-form-field>\r\n      <div>\r\n        <button mat-button matStepperPrevious>Back</button>\r\n        <button mat-button matStepperNext>Next</button>\r\n      </div>\r\n    </form>\r\n  </mat-step>\r\n  <mat-step>\r\n    <ng-template matStepLabel>Done</ng-template>\r\n    You are now done.\r\n     <div>\r\n      <button mat-button matStepperPrevious>Back</button>\r\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\r\n    </div>\r\n  </mat-step>\r\n</mat-horizontal-stepper>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\n/**\r\n* @title Stepper overview\r\n*/\r\n@Component({\r\n  selector: 'stepper-overview-example',\r\n  templateUrl: 'stepper-overview-example.html',\r\n  styleUrls: ['stepper-overview-example.css']\r\n})\r\nexport class StepperOverviewExample {\r\n  isLinear = false;\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  constructor(private _formBuilder: FormBuilder) { }\r\n  ngOnInit() {\r\n    this.firstFormGroup = this._formBuilder.group({\r\n      firstCtrl: ['', Validators.required]\r\n    });\r\n    this.secondFormGroup = this._formBuilder.group({\r\n      secondCtrl: ['', Validators.required]\r\n    });\r\n  }\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst horizontalStepper = {\r\n\t\tbeforeCodeTitle: 'Horizontal stepper',\r\n\t\thtmlCode: `\r\n<mat-horizontal-stepper>\r\n  <mat-step label=\"Step 1\">\r\n    Content 1\r\n  </mat-step>\r\n  <mat-step label=\"Step 1\">\r\n    Content 2\r\n  </mat-step>\r\n</mat-horizontal-stepper>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Horizontal stepper\r\n*/\r\n@Component({\r\n  selector: 'stepper-horizontal-example',\r\n  styleUrls: ['stepper-horizontal-example.css'],\r\n  templateUrl: 'stepper-horizontal-example.html',\r\n})\r\nexport class StepperHorizontalExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst stepperOverview =\t{\r\n\t\tbeforeCodeTitle: 'Stepper overview',\r\n\t\thtmlCode: `\r\n<mat-list>\r\n  <h3 mat-subheader>Folders</h3>\r\n  <mat-list-item *ngFor=\"let folder of folders\">\r\n    <mat-icon mat-list-icon>folder</mat-icon>\r\n\t<h4 mat-line>{{folder.name}}</h4>\r\n    <p mat-line> {{folder.updated | date}} </p>\r\n  </mat-list-item>\r\n  <mat-divider></mat-divider>\r\n  <h3 mat-subheader>Notes</h3>\r\n  <mat-list-item *ngFor=\"let note of notes\">\r\n    <mat-icon mat-list-icon>note</mat-icon>\r\n    <h4 mat-line>{{note.name}}</h4>\r\n    <p mat-line> {{note.updated | date}} </p>\r\n  </mat-list-item>\r\n</mat-list>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title List with sections\r\n*/\r\n@Component({\r\n  selector: 'list-sections-example',\r\n  styleUrls: ['list-sections-example.css'],\r\ntemplateUrl: 'list-sections-example.html',\r\n})\r\nexport class ListSectionsExample {\r\n  folders = [\r\n  {\r\n    name: 'Photos',\r\n    updated: new Date('1/1/16'),\r\n  },\r\n  {\r\n    name: 'Recipes',\r\n    updated: new Date('1/17/16'),\r\n  },\r\n  {\r\n    name: 'Work',\r\n    updated: new Date('1/28/16'),\r\n  }\r\n  ];\r\n  notes = [\r\n  {\r\n    name: 'Vacation Itinerary',\r\n    updated: new Date('2/20/16'),\r\n  },\r\n  {\r\n    name: 'Kitchen Remodel',\r\n    updated: new Date('1/18/16'),\r\n  }\r\n  ];\r\n}\r\n`,\r\n\t\tcssCode: `\r\n.mat-list-icon {\r\n  color: rgba(0, 0, 0, 0.54);\r\n}\r\n`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n@Component({\r\n\tselector: 'm-stepper',\r\n\ttemplateUrl: './stepper.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StepperComponent implements OnInit {\r\n\texampleBasicStepper;\r\n\texampleHorizontalStepper;\r\n\texampleStepperOverview;\r\n\r\n\tisLinear = false;\r\n\tfirstFormGroup: FormGroup;\r\n\tsecondFormGroup: FormGroup;\r\n\r\n\tconstructor(private _formBuilder: FormBuilder) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicStepper = basicStepper;\r\n\t\tthis.exampleHorizontalStepper = horizontalStepper;\r\n\t\tthis.exampleStepperOverview = stepperOverview;\r\n\r\n\t\tthis.firstFormGroup = this._formBuilder.group({\r\n\t\t\tfirstCtrl: ['', Validators.required]\r\n\t\t  });\r\n\t\t  this.secondFormGroup = this._formBuilder.group({\r\n\t\t\tsecondCtrl: ['', Validators.required]\r\n\t\t  });\r\n\t}\r\n}\r\n\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/tree/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleTreeWithDynamicData\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe\\r\\n\\t\\t\\t\\t\\t<code>mat-tree</code> provides a Material Design styled tree that can be used to display hierarchy data.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled></button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.item}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button [attr.aria-label]=\\\"'toggle ' + node.filename\\\" matTreeNodeToggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.item}}\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-progress-bar *ngIf=\\\"node.isLoading\\\" mode=\\\"indeterminate\\\" class=\\\"example-tree-progress-bar\\\"></mat-progress-bar>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\t\\t\\t\\t\\t</mat-tree>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleTreeWithFlatNodes\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-tree [dataSource]=\\\"dataSource2\\\" [treeControl]=\\\"treeControl2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodeToggle matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled></button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.filename}} : {{node.type}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node;when: hasChild2\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button matTreeNodeToggle [attr.aria-label]=\\\"'toggle ' + node.filename\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{treeControl2.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.filename}} : {{node.type}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\t\\t\\t\\t\\t</mat-tree>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleTreeWithCheckboxes\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-tree [dataSource]=\\\"dataSource3\\\" [treeControl]=\\\"treeControl3\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodeToggle matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled></button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-checkbox class=\\\"checklist-leaf-node\\\" [checked]=\\\"checklistSelection3.isSelected(node)\\\" (change)=\\\"checklistSelection3.toggle(node);\\\">{{node.item}}</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node; when: hasNoContent3\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled></button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input matInput #itemValue placeholder=\\\"New item...\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"saveNode3(node, itemValue.value)\\\">Save</button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild3\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button matTreeNodeToggle [attr.aria-label]=\\\"'toggle ' + node.filename\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{treeControl3.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-checkbox [checked]=\\\"descendantsAllSelected3(node)\\\" [indeterminate]=\\\"descendantsPartiallySelected3(node)\\\" (change)=\\\"todoItemSelectionToggle3(node)\\\">{{node.item}}</mat-checkbox>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button (click)=\\\"addNewItem3(node)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon>add</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\t\\t\\t\\t\\t</mat-tree>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleTreeWithPartiallyLoadedData\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-tree [dataSource]=\\\"dataSource4\\\" [treeControl]=\\\"treeControl4\\\">\\r\\n\\t\\t\\t\\t\\t\\t<!-- Leaf node -->\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button disabled></button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.item}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<!-- expandable node -->\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild4\\\" matTreeNodePadding>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-icon-button [attr.aria-label]=\\\"'toggle ' + node.filename\\\" (click)=\\\"loadChildren4(node)\\\" matTreeNodeToggle>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{treeControl4.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t{{node.item}}\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-tree-node *matTreeNodeDef=\\\"let node; when: isLoadMore4\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"loadMore4(node.loadMoreParentItem)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tLoad more...\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-tree-node>\\r\\n\\t\\t\\t\\t\\t</mat-tree>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { CollectionViewer, SelectionChange, SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material';\r\nimport {Component, Injectable, ChangeDetectionStrategy, OnInit} from '@angular/core';\r\nimport {BehaviorSubject, merge, Observable,  of as observableOf} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\nconst treeWithDynamicData = {\r\n\t\tbeforeCodeTitle: 'Tree with dynamic data',\r\n\t\thtmlCode: `\r\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n    <button mat-icon-button disabled></button>\r\n    {{node.item}}\r\n  </mat-tree-node>\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n    <button mat-icon-button\r\n      [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n    </button>\r\n    {{node.item}}\r\n    <mat-progress-bar *ngIf=\"node.isLoading\"\r\n      mode=\"indeterminate\"\r\n      class=\"example-tree-progress-bar\"></mat-progress-bar>\r\n  </mat-tree-node>\r\n</mat-tree>`,\r\n\t\ttsCode: `\r\nimport {CollectionViewer, SelectionChange} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/** Flat node with expandable and level information */\r\nexport class DynamicFlatNode {\r\n  constructor(public item: string, public level = 1, public expandable = false,\r\n    public isLoading = false) {}\r\n  }\\n\r\n  /**\r\n  * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\r\n  * the descendants data from the database.\r\n  */\r\n  export class DynamicDatabase {\r\n    dataMap = new Map<string, string[]>([\r\n      ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n      ['Apple', ['Fuji', 'Macintosh']],\r\n      ['Onion', ['Yellow', 'White', 'Purple']]\r\n    ]);\r\n\r\n    rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\r\n    /** Initial data from database */\r\n    initialData(): DynamicFlatNode[] {\r\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\r\n  }\r\n\r\n  getChildren(node: string): string[] | undefined {\r\n    return this.dataMap.get(node);\r\n  }\r\n\r\n  isExpandable(node: string): boolean {\r\n    return this.dataMap.has(node);\r\n  }\r\n}\\n\r\n/**\r\n* File database, it can build a tree structured Json object from string.\r\n* Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n* For a directory, it has filename and children (a list of files or directories).\r\n* The input will be a json object string, and the output is a list of \\`FileNode\\` with nested\r\n* structure.\r\n*/\r\n@Injectable()\r\nexport class DynamicDataSource {\r\n\r\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n  get data(): DynamicFlatNode[] { return this.dataChange.value; }\r\n  set data(value: DynamicFlatNode[]) {\r\n    this.treeControl.dataNodes = value;\r\n    this.dataChange.next(value);\r\n  }\r\n\r\n  constructor(private treeControl: FlatTreeControl<DynamicFlatNode>,\r\n    private database: DynamicDatabase) {}\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n    this.treeControl.expansionModel.onChange!.subscribe(change => {\r\n    if ((change as SelectionChange<DynamicFlatNode>).added ||\r\n      (change as SelectionChange<DynamicFlatNode>).removed) {\r\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\r\n      }\r\n    });\r\n\r\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n  }\\n\r\n\r\n  /** Handle expand/collapse behaviors */\r\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\r\n    if (change.added) {\r\n      change.added.forEach(node => this.toggleNode(node, true));\r\n    }\r\n    if (change.removed) {\r\n      change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\r\n    }\r\n  }\\n\r\n\r\n  /**\r\n  * Toggle the node, remove from display list\r\n  */\r\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\r\n    const children = this.database.getChildren(node.item);\r\n    const index = this.data.indexOf(node);\r\n    if (!children || index < 0) { // If no children, or cannot find the node, no op\r\n      return;\r\n    }\\n\r\n\r\n    node.isLoading = true;\r\n\r\n    setTimeout(() => {\r\n      if (expand) {\r\n        const nodes = children.map(name =>\r\n          new DynamicFlatNode(name, node.level + 1, this.database.isExpandable(name)));\r\n          this.data.splice(index + 1, 0, ...nodes);\r\n      } else {\r\n        let count = 0;\r\n        for (let i = index + 1; i < this.data.length\r\n          && this.data[i].level > node.level; i++, count++) {}\r\n          this.data.splice(index + 1, count);\r\n        }\\n\r\n\r\n        // notify the change\r\n        this.dataChange.next(this.data);\r\n        node.isLoading = false;\r\n    }, 1000);\r\n  }\r\n}\\n\r\n\r\n/**\r\n* @title Tree with dynamic data\r\n*/\r\n@Component({\r\n  selector: 'tree-dynamic-example',\r\n  templateUrl: 'tree-dynamic-example.html',\r\n  styleUrls: ['tree-dynamic-example.css'],\r\n  providers: [DynamicDatabase]\r\n})\r\nexport class TreeDynamicExample {\r\n  constructor(database: DynamicDatabase) {\r\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\r\n\r\n    this.dataSource.data = database.initialData();\r\n  }\r\n\r\n  treeControl: FlatTreeControl<DynamicFlatNode>;\r\n\r\n  dataSource: DynamicDataSource;\r\n\r\n  getLevel = (node: DynamicFlatNode) => node.level;\r\n\r\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\r\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst treeWithFlatNodes = {\r\n\t\tbeforeCodeTitle: 'Tree with flat nodes',\r\n\t\thtmlCode: `\r\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n    <button mat-icon-button disabled></button>\r\n    {{node.filename}} : {{node.type}}\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\r\n    <button mat-icon-button matTreeNodeToggle\r\n      [attr.aria-label]=\"'toggle ' + node.filename\">\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n    </button>\r\n    {{node.filename}} : {{node.type}}\r\n  </mat-tree-node>\r\n</mat-tree>`,\r\n\t\ttsCode: `\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject, Observable, of as observableOf} from 'rxjs';\r\n\r\n/**\r\n* File node data with nested structure.\r\n* Each node has a filename, and a type or a list of children.\r\n*/\r\nexport class FileNode {\r\n  children: FileNode[];\r\n  filename: string;\r\n  type: any;\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\n  export class FileFlatNode {\r\n  constructor(\r\n  public expandable: boolean, public filename: string, public level: number, public type: any) {}\\n\r\n}\r\n\r\n/**\r\n* The file structure tree data in string. The data could be parsed into a Json object\r\n*/\r\nconst TREE_DATA = JSON.stringify({\r\n  Applications: {\r\n    Calendar: 'app',\r\n    Chrome: 'app',\r\n    Webstorm: 'app'\r\n  },\r\n  Documents: {\r\n    angular: {\r\n      src: {\r\n        compiler: 'ts',\r\n        core: 'ts'\r\n      }\r\n    },\r\n    material2: {\r\n      src: {\r\n        button: 'ts',\r\n        checkbox: 'ts',\r\n        input: 'ts'\r\n      }\r\n    }\r\n  },\r\n  Downloads: {\r\n    October: 'pdf',\r\n    November: 'pdf',\r\n    Tutorial: 'html'\r\n  },\r\n  Pictures: {\r\n    'Photo Booth Library': {\r\n      Contents: 'dir',\r\n      Pictures: 'dir'\r\n    },\r\n    Sun: 'png',\r\n    Woods: 'jpg'\r\n   }\r\n});\r\n\r\n/**\r\n* File database, it can build a tree structured Json object from string.\r\n* Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n* For a directory, it has filename and children (a list of files or directories).\r\n* The input will be a json object string, and the output is a list of \\`FileNode\\` with nested\r\n* structure.\r\n*/\r\n@Injectable()\r\n  export class FileDatabase {\r\n  dataChange = new BehaviorSubject<FileNode[]>([]);\r\n\r\n  get data(): FileNode[] { return this.dataChange.value; }\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    // Parse the string to json object.\r\n    const dataObject = JSON.parse(TREE_DATA);\r\n\r\n    // Build the tree nodes from Json object. The result is a list of \\`FileNode\\` with nested\r\n    //     file node as children.\r\n    const data = this.buildFileTree(dataObject, 0);\r\n\r\n    // Notify the change.\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /**\r\n  * Build the file structure tree. The \\`value\\` is the Json object, or a sub-tree of a Json object.\r\n  * The return value is the list of \\`FileNode\\`.\r\n  */\r\n  buildFileTree(obj: object, level: number): FileNode[] {\r\n    return Object.keys(obj).reduce<FileNode[]>((accumulator, key) => {\r\n    const value = obj[key];\r\n    const node = new FileNode();\r\n    node.filename = key;\r\n\r\n     if (value != null) {\r\n       if (typeof value === 'object') {\r\n         node.children = this.buildFileTree(value, level + 1);\r\n       } else {\r\n         node.type = value;\r\n       }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }\r\n}\\n\r\n\r\n/**\r\n* @title Tree with flat nodes\r\n*/\r\n@Component({\r\n  selector: 'tree-flat-overview-example',\r\n  templateUrl: 'tree-flat-overview-example.html',\r\n  styleUrls: ['tree-flat-overview-example.css'],\r\n  providers: [FileDatabase]\r\n})\r\nexport class TreeFlatOverviewExample {\r\n  treeControl: FlatTreeControl<FileFlatNode>;\r\n  treeFlattener: MatTreeFlattener<FileNode, FileFlatNode>;\r\n  dataSource: MatTreeFlatDataSource<FileNode, FileFlatNode>;\r\n\r\n  constructor(database: FileDatabase) {\r\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this._getLevel,\r\n    this._isExpandable, this._getChildren);\r\n    this.treeControl = new FlatTreeControl<FileFlatNode>(this._getLevel, this._isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    database.dataChange.subscribe(data => this.dataSource.data = data);\r\n  }\r\n\r\n  transformer = (node: FileNode, level: number) => {\r\n    return new FileFlatNode(!!node.children, node.filename, level, node.type);\r\n  }\r\n\r\n  private _getLevel = (node: FileFlatNode) => node.level;\r\n  private _isExpandable = (node: FileFlatNode) => node.expandable;\r\n  private _getChildren = (node: FileNode): Observable<FileNode[]> => observableOf(node.children);\r\n  hasChild = (_: number, _nodeData: FileFlatNode) => _nodeData.expandable;\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst treeWithCheckboxes = {\r\n\tbeforeCodeTitle: 'Tree with checkboxes',\r\n\thtmlCode: `\r\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n    <button mat-icon-button disabled></button>\r\n    <mat-checkbox class=\"checklist-leaf-node\"\r\n      [checked]=\"checklistSelection.isSelected(node)\"\r\n      (change)=\"checklistSelection.toggle(node);\">{{node.item}}</mat-checkbox>\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n     <button mat-icon-button disabled></button>\r\n     <mat-form-field>\r\n       <input matInput #itemValue placeholder=\"New item...\">\r\n     </mat-form-field>\r\n     <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n    <button mat-icon-button matTreeNodeToggle\r\n      [attr.aria-label]=\"'toggle ' + node.filename\">\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n    </button>\r\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n      [indeterminate]=\"descendantsPartiallySelected(node)\"\r\n      (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\r\n  </mat-tree-node>\r\n</mat-tree>`,\r\n\ttsCode: `\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\\n\r\n/**\r\n* Node for to-do item\r\n*/\r\nexport class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  item: string;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  item: string;\r\n  level: number;\r\n  expandable: boolean;\r\n}\r\n\r\n/**\r\n* The Json object for to-do list data.\r\n*/\r\nconst TREE_DATA = {\r\n  Groceries: {\r\n    'Almond Meal flour': null,\r\n    'Organic eggs': null,\r\n    'Protein Powder': null,\r\n    Fruits: {\r\n      Apple: null,\r\n      Berries: ['Blueberry', 'Raspberry'],\r\n      Orange: null\r\n    }\r\n  },\r\n  Reminders: [\r\n    'Cook dinner',\r\n    'Read the Material Design spec',\r\n    'Upgrade Application to Angular'\r\n  ]\r\n};\r\n\r\n/**\r\n* Checklist database, it can build a tree structured Json object.\r\n* Each node in Json object represents a to-do item or a category.\r\n* If a node is a category, it has children items and new items can be added under the category.\r\n*/\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n\r\n  get data(): TodoItemNode[] { return this.dataChange.value; }\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    // Build the tree nodes from Json object. The result is a list of \\`TodoItemNode\\` with nested\r\n    //     file node as children.\r\n    const data = this.buildFileTree(TREE_DATA, 0);\r\n\r\n    // Notify the change.\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /**\r\n  * Build the file structure tree. The \\`value\\` is the Json object, or a sub-tree of a Json object.\r\n  * The return value is the list of \\`TodoItemNode\\`.\r\n  */\r\n  buildFileTree(obj: object, level: number): TodoItemNode[] {\r\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n      const value = obj[key];\r\n      const node = new TodoItemNode();\r\n      node.item = key;\r\n\r\n      if (value != null) {\r\n        if (typeof value === 'object') {\r\n          node.children = this.buildFileTree(value, level + 1);\r\n        } else {\r\n          node.item = value;\r\n        }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }\r\n\r\n/** Add an item to to-do list */\r\n  insertItem(parent: TodoItemNode, name: string) {\r\n    if (parent.children) {\r\n      parent.children.push({item: name} as TodoItemNode);\r\n      this.dataChange.next(this.data);\r\n    }\r\n  }\r\n\r\n  updateItem(node: TodoItemNode, name: string) {\r\n    node.item = name;\r\n\tthis.dataChange.next(this.data);\r\n  }\r\n}\r\n\r\n/**\r\n* @title Tree with checkboxes\r\n*/\r\n@Component({\r\n  selector: 'tree-checklist-example',\r\n  templateUrl: 'tree-checklist-example.html',\r\n  styleUrls: ['tree-checklist-example.css'],\r\n  providers: [ChecklistDatabase]\r\n)\r\nexport class TreeChecklistExample {\r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n\r\n  constructor(private database: ChecklistDatabase) {\r\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n    this.isExpandable, this.getChildren);\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n  }\r\n\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n  /**\r\n  * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n  */\r\n  transformer = (node: TodoItemNode, level: number) => {\r\n    const existingNode = this.nestedNodeMap.get(node);\r\n    const flatNode = existingNode && existingNode.item === node.item\r\n      ? existingNode\r\n      : new TodoItemFlatNode();\r\n    flatNode.item = node.item;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children;\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    return flatNode;\r\n  }\r\n\r\n  /** Whether all the descendants of the node are selected */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n  const descendants = this.treeControl.getDescendants(node);\r\n     return descendants.every(child => this.checklistSelection.isSelected(child));\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n  const descendants = this.treeControl.getDescendants(node);\r\n  const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node) ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this.database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this.database.updateItem(nestedNode!, itemValue);\r\n  }\r\n}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst treeWithPartiallyLoadedData = {\r\n\tbeforeCodeTitle: 'Tree with partially loaded data',\r\n\thtmlCode: `\r\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n  <!-- Leaf node -->\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n    <button mat-icon-button disabled></button>\r\n      {{node.item}}\r\n  </mat-tree-node>\r\n\r\n  <!-- expandable node -->\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n    <button mat-icon-button\r\n      [attr.aria-label]=\"'toggle ' + node.filename\"\r\n      (click)=\"loadChildren(node)\"\r\n      matTreeNodeToggle>\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n   </button>\r\n   {{node.item}}\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\r\n    <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\r\n      Load more...\r\n    </button>\r\n  </mat-tree-node>\r\n</mat-tree>`,\r\n\ttsCode: `\r\n/**\r\n* @license\r\n* Copyright Google LLC All Rights Reserved.\r\n*\r\n* Use of this source code is governed by an MIT-style license that can be\r\n* found in the LICENSE file at https://angular.io/license\r\n*/\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {Component, Injectable} from '@angular/core';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\n\r\nconst LOAD_MORE = 'LOAD_MORE';\r\n/** Nested node */\r\nexport class LoadmoreNode {\r\n  childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\r\n  get children(): LoadmoreNode[] {\r\n    return this.childrenChange.value;\r\n  }\r\n\r\n  constructor(public item: string,\r\n  public hasChildren = false,\r\n  public loadMoreParentItem: string | null = null) {}\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class LoadmoreFlatNode {\r\n  constructor(public item: string,\r\n  public level = 1,\r\n  public expandable = false,\r\n  public loadMoreParentItem: string | null = null) {}\r\n}\r\n\r\n/**\r\n* A database that only load part of the data initially. After user clicks on the \\`Load more\\`\r\n* button, more data will be loaded.\r\n*/\r\n@Injectable()\r\nexport class LoadmoreDatabase {\r\n  batchNumber = 5;\r\n  dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n  nodeMap = new Map<string, LoadmoreNode>();\r\n\r\n  /** The data */\r\n  rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\r\n  dataMap = new Map<string, string[]>([\r\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\r\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n    ['Apple', ['Fuji', 'Macintosh']],\r\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\r\n  ]);\r\n\r\n  initialize() {\r\n    const data = this.rootLevelNodes.map(name => this._generateNode(name));\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /** Expand a node whose children are not loaded */\r\n  loadMore(item: string, onlyFirstTime = false) {\r\n    if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\r\n      return;\r\n    }\r\n    const parent = this.nodeMap.get(item)!;\r\n    const children = this.dataMap.get(item)!;\r\n    if (onlyFirstTime && parent.children!.length > 0) {\r\n      return;\r\n    }\r\n    const newChildrenNumber = parent.children!.length + this.batchNumber;\r\n    const nodes = children.slice(0, newChildrenNumber).map(name => this._generateNode(name));\r\n    if (newChildrenNumber < children.length) {\r\n    // Need a new load more node\r\n      nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\r\n    }\r\n\r\n    parent.childrenChange.next(nodes);\r\n    this.dataChange.next(this.dataChange.value);\r\n  }\r\n\r\n  private _generateNode(item: string): LoadmoreNode {\r\n    if (this.nodeMap.has(item)) {\r\n      return this.nodeMap.get(item)!;\r\n    }\r\n    const result = new LoadmoreNode(item, this.dataMap.has(item));\r\n    this.nodeMap.set(item, result);\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n* @title Tree with partially loaded data\r\n*/\r\nComponent({\r\n  selector: 'tree-loadmore-example',\r\n  templateUrl: 'tree-loadmore-example.html',\r\n  styleUrls: ['tree-loadmore-example.css'],\r\n  providers: [LoadmoreDatabase]\r\n})\r\nexport class TreeLoadmoreExample {\r\n  nodeMap = new Map<string, LoadmoreFlatNode>();\r\n  treeControl: FlatTreeControl<LoadmoreFlatNode>;\r\n  treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\r\n  // Flat tree data source\r\n  dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\r\n\r\n  constructor(private database: LoadmoreDatabase) {\r\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n    this.isExpandable, this.getChildren);\r\n\r\n    this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\r\n\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n    database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n    });\r\n\r\n    database.initialize();\r\n  }\r\n\r\n  getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\r\n\r\n  transformer = (node: LoadmoreNode, level: number) => {\r\n    const existingNode = this.nodeMap.get(node.item);\r\n\r\n    if (existingNode) {\r\n      return existingNode;\r\n    }\r\n\r\n    const newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\r\n    this.nodeMap.set(node.item, newNode);\r\n    return newNode;\r\n  }\r\n\r\n  getLevel = (node: LoadmoreFlatNode) => node.level;\r\n\r\n  isExpandable = (node: LoadmoreFlatNode) => node.expandable;\r\n\r\n  hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\r\n\r\n  isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\r\n\r\n  /** Load more nodes from data source */\r\n  loadMore(item: string) {\r\n    this.database.loadMore(item);\r\n  }\r\n\r\n  loadChildren(node: LoadmoreFlatNode) {\r\n    this.database.loadMore(node.item, true);\r\n  }\r\n}`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n/**\r\n * File node data with nested structure.\r\n * Each node has a filename, and a type or a list of children.\r\n */\r\nexport class FileNode {\r\n\tchildren: FileNode[];\r\n\tfilename: string;\r\n\ttype: any;\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class FileFlatNode {\r\n\tconstructor(\r\n\t\tpublic expandable: boolean, public filename: string, public level: number, public type: any) { }\r\n}\r\n\r\n\r\n/**\r\n * The file structure tree data in string. The data could be parsed into a Json object\r\n */\r\nconst TREE_DATA = JSON.stringify({\r\n\tApplications: {\r\n\t\tCalendar: 'app',\r\n\t\tChrome: 'app',\r\n\t\tWebstorm: 'app'\r\n\t},\r\n\tDocuments: {\r\n\t\tangular: {\r\n\t\t\tsrc: {\r\n\t\t\t\tcompiler: 'ts',\r\n\t\t\t\tcore: 'ts'\r\n\t\t\t}\r\n\t\t},\r\n\t\tmaterial2: {\r\n\t\t\tsrc: {\r\n\t\t\t\tbutton: 'ts',\r\n\t\t\t\tcheckbox: 'ts',\r\n\t\t\t\tinput: 'ts'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tDownloads: {\r\n\t\tOctober: 'pdf',\r\n\t\tNovember: 'pdf',\r\n\t\tTutorial: 'html'\r\n\t},\r\n\tPictures: {\r\n\t\t'Photo Booth Library': {\r\n\t\t\tContents: 'dir',\r\n\t\t\tPictures: 'dir'\r\n\t\t},\r\n\t\tSun: 'png',\r\n\t\tWoods: 'jpg'\r\n\t}\r\n});\r\n\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\n@Injectable()\r\nexport class FileDatabase {\r\n\tdataChange = new BehaviorSubject<FileNode[]>([]);\r\n\r\n\tget data(): FileNode[] { return this.dataChange.value; }\r\n\r\n\tconstructor() {\r\n\t\tthis.initialize();\r\n\t}\r\n\r\n\tinitialize() {\r\n\t\t// Parse the string to json object.\r\n\t\tconst dataObject = JSON.parse(TREE_DATA);\r\n\r\n\t\t// Build the tree nodes from Json object. The result is a list of `FileNode` with nested\r\n\t\t//     file node as children.\r\n\t\tconst data = this.buildFileTree(dataObject, 0);\r\n\r\n\t\t// Notify the change.\r\n\t\tthis.dataChange.next(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n\t * The return value is the list of `FileNode`.\r\n\t */\r\n\tbuildFileTree(obj: object, level: number): FileNode[] {\r\n\t\treturn Object.keys(obj).reduce<FileNode[]>((accumulator, key) => {\r\n\t\t\tconst value = obj[key];\r\n\t\t\tconst node = new FileNode();\r\n\t\t\tnode.filename = key;\r\n\r\n\t\t\tif (value != null) {\r\n\t\t\t\tif (typeof value === 'object') {\r\n\t\t\t\t\tnode.children = this.buildFileTree(value, level + 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.type = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn accumulator.concat(node);\r\n\t\t}, []);\r\n\t}\r\n}\r\n\r\n/** Flat node with expandable and level information */\r\nexport class DynamicFlatNode {\r\n\tconstructor(public item: string, public level = 1, public expandable = false,\r\n\t\tpublic isLoading = false) { }\r\n}\r\n\r\n/**\r\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\r\n * the descendants data from the database.\r\n */\r\nexport class DynamicDatabase {\r\n\tdataMap = new Map<string, string[]>([\r\n\t\t['Fruits', ['Apple', 'Orange', 'Banana']],\r\n\t\t['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n\t\t['Apple', ['Fuji', 'Macintosh']],\r\n\t\t['Onion', ['Yellow', 'White', 'Purple']]\r\n\t]);\r\n\r\n\trootLevelNodes: string[] = ['Fruits', 'Vegetables'];\r\n\r\n\t/** Initial data from database */\r\n\tinitialData(): DynamicFlatNode[] {\r\n\t\treturn this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\r\n\t}\r\n\r\n\tgetChildren(node: string): string[] | undefined {\r\n\t\treturn this.dataMap.get(node);\r\n\t}\r\n\r\n\tisExpandable(node: string): boolean {\r\n\t\treturn this.dataMap.has(node);\r\n\t}\r\n}\r\n\r\n/**\r\n * File database, it can build a tree structured Json object from string.\r\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\r\n * For a directory, it has filename and children (a list of files or directories).\r\n * The input will be a json object string, and the output is a list of `FileNode` with nested\r\n * structure.\r\n */\r\n@Injectable()\r\nexport class DynamicDataSource {\r\n\r\n\tdataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n\tget data(): DynamicFlatNode[] { return this.dataChange.value; }\r\n\tset data(value: DynamicFlatNode[]) {\r\n\t\tthis.treeControl.dataNodes = value;\r\n\t\tthis.dataChange.next(value);\r\n\t}\r\n\r\n\tconstructor(private treeControl: FlatTreeControl<DynamicFlatNode>,\r\n\t\tprivate database: DynamicDatabase) { }\r\n\r\n\tconnect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tthis.treeControl.expansionModel.onChange!.subscribe(change => {\r\n\t\t\tif ((change as SelectionChange<DynamicFlatNode>).added ||\r\n\t\t\t\t(change as SelectionChange<DynamicFlatNode>).removed) {\r\n\t\t\t\tthis.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n\t}\r\n\r\n\t/** Handle expand/collapse behaviors */\r\n\thandleTreeControl(change: SelectionChange<DynamicFlatNode>) {\r\n\t\tif (change.added) {\r\n\t\t\tchange.added.forEach(node => this.toggleNode(node, true));\r\n\t\t}\r\n\t\tif (change.removed) {\r\n\t\t\tchange.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle the node, remove from display list\r\n\t */\r\n\ttoggleNode(node: DynamicFlatNode, expand: boolean) {\r\n\t\tconst children = this.database.getChildren(node.item);\r\n\t\tconst index = this.data.indexOf(node);\r\n\t\tif (!children || index < 0) { // If no children, or cannot find the node, no op\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnode.isLoading = true;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (expand) {\r\n\t\t\t\tconst nodes = children.map(name =>\r\n\t\t\t\t\tnew DynamicFlatNode(name, node.level + 1, this.database.isExpandable(name)));\r\n\t\t\t\tthis.data.splice(index + 1, 0, ...nodes);\r\n\t\t\t} else {\r\n\t\t\t\tlet count = 0;\r\n\t\t\t\tfor (let i = index + 1; i < this.data.length\r\n\t\t\t\t\t&& this.data[i].level > node.level; i++ , count++) { }\r\n\t\t\t\tthis.data.splice(index + 1, count);\r\n\t\t\t}\r\n\r\n\t\t\t// notify the change\r\n\t\t\tthis.dataChange.next(this.data);\r\n\t\t\tnode.isLoading = false;\r\n\t\t}, 500);\r\n\t}\r\n}\r\n\r\n/**\r\n * Node for to-do item\r\n */\r\nexport class TodoItemNode {\r\n\tchildren: TodoItemNode[];\r\n\titem: string;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n\titem: string;\r\n\tlevel: number;\r\n\texpandable: boolean;\r\n}\r\n\r\n/**\r\n * The Json object for to-do list data.\r\n */\r\nconst TREE_DATA_3 = {\r\n\tGroceries: {\r\n\t\t'Almond Meal flour': null,\r\n\t\t'Organic eggs': null,\r\n\t\t'Protein Powder': null,\r\n\t\tFruits: {\r\n\t\t\tApple: null,\r\n\t\t\tBerries: ['Blueberry', 'Raspberry'],\r\n\t\t\tOrange: null\r\n\t\t}\r\n\t},\r\n\tReminders: [\r\n\t\t'Cook dinner',\r\n\t\t'Read the Material Design spec',\r\n\t\t'Upgrade Application to Angular'\r\n\t]\r\n};\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children items and new items can be added under the category.\r\n */\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n\tdataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n\r\n\tget data(): TodoItemNode[] { return this.dataChange.value; }\r\n\r\n\tconstructor() {\r\n\t\tthis.initialize();\r\n\t}\r\n\r\n\tinitialize() {\r\n\t\t// Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n\t\t//     file node as children.\r\n\t\tconst data = this.buildFileTree(TREE_DATA_3, 0);\r\n\r\n\t\t// Notify the change.\r\n\t\tthis.dataChange.next(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n\t * The return value is the list of `TodoItemNode`.\r\n\t */\r\n\tbuildFileTree(obj: object, level: number): TodoItemNode[] {\r\n\t\treturn Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n\t\t\tconst value = obj[key];\r\n\t\t\tconst node = new TodoItemNode();\r\n\t\t\tnode.item = key;\r\n\r\n\t\t\tif (value != null) {\r\n\t\t\t\tif (typeof value === 'object') {\r\n\t\t\t\t\tnode.children = this.buildFileTree(value, level + 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.item = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn accumulator.concat(node);\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/** Add an item to to-do list */\r\n\tinsertItem(parent: TodoItemNode, name: string) {\r\n\t\tif (parent.children) {\r\n\t\t\tparent.children.push({ item: name } as TodoItemNode);\r\n\t\t\tthis.dataChange.next(this.data);\r\n\t\t}\r\n\t}\r\n\r\n\tupdateItem(node: TodoItemNode, name: string) {\r\n\t\tnode.item = name;\r\n\t\tthis.dataChange.next(this.data);\r\n\t}\r\n}\r\n\r\nconst LOAD_MORE = 'LOAD_MORE';\r\n/** Nested node */\r\nexport class LoadmoreNode {\r\n\tchildrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\r\n\tget children(): LoadmoreNode[] {\r\n\t\treturn this.childrenChange.value;\r\n\t}\r\n\r\n\tconstructor(public item: string,\r\n\t\tpublic hasChildren = false,\r\n\t\tpublic loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n  /** Flat node with expandable and level information */\r\nexport class LoadmoreFlatNode {\r\n\tconstructor(public item: string,\r\n\t\tpublic level = 1,\r\n\t\tpublic expandable = false,\r\n\t\tpublic loadMoreParentItem: string | null = null) { }\r\n}\r\n\r\n/**\r\n * A database that only load part of the data initially. After user clicks on the `Load more`\r\n * button, more data will be loaded.\r\n */\r\n@Injectable()\r\nexport class LoadmoreDatabase {\r\n\tbatchNumber = 5;\r\n\tdataChange = new BehaviorSubject<LoadmoreNode[]>([]);\r\n\tnodeMap = new Map<string, LoadmoreNode>();\r\n\r\n\t/** The data */\r\n\trootLevelNodes: string[] = ['Vegetables', 'Fruits'];\r\n\tdataMap = new Map<string, string[]>([\r\n\t\t['Fruits', ['Apple', 'Orange', 'Banana']],\r\n\t\t['Vegetables', ['Tomato', 'Potato', 'Onion']],\r\n\t\t['Apple', ['Fuji', 'Macintosh']],\r\n\t\t['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\r\n\t]);\r\n\r\n\tinitialize() {\r\n\t\tconst data = this.rootLevelNodes.map(name => this._generateNode(name));\r\n\t\tthis.dataChange.next(data);\r\n\t}\r\n\r\n\t/** Expand a node whose children are not loaded */\r\n\tloadMore(item: string, onlyFirstTime = false) {\r\n\t\tif (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tconst parent = this.nodeMap.get(item)!;\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tconst children = this.dataMap.get(item)!;\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tif (onlyFirstTime && parent.children!.length > 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tconst newChildrenNumber = parent.children!.length + this.batchNumber;\r\n\t\tconst nodes = children.slice(0, newChildrenNumber)\r\n\t\t\t.map(name => this._generateNode(name));\r\n\t\tif (newChildrenNumber < children.length) {\r\n\t\t\t// Need a new load more node\r\n\t\t\tnodes.push(new LoadmoreNode(LOAD_MORE, false, item));\r\n\t\t}\r\n\r\n\t\tparent.childrenChange.next(nodes);\r\n\t\tthis.dataChange.next(this.dataChange.value);\r\n\t}\r\n\r\n\tprivate _generateNode(item: string): LoadmoreNode {\r\n\t\tif (this.nodeMap.has(item)) {\r\n\t\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\t\treturn this.nodeMap.get(item)!;\r\n\t\t}\r\n\t\tconst result = new LoadmoreNode(item, this.dataMap.has(item));\r\n\t\tthis.nodeMap.set(item, result);\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Tree with dynamic data\r\n */\r\n@Component({\r\n\tselector: 'm-tree',\r\n\ttemplateUrl: './tree.component.html',\r\n\tstyles: [`\r\n\t.example-tree-progress-bar {\r\n\t\tmargin-left: 30px;\r\n\t  }\r\n\t`],\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [DynamicDatabase, FileDatabase, ChecklistDatabase, LoadmoreDatabase]\r\n})\r\nexport class TreeComponent implements OnInit {\r\n\texampleTreeWithDynamicData;\r\n\texampleTreeWithFlatNodes;\r\n\texampleTreeWithCheckboxes;\r\n\texampleTreeWithPartiallyLoadedData;\r\n\r\n\ttreeControl: FlatTreeControl<DynamicFlatNode>;\r\n\tdataSource: DynamicDataSource;\r\n\r\n\ttreeControl2: FlatTreeControl<FileFlatNode>;\r\n\ttreeFlattener2: MatTreeFlattener<FileNode, FileFlatNode>;\r\n\tdataSource2: MatTreeFlatDataSource<FileNode, FileFlatNode>;\r\n\r\n\t/** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n\tflatNodeMap3 = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\t/** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n\tnestedNodeMap3 = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\t/** A selected parent node to be inserted */\r\n\tselectedParent3: TodoItemFlatNode | null = null;\r\n\t/** The new item's name */\r\n\tnewItemName3 = '';\r\n\ttreeControl3: FlatTreeControl<TodoItemFlatNode>;\r\n\ttreeFlattener3: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\tdataSource3: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\t/** The selection for checklist */\r\n\tchecklistSelection3 = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n\r\n\tnodeMap4 = new Map<string, LoadmoreFlatNode>();\r\n\ttreeControl4: FlatTreeControl<LoadmoreFlatNode>;\r\n\ttreeFlattener4: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\r\n\t// Flat tree data source\r\n\tdataSource4: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\r\n\r\n\tconstructor(database: DynamicDatabase,\r\n\t\tdatabase2: FileDatabase,\r\n\t\tprivate database3: ChecklistDatabase,\r\n\t\tprivate database4: LoadmoreDatabase) {\r\n\t\tthis.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n\t\tthis.dataSource = new DynamicDataSource(this.treeControl, database);\r\n\t\tthis.dataSource.data = database.initialData();\r\n\r\n\t\tthis.treeFlattener2 = new MatTreeFlattener(this.transformer2, this._getLevel2,\r\n\t\t\tthis._isExpandable2, this._getChildren2);\r\n\t\tthis.treeControl2 = new FlatTreeControl<FileFlatNode>(this._getLevel2, this._isExpandable2);\r\n\t\tthis.dataSource2 = new MatTreeFlatDataSource(this.treeControl2, this.treeFlattener2);\r\n\t\tdatabase2.dataChange.subscribe(data => this.dataSource2.data = data);\r\n\r\n\t\tthis.treeFlattener3 = new MatTreeFlattener(this.transformer3, this.getLevel3,\r\n\t\t\tthis.isExpandable3, this.getChildren3);\r\n\t\tthis.treeControl3 = new FlatTreeControl<TodoItemFlatNode>(this.getLevel3, this.isExpandable3);\r\n\t\tthis.dataSource3 = new MatTreeFlatDataSource(this.treeControl3, this.treeFlattener3);\r\n\t\tdatabase3.dataChange.subscribe(data => {\r\n\t\t\tthis.dataSource3.data = data;\r\n\t\t});\r\n\r\n\r\n\t\tthis.treeFlattener4 = new MatTreeFlattener(this.transformer4, this.getLevel4,\r\n\t\t\tthis.isExpandable4, this.getChildren4);\r\n\t\tthis.treeControl4 = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel4, this.isExpandable4);\r\n\t\tthis.dataSource4 = new MatTreeFlatDataSource(this.treeControl4, this.treeFlattener4);\r\n\t\tdatabase4.dataChange.subscribe(data => {\r\n\t\t\tthis.dataSource4.data = data;\r\n\t\t});\r\n\t\tdatabase4.initialize();\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleTreeWithDynamicData = treeWithDynamicData;\r\n\t\tthis.exampleTreeWithFlatNodes = treeWithFlatNodes;\r\n\t\tthis.exampleTreeWithCheckboxes = treeWithCheckboxes;\r\n\t\tthis.exampleTreeWithPartiallyLoadedData = treeWithPartiallyLoadedData;\r\n\t}\r\n\r\n\tgetLevel = (node: DynamicFlatNode) => node.level;\r\n\tisExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\thasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\r\n\r\n\ttransformer2 = (node: FileNode, level: number) => {\r\n\t\treturn new FileFlatNode(!!node.children, node.filename, level, node.type);\r\n\t}\r\n\tprivate _getLevel2 = (node: FileFlatNode) => node.level;\r\n\tprivate _isExpandable2 = (node: FileFlatNode) => node.expandable;\r\n\tprivate _getChildren2 = (node: FileNode): Observable<FileNode[]> => observableOf(node.children);\r\n\thasChild2 = (_: number, _nodeData: FileFlatNode) => _nodeData.expandable;\r\n\r\n\tgetLevel3 = (node: TodoItemFlatNode) => node.level;\r\n\tisExpandable3 = (node: TodoItemFlatNode) => node.expandable;\r\n\tgetChildren3 = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\thasChild3 = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\thasNoContent3 = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n\t/**\r\n\t * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n\t */\r\n\ttransformer3 = (node: TodoItemNode, level: number) => {\r\n\t\tconst existingNode = this.nestedNodeMap3.get(node);\r\n\t\tconst flatNode = existingNode && existingNode.item === node.item\r\n\t\t\t? existingNode\r\n\t\t\t: new TodoItemFlatNode();\r\n\t\tflatNode.item = node.item;\r\n\t\tflatNode.level = level;\r\n\t\tflatNode.expandable = !!node.children;\r\n\t\tthis.flatNodeMap3.set(flatNode, node);\r\n\t\tthis.nestedNodeMap3.set(node, flatNode);\r\n\t\treturn flatNode;\r\n\t}\r\n\r\n\t/** Whether all the descendants of the node are selected */\r\n\tdescendantsAllSelected3(node: TodoItemFlatNode): boolean {\r\n\t\tconst descendants = this.treeControl3.getDescendants(node);\r\n\t\treturn descendants.every(child => this.checklistSelection3.isSelected(child));\r\n\t}\r\n\r\n\t/** Whether part of the descendants are selected */\r\n\tdescendantsPartiallySelected3(node: TodoItemFlatNode): boolean {\r\n\t\tconst descendants = this.treeControl3.getDescendants(node);\r\n\t\tconst result = descendants.some(child => this.checklistSelection3.isSelected(child));\r\n\t\treturn result && !this.descendantsAllSelected3(node);\r\n\t}\r\n\r\n\t/** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n\ttodoItemSelectionToggle3(node: TodoItemFlatNode): void {\r\n\t\tthis.checklistSelection3.toggle(node);\r\n\t\tconst descendants = this.treeControl3.getDescendants(node);\r\n\t\tthis.checklistSelection3.isSelected(node)\r\n\t\t\t? this.checklistSelection3.select(...descendants)\r\n\t\t\t: this.checklistSelection3.deselect(...descendants);\r\n\t}\r\n\r\n\t/** Select the category so we can insert the new item. */\r\n\taddNewItem3(node: TodoItemFlatNode) {\r\n\t\tconst parentNode = this.flatNodeMap3.get(node);\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tthis.database3.insertItem(parentNode!, '');\r\n\t\tthis.treeControl3.expand(node);\r\n\t}\r\n\r\n\t/** Save the node to database */\r\n\tsaveNode3(node: TodoItemFlatNode, itemValue: string) {\r\n\t\tconst nestedNode = this.flatNodeMap3.get(node);\r\n\t\t// tslint:disable-next-line:no-non-null-assertion\r\n\t\tthis.database3.updateItem(nestedNode!, itemValue);\r\n\t}\r\n\r\n\tgetChildren4 = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\r\n\r\n\ttransformer4 = (node: LoadmoreNode, level: number) => {\r\n\t\tconst existingNode = this.nodeMap4.get(node.item);\r\n\r\n\t\tif (existingNode) {\r\n\t\t\treturn existingNode;\r\n\t\t}\r\n\r\n\t\tconst newNode =\r\n\t\t\tnew LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\r\n\t\tthis.nodeMap4.set(node.item, newNode);\r\n\t\treturn newNode;\r\n\t}\r\n\r\n\tgetLevel4 = (node: LoadmoreFlatNode) => node.level;\r\n\tisExpandable4 = (node: LoadmoreFlatNode) => node.expandable;\r\n\thasChild4 = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\r\n\tisLoadMore4 = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\r\n\r\n\t/** Load more nodes from data source */\r\n\tloadMore4(item: string) {\r\n\t\tthis.database4.loadMore(item);\r\n\t}\r\n\r\n\tloadChildren4(node: LoadmoreFlatNode) {\r\n\t\tthis.database4.loadMore(node.item, true);\r\n\t}\r\n}\r\n","module.exports = \"<router-outlet></router-outlet>\\r\\n\"","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'm-material',\r\n\ttemplateUrl: './material.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MaterialComponent { }\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MaterialComponent } from './material.component';\r\nimport { AutocompleteComponent } from './formcontrols/autocomplete/autocomplete.component';\r\nimport { CheckboxComponent } from './formcontrols/checkbox/checkbox.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CodePreviewModule } from '../../../partials/content/general/code-preview/code-preview.module';\r\nimport { PartialsModule } from '../../../partials/partials.module';\r\nimport { CoreModule } from '../../../../core/core.module';\r\nimport { MaterialPreviewModule } from '../../../partials/content/general/material-preview/material-preivew.module';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport {\r\n\tMatAutocompleteModule,\r\n\tMatNativeDateModule,\r\n\tMatFormFieldModule,\r\n\tMatInputModule,\r\n\tMatRadioModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatChipsModule,\r\n\tMatSelectModule,\r\n\tMatProgressBarModule,\r\n\tMatProgressSpinnerModule,\r\n\tMatIconModule,\r\n\tMatSliderModule,\r\n\tMatPaginatorModule,\r\n\tMatSortModule,\r\n\tMatSidenavModule,\r\n\tMatSnackBarModule,\r\n\tMatStepperModule,\r\n\tMatToolbarModule,\r\n\tMatDividerModule,\r\n\tMatTabsModule,\r\n\tMatTableModule,\r\n\tMatTooltipModule,\r\n\tMatListModule,\r\n\tMatGridListModule,\r\n\tMatButtonToggleModule,\r\n\tMatBottomSheetModule,\r\n\tMatExpansionModule,\r\n\t_MatChipListMixinBase,\r\n\tMatMenuModule,\r\n\tMatTreeModule,\r\n\tMAT_BOTTOM_SHEET_DATA,\r\n\tMatBottomSheetRef\r\n} from '@angular/material';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\n\r\n// Form controls\r\nimport { DatepickerComponent } from './formcontrols/datepicker/datepicker.component';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { FormfieldComponent } from './formcontrols/formfield/formfield.component';\r\nimport { InputComponent } from './formcontrols/input/input.component';\r\nimport { RadiobuttonComponent } from './formcontrols/radiobutton/radiobutton.component';\r\nimport { SelectComponent } from './formcontrols/select/select.component';\r\nimport { SliderComponent } from './formcontrols/slider/slider.component';\r\nimport { SlidertoggleComponent } from './formcontrols/slidertoggle/slidertoggle.component';\r\n// Navigation\r\nimport { MenuComponent } from './navigation/menu/menu.component';\r\nimport { SidenavComponent } from './navigation/sidenav/sidenav.component';\r\nimport { ToolbarComponent } from './navigation/toolbar/toolbar.component';\r\n// Layout\r\nimport { CardComponent } from './layout/card/card.component';\r\nimport { DividerComponent } from './layout/divider/divider.component';\r\nimport { ExpansionPanelComponent } from './layout/expansion-panel/expansion-panel.component';\r\nimport { GridListComponent } from './layout/grid-list/grid-list.component';\r\nimport { ListComponent } from './layout/list/list.component';\r\nimport { MaterialTabsComponent } from './layout/material-tabs/material-tabs.component';\r\nimport { StepperComponent } from './layout/stepper/stepper.component';\r\nimport { TreeComponent } from './layout/tree/tree.component';\r\nimport { DefaultFormsComponent } from './layout/default-forms/default-forms.component';\r\n// Buttons & indicators\r\nimport { ButtonComponent } from './buttons-and-indicators/button/button.component';\r\nimport { ButtonToggleComponent } from './buttons-and-indicators/button-toggle/button-toggle.component';\r\nimport { ChipsComponent } from './buttons-and-indicators/chips/chips.component';\r\nimport { IconComponent } from './buttons-and-indicators/icon/icon.component';\r\nimport { ProgressBarComponent } from './buttons-and-indicators/progress-bar/progress-bar.component';\r\nimport { ProgressSpinnerComponent } from './buttons-and-indicators/progress-spinner/progress-spinner.component';\r\n// Popups & modals\r\nimport { DialogComponent, ModalComponent, Modal2Component, Modal3Component } from './popups-and-modals/dialog/dialog.component';\r\nimport { SnackbarComponent } from './popups-and-modals/snackbar/snackbar.component';\r\nimport { MaterialTooltipComponent } from './popups-and-modals/material-tooltip/material-tooltip.component';\r\nimport { BottomSheetComponent } from './popups-and-modals/bottom-sheet/bottom-sheet.component';\r\nimport { BottomSheetExampleComponent } from './popups-and-modals/bottom-sheet/bottom-sheet-example/bottom-sheet-example.component';\r\nimport { PizzaPartyComponent } from './popups-and-modals/snackbar/pizza-party.component';\r\n// Data table\r\nimport { PaginatorComponent } from './data-table/paginator/paginator.component';\r\nimport { SortHeaderComponent } from './data-table/sort-header/sort-header.component';\r\nimport { MaterialTableComponent } from './data-table/material-table/material-table.component';\r\n\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: '',\r\n\t\tcomponent: MaterialComponent,\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/autocomplete',\r\n\t\t\t\tcomponent: AutocompleteComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/checkbox',\r\n\t\t\t\tcomponent: CheckboxComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/datepicker',\r\n\t\t\t\tcomponent: DatepickerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/formfield',\r\n\t\t\t\tcomponent: FormfieldComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/input',\r\n\t\t\t\tcomponent: InputComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/radiobutton',\r\n\t\t\t\tcomponent: RadiobuttonComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/select',\r\n\t\t\t\tcomponent: SelectComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/slider',\r\n\t\t\t\tcomponent: SliderComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'form-controls/slidertoggle',\r\n\t\t\t\tcomponent: SlidertoggleComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'navigation/menu',\r\n\t\t\t\tcomponent: MenuComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'navigation/sidenav',\r\n\t\t\t\tcomponent: SidenavComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'navigation/toolbar',\r\n\t\t\t\tcomponent: ToolbarComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/card',\r\n\t\t\t\tcomponent: CardComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/divider',\r\n\t\t\t\tcomponent: DividerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/expansion-panel',\r\n\t\t\t\tcomponent: ExpansionPanelComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/grid-list',\r\n\t\t\t\tcomponent: GridListComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/list',\r\n\t\t\t\tcomponent: ListComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/tabs',\r\n\t\t\t\tcomponent: MaterialTabsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/stepper',\r\n\t\t\t\tcomponent: StepperComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/default-forms',\r\n\t\t\t\tcomponent: DefaultFormsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'layout/tree',\r\n\t\t\t\tcomponent: TreeComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/button',\r\n\t\t\t\tcomponent: ButtonComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/button-toggle',\r\n\t\t\t\tcomponent: ButtonToggleComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/chips',\r\n\t\t\t\tcomponent: ChipsComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/icon',\r\n\t\t\t\tcomponent: IconComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/progress-bar',\r\n\t\t\t\tcomponent: ProgressBarComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'buttons-and-indicators/progress-spinner',\r\n\t\t\t\tcomponent: ProgressSpinnerComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'popups-and-modals/bottom-sheet',\r\n\t\t\t\tcomponent: BottomSheetComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'popups-and-modals/dialog',\r\n\t\t\t\tcomponent: DialogComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'popups-and-modals/snackbar',\r\n\t\t\t\tcomponent: SnackbarComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'popups-and-modals/tooltip',\r\n\t\t\t\tcomponent: MaterialTooltipComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'data'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'data-table/paginator',\r\n\t\t\t\tcomponent: PaginatorComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'data-table/sort-header',\r\n\t\t\t\tcomponent: SortHeaderComponent\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpath: 'data-table/table',\r\n\t\t\t\tcomponent: MaterialTableComponent\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\t// material modules\r\n\t\tMatInputModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatAutocompleteModule,\r\n\t\tMatListModule,\r\n\t\tMatSliderModule,\r\n\t\tMatCardModule,\r\n\t\tMatSelectModule,\r\n\t\tMatButtonModule,\r\n\t\tMatIconModule,\r\n\t\tMatNativeDateModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatMenuModule,\r\n\t\tMatTabsModule,\r\n\t\tMatTooltipModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatProgressBarModule,\r\n\t\tMatProgressSpinnerModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatTableModule,\r\n\t\tMatGridListModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatDividerModule,\r\n\t\tMatSortModule,\r\n\t\tMatStepperModule,\r\n\t\tMatChipsModule,\r\n\t\tMatPaginatorModule,\r\n\t\tMatDialogModule,\r\n\t\tCoreModule,\r\n\t\tCommonModule,\r\n\t\tMatRadioModule,\r\n\t\tMatTreeModule,\r\n\t\tMatButtonToggleModule,\r\n\t\tPartialsModule,\r\n\t\tMaterialPreviewModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tCodePreviewModule,\r\n\t\tRouterModule.forChild(routes)\r\n\t],\r\n\texports: [RouterModule],\r\n\tentryComponents: [\r\n\t\tPizzaPartyComponent,\r\n\t\tDialogComponent,\r\n\t\tModalComponent,\r\n\t\tModal2Component,\r\n\t\tModal3Component,\r\n\t\tIconComponent,\r\n\t\tTreeComponent,\r\n\t\tBottomSheetExampleComponent\r\n\t],\r\n\tproviders: [\r\n\t\tMatIconRegistry,\r\n\t\t{ provide: MatBottomSheetRef, useValue: {} },\r\n\t\t{\r\n\t\t\tprovide: MAT_BOTTOM_SHEET_DATA, useValue: {}\r\n\t\t}\r\n\t],\r\n\tdeclarations: [\r\n\t\tMaterialComponent,\r\n\t\tAutocompleteComponent,\r\n\t\tCheckboxComponent,\r\n\t\tDatepickerComponent,\r\n\t\tFormfieldComponent,\r\n\t\tInputComponent,\r\n\t\tRadiobuttonComponent,\r\n\t\tSelectComponent,\r\n\t\tSliderComponent,\r\n\t\tSlidertoggleComponent,\r\n\t\tMenuComponent,\r\n\t\tSidenavComponent,\r\n\t\tToolbarComponent,\r\n\t\tCardComponent,\r\n\t\tDividerComponent,\r\n\t\tExpansionPanelComponent,\r\n\t\tGridListComponent,\r\n\t\tListComponent,\r\n\t\tMaterialTabsComponent,\r\n\t\tStepperComponent,\r\n\t\tButtonComponent,\r\n\t\tButtonToggleComponent,\r\n\t\tChipsComponent,\r\n\t\tIconComponent,\r\n\t\tProgressBarComponent,\r\n\t\tProgressSpinnerComponent,\r\n\t\tDialogComponent,\r\n\t\tModalComponent,\r\n\t\tModal2Component,\r\n\t\tModal3Component,\r\n\t\tPizzaPartyComponent,\r\n\t\tSnackbarComponent,\r\n\t\tMaterialTooltipComponent,\r\n\t\tPaginatorComponent,\r\n\t\tSortHeaderComponent,\r\n\t\tMaterialTableComponent,\r\n\t\tDefaultFormsComponent,\r\n\t\tTreeComponent,\r\n\t\tBottomSheetComponent,\r\n\t\tBottomSheetExampleComponent\r\n\t]\r\n})\r\nexport class MaterialModule {}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/menu/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicMenu\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-menu&gt;</code> is a floating panel containing list of options.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-button [matMenuTriggerFor]=\\\"menu10\\\">Menu</button>\\r\\n\\t\\t\\t\\t\\t<mat-menu #menu10=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Item 1</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Item 2</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleMenuWithIcons\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tMenus support displaying\\r\\n\\t\\t\\t\\t\\t<code>&ltmat-icon&gt;</code> elements before the menu item text.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-icon-button [matMenuTriggerFor]=\\\"menu32\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-icon>more_vert</mat-icon>\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<mat-menu #menu32=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>dialpad</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Redial</span>\\r\\n\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item disabled>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>voicemail</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Check voicemail</span>\\r\\n\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon>notifications_off</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Disable alerts</span>\\r\\n\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleNestedMenu\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tMaterial supports the ability for an\\r\\n\\t\\t\\t\\t\\t<mark>mat-menu-item</mark> to open a\\r\\n\\t\\t\\t\\t\\t<mark>sub-menu</mark>. To do so, you have to define your root menu and sub-menus, in addition to setting the\\r\\n\\t\\t\\t\\t\\t<mark>[matMenuTriggerFor]</mark> on the mat-menu-item that should trigger the sub-menu\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-button [matMenuTriggerFor]=\\\"animals\\\">Animal index</button>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #animals=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item [matMenuTriggerFor]=\\\"vertebrates\\\">Vertebrates</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item [matMenuTriggerFor]=\\\"invertebrates\\\">Invertebrates</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #vertebrates=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item [matMenuTriggerFor]=\\\"fish\\\">Fishes</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item [matMenuTriggerFor]=\\\"amphibians\\\">Amphibians</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item [matMenuTriggerFor]=\\\"reptiles\\\">Reptiles</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Birds</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Mammals</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #invertebrates=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Insects</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Molluscs</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Crustaceans</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Corals</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Arachnids</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Velvet worms</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Horseshoe crabs</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #fish=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Baikal oilfish</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Bala shark</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Ballan wrasse</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Bamboo shark</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Banded killifish</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #amphibians=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Sonoran desert toad</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Western toad</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Arroyo toad</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Yosemite toad</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-menu #reptiles=\\\"matMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Banded Day Gecko</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Banded Gila Monster</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Black Tree Monitor</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Blue Spiny Lizard</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item disabled>Velociraptor</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleToggling\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tBy default, the menu will display below (y-axis), after (x-axis), and overlapping its trigger. The position can be changed using the\\r\\n\\t\\t\\t\\t\\t<mark>xPosition</mark> (\\r\\n\\t\\t\\t\\t\\t<mark>before | after</mark>) and\\r\\n\\t\\t\\t\\t\\t<mark>yPosition</mark> (\\r\\n\\t\\t\\t\\t\\t<mark>above | below</mark>) attributes. The menu can be be forced to not overlap the trigger using\\r\\n\\t\\t\\t\\t\\t<code>[overlapTrigger]=\\\"false\\\"</code> attribute.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-menu #appMenu=\\\"matMenu\\\" yPosition=\\\"above\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Settings</button>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-menu-item>Help</button>\\r\\n\\t\\t\\t\\t\\t</mat-menu>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button mat-icon-button [matMenuTriggerFor]=\\\"appMenu\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-icon>more_vert</mat-icon>\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicMenu = {\r\n\t\tbeforeCodeTitle: 'Basic menu',\r\n\t\thtmlCode: `\r\n<button mat-button [matMenuTriggerFor]=\"menu\">Menu</button>\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item>Item 1</button>\r\n  <button mat-menu-item>Item 2</button>\r\n</mat-menu>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic menu\r\n */\r\n@Component({\r\n  selector: 'menu-overview-example',\r\n  templateUrl: 'menu-overview-example.html',\r\n  styleUrls: ['menu-overview-example.css'],\r\n})\r\nexport class MenuOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst nestedMenu = {\r\n\tbeforeCodeTitle: 'Nested menu',\r\n\thtmlCode: `\r\n<button mat-button [matMenuTriggerFor]=\"animals\">Animal index</button>\r\n<mat-menu #animals=\"matMenu\">\r\n  <button mat-menu-item [matMenuTriggerFor]=\"vertebrates\">Vertebrates</button>\r\n  <button mat-menu-item [matMenuTriggerFor]=\"invertebrates\">Invertebrates</button>\r\n</mat-menu>\r\n<mat-menu #vertebrates=\"matMenu\">\r\n  <button mat-menu-item [matMenuTriggerFor]=\"fish\">Fishes</button>\r\n  <button mat-menu-item [matMenuTriggerFor]=\"amphibians\">Amphibians</button>\r\n  <button mat-menu-item [matMenuTriggerFor]=\"reptiles\">Reptiles</button>\r\n  <button mat-menu-item>Birds</button>\r\n  <button mat-menu-item>Mammals</button>\r\n</mat-menu>\r\n<mat-menu #invertebrates=\"matMenu\">\r\n  <button mat-menu-item>Insects</button>\r\n  <button mat-menu-item>Molluscs</button>\r\n  <button mat-menu-item>Crustaceans</button>\r\n  <button mat-menu-item>Corals</button>\r\n  <button mat-menu-item>Arachnids</button>\r\n  <button mat-menu-item>Velvet worms</button>\r\n  <button mat-menu-item>Horseshoe crabs</button>\r\n</mat-menu>\r\n<mat-menu #fish=\"matMenu\">\r\n  <button mat-menu-item>Baikal oilfish</button>\r\n  <button mat-menu-item>Bala shark</button>\r\n  <button mat-menu-item>Ballan wrasse</button>\r\n  <button mat-menu-item>Bamboo shark</button>\r\n  <button mat-menu-item>Banded killifish</button>\r\n</mat-menu>\r\n<mat-menu #amphibians=\"matMenu\">\r\n  <button mat-menu-item>Sonoran desert toad</button>\r\n  <button mat-menu-item>Western toad</button>\r\n  <button mat-menu-item>Arroyo toad</button>\r\n  <button mat-menu-item>Yosemite toad</button>\r\n</mat-menu>\r\n<mat-menu #reptiles=\"matMenu\">\r\n  <button mat-menu-item>Banded Day Gecko</button>\r\n  <button mat-menu-item>Banded Gila Monster</button>\r\n  <button mat-menu-item>Black Tree Monitor</button>\r\n  <button mat-menu-item>Blue Spiny Lizard</button>\r\n  <button mat-menu-item disabled>Velociraptor</button>\r\n</mat-menu>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Nested menu\r\n*/\r\n@Component({\r\n  selector: 'nested-menu-example',\r\n  templateUrl: 'nested-menu-example.html',\r\n  styleUrls: ['nested-menu-example.css']\r\n})\r\nexport class NestedMenuExample {}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\nconst menuWithIcons = {\r\n\t\tbeforeCodeTitle: 'Menu with icons',\r\n\t\thtmlCode: `\r\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n  <mat-icon>more_vert</mat-icon>\r\n</button>\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item>\r\n    <mat-icon>dialpad</mat-icon>\r\n    <span>Redial</span>\r\n  </button>\r\n  <button mat-menu-item disabled>\r\n    <mat-icon>voicemail</mat-icon>\r\n    <span>Check voicemail</span>\r\n  </button>\r\n  <button mat-menu-item>\r\n    <mat-icon>notifications_off</mat-icon>\r\n    <span>Disable alerts</span>\r\n  </button>\r\n</mat-menu>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n\r\n/**\r\n* @title Menu with icons\r\n*/\r\n@Component({\r\n  selector: 'menu-icons-example',\r\n  templateUrl: 'menu-icons-example.html',\r\n  styleUrls: ['menu-icons-example.css'],\r\n})\r\nexport class MenuIconsExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\n\tconst toggling = {\r\n\t\tbeforeCodeTitle: 'Customizing menu position',\r\n\t\thtmlCode: `\r\n<mat-menu #appMenu=\"matMenu\" yPosition=\"above\">\r\n  <button mat-menu-item>Settings</button>\r\n  <button mat-menu-item>Help</button>\r\n</mat-menu>\r\n<button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\r\n  <mat-icon>more_vert</mat-icon>\r\n</button>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @Customizing menu position\r\n */\r\n@Component({\r\n  selector: 'menu-customizing-example',\r\n  templateUrl: 'menu-customizing-example.html',\r\n  styleUrls: ['menu-customizing-example.css'],\r\n})\r\nexport class MenuCustomizingExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-menu',\r\n\ttemplateUrl: './menu.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\r\n\texampleBasicMenu;\r\n\texampleNestedMenu;\r\n\texampleMenuWithIcons;\r\n\texampleToggling;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicMenu = basicMenu;\r\n\t\tthis.exampleNestedMenu = nestedMenu;\r\n\t\tthis.exampleMenuWithIcons = menuWithIcons;\r\n\t\tthis.exampleToggling = toggling;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/sidenav/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicSidenav\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tAngular Material provides two sets of components designed to add collapsible side content (often navigation, though it can be any content) alongside some primary content. These are the sidenav and drawer components.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe sidenav components are designed to add side content to a fullscreen app. To set up a sidenav we use three components:\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-sidenav-container&gt;</code> which acts as a structural container for our content and sidenav,\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-sidenav-content&gt;</code> which represents the main content, and\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-sidenav&gt;</code> which represents the added side content.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-sidenav-container class=\\\"example-container\\\" *ngIf=\\\"shouldRun\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-sidenav mode=\\\"side\\\" opened>Sidenav content</mat-sidenav>\\r\\n\\t\\t\\t\\t\\t\\t<mat-sidenav-content>Main content</mat-sidenav-content>\\r\\n\\t\\t\\t\\t\\t</mat-sidenav-container>\\r\\n\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t<a href=\\\"https://stackblitz.com/angular/vqvkrekvgga\\\" target=\\\"_blank\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tPlease open on Stackblitz to see result\\r\\n\\t\\t\\t\\t\\t\\t</a>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleAutosizeSidenav\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tBy default, Material will only measure and resize the drawer container in a few key moments (on open, on window resize, on mode change) in order to avoid layout thrashing, however there are cases where this can be problematic. If your app requires for a drawer to change its width while it is open, you can use the\\r\\n\\t\\t\\t\\t\\t<mark>autosize</mark> option to tell Material to continue measuring it. Note that you should use this option\\r\\n\\t\\t\\t\\t\\t<b>at your own risk</b>, because it could cause performance issues.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-drawer-container class=\\\"example-container\\\" autosize>\\r\\n\\t\\t\\t\\t\\t\\t<mat-drawer #drawer class=\\\"example-sidenav\\\" mode=\\\"side\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<p>Auto-resizing sidenav</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t<p *ngIf=\\\"showFiller\\\">Lorem, ipsum dolor sit amet consectetur.</p>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button (click)=\\\"showFiller = !showFiller\\\" mat-raised-button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tToggle extra text\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t</mat-drawer>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"example-sidenav-content\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" mat-button (click)=\\\"drawer.toggle()\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tToggle sidenav\\r\\n\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t</mat-drawer-container>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasicDrawer\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe drawer component is designed to add side content to a small section of your app. This is accomplished using the\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-drawer-container&gt;</code>,\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-drawer-content&gt;</code>, and\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-drawer&gt;</code> components, which are analogous to their sidenav equivalents. Rather than adding side content to the app as a whole, these are designed to add side content to a small section of your app. They support almost all of the same features, but do not support fixed positioning.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-drawer-container class=\\\"example-container\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-drawer mode=\\\"side\\\" opened=\\\"true\\\">Drawer content</mat-drawer>\\r\\n\\t\\t\\t\\t\\t\\t<mat-drawer-content>Main content</mat-drawer-content>\\r\\n\\t\\t\\t\\t\\t</mat-drawer-container>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basicSidenav = {\r\n\t\tbeforeCodeTitle: 'Basic sidenav',\r\n\t\thtmlCode: `\r\n<mat-sidenav-container class=\"example-container\" *ngIf=\"shouldRun\">\r\n  <mat-sidenav mode=\"side\" opened>Sidenav content</mat-sidenav>\r\n  <mat-sidenav-content>Main content</mat-sidenav-content>\r\n</mat-sidenav-container>\r\n<div *ngIf=\"!shouldRun\">Please open on Stackblitz to see result</div>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Basic sidenav */\r\n@Component({\r\n  selector: 'sidenav-overview-example',\r\n  templateUrl: 'sidenav-overview-example.html',\r\n  styleUrls: ['sidenav-overview-example.css'],\r\n})\r\nexport class SidenavOverviewExample {\r\n  shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(h => h.test(window.location.host));\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst basicDrawer = {\r\n\t\tbeforeCodeTitle: 'Basic drawer',\r\n\t\thtmlCode: `\r\n<mat-drawer-container class=\"example-container\">\r\n  <mat-drawer mode=\"side\" opened=\"true\">Drawer content</mat-drawer>\r\n  <mat-drawer-content>Main content</mat-drawer-content>\r\n</mat-drawer-container>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/** @title Basic drawer */\r\n@Component({\r\n  selector: 'sidenav-drawer-overview-example',\r\n  templateUrl: 'sidenav-drawer-overview-example.html',\r\n  styleUrls: ['sidenav-drawer-overview-example.css'],\r\n})\r\nexport class SidenavDrawerOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\tconst autosizeSidenav = {\r\n\t\tbeforeCodeTitle: 'Autosize sidenav',\r\n\t\thtmlCode: `\r\n<mat-drawer-container class=\"example-container\" autosize>\r\n  <mat-drawer #drawer class=\"example-sidenav\" mode=\"side\">\r\n    <p>Auto-resizing sidenav</p>\r\n    <p *ngIf=\"showFiller\">Lorem, ipsum dolor sit amet consectetur.</p>\r\n    <button (click)=\"showFiller = !showFiller\" mat-raised-button>\r\n      Toggle extra text\r\n    </button>\r\n  </mat-drawer>\\n\r\n  <div class=\"example-sidenav-content\">\r\n    <button type=\"button\" mat-button (click)=\"drawer.toggle()\">\r\n      Toggle sidenav\r\n    </button>\r\n  </div>\r\n</mat-drawer-container>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Autosize sidenav\r\n*/\r\n@Component({\r\n  selector: 'sidenav-autosize-example',\r\n  templateUrl: 'sidenav-autosize-example.html',\r\n  styleUrls: ['sidenav-autosize-example.css'],\r\n})\r\nexport class SidenavAutosizeExample {\r\n  showFiller = false;\r\n}\r\n`,\r\n\t\t\tcssCode: `\r\n.example-container {\r\n  width: 500px;\r\n  height: 300px;\r\n  border: 1px solid rgba(0, 0, 0, 0.5);\r\n}\r\n.example-sidenav-content {\r\n  display: flex;\r\n  height: 100%;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.example-sidenav {\r\n  padding: 20px;\r\n}\r\n\t\t\t`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-sidenav',\r\n\ttemplateUrl: './sidenav.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-container {\r\n\t\twidth: 400px;\r\n\t\theight: 200px;\r\n\t\tmargin: 10px;\r\n\t\tborder: 1px solid #555;\r\n\t  }\r\n\t  .example-container {\r\n\t\twidth: 500px;\r\n\t\theight: 300px;\r\n\t\tborder: 1px solid rgba(0, 0, 0, 0.5);\r\n\t  }\r\n\t  .example-sidenav-content {\r\n\t\tdisplay: flex;\r\n\t\theight: 100%;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t  }\r\n\t  .example-sidenav {\r\n\t\tpadding: 20px;\r\n\t  }\r\n\t`]\r\n})\r\nexport class SidenavComponent implements OnInit {\r\n\r\n\texampleBasicSidenav;\r\n\texampleBasicDrawer;\r\n\texampleAutosizeSidenav;\r\n\r\n\tshouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(h => h.test(window.location.host));\r\n\tshowFiller = false;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasicSidenav = basicSidenav;\r\n\t\tthis.exampleBasicDrawer = basicDrawer;\r\n\t\tthis.exampleAutosizeSidenav = autosizeSidenav;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/toolbar/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleSingleRow\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-toolbar&gt;</code> is a container for headers, titles, or actions.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b>Single row:</b>\\r\\n\\t\\t\\t\\t\\tIn the most situations, a toolbar will be placed at the top of your application and will only have a single row that includes the title of your application.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-toolbar>\\r\\n\\t\\t\\t\\t\\t\\t<span>My Application</span>\\r\\n\\t\\t\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"examplMultipleRows\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe Material Design specifications describe that toolbars can also have multiple rows. Creating toolbars with multiple rows in Angular Material can be done by placing\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-toolbar-row&gt;</code> elements inside of a\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-toolbar&gt;</code>.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-toolbar>\\r\\n\\t\\t\\t\\t\\t\\t<mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>First Row</span>\\r\\n\\t\\t\\t\\t\\t\\t</mat-toolbar-row>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Second Row</span>\\r\\n\\t\\t\\t\\t\\t\\t</mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t</mat-toolbar>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"examplMultipleRows2\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b>Note:</b> Placing content outside of a\\r\\n\\t\\t\\t\\t\\t<code>&lt;mat-toolbar-row&gt;</code> when multiple rows are specified is not supported.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-toolbar color=\\\"primary\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Custom Toolbar</span>\\r\\n\\t\\t\\t\\t\\t\\t</mat-toolbar-row>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Second Line</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\\"example-spacer\\\"></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"example-icon\\\">verified_user</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-toolbar-row>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>Third Line</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\\"example-spacer\\\"></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"example-icon\\\">favorite</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"example-icon\\\">delete</mat-icon>\\r\\n\\t\\t\\t\\t\\t\\t</mat-toolbar-row>\\r\\n\\t\\t\\t\\t\\t</mat-toolbar>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst singleRow = {\r\n\t\tbeforeCodeTitle: 'Single row',\r\n\t\thtmlCode: `\r\n<mat-toolbar>\r\n  <span>My Application</span>\r\n</mat-toolbar>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic toolbar : single row\r\n*/\r\n@Component({\r\n  selector: 'toolbar-overview-example',\r\n  templateUrl: 'toolbar-overview-example.html',\r\n  styleUrls: ['toolbar-overview-example.css'],\r\n})\r\nexport class ToolbarOverviewExample {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst multipleRows = {\r\n\tbeforeCodeTitle: 'Multiple rows',\r\n\t\thtmlCode: `\r\n<mat-toolbar>\r\n  <mat-toolbar-row>\r\n    <span>First Row</span>\r\n  </mat-toolbar-row>\r\n  <mat-toolbar-row>\r\n    <span>Second Row</span>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic toolbar : multiple rows\r\n*/\r\n@Component({\r\nselector: 'toolbar-multi-example',\r\ntemplateUrl: 'toolbar-multi-example.html',\r\nstyleUrls: ['toolbar-multi-example.css'],\r\n})\r\nexport class ToolbarMultiExample {}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\n\tconst multipleRows2 = {\r\n\tbeforeCodeTitle: 'Multi-row toolbar',\r\n\t\thtmlCode: `\r\n<mat-toolbar color=\"primary\">\r\n  <mat-toolbar-row>\r\n    <span>Custom Toolbar</span>\r\n  </mat-toolbar-row>\r\n  <mat-toolbar-row>\r\n    <span>Second Line</span>\r\n    <span class=\"example-spacer\"></span>\r\n    <mat-icon class=\"example-icon\">verified_user</mat-icon>\r\n  </mat-toolbar-row>\r\n  <mat-toolbar-row>\r\n    <span>Third Line</span>\r\n    <span class=\"example-spacer\"></span>\r\n    <mat-icon class=\"example-icon\">favorite</mat-icon>\r\n    <mat-icon class=\"example-icon\">delete</mat-icon>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Basic toolbar : Multi-row toolbar\r\n*/\r\n@Component({\r\nselector: 'toolbar-multi-example',\r\ntemplateUrl: 'toolbar-multi-example.html',\r\nstyleUrls: ['toolbar-multi-example.css'],\r\n})\r\nexport class ToolbarMultiExample {}\r\n`,\r\n\t\t\tcssCode: `\r\n.example-icon {\r\n  padding: 0 14px;\r\n}\r\n.example-spacer {\r\n  flex: 1 1 auto;\r\n}`,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n@Component({\r\n\tselector: 'm-toolbar',\r\n\ttemplateUrl: './toolbar.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tstyles: [`\r\n\t.example-icon {\r\n\t\tpadding: 0 14px;\r\n\t}\r\n\t.example-spacer {\r\n\t\tflex: 1 1 auto;\r\n\t}\r\n\t`]\r\n})\r\nexport class ToolbarComponent implements OnInit {\r\n\r\n\texampleSingleRow;\r\n\texamplMultipleRows;\r\n\texamplMultipleRows2;\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleSingleRow = singleRow;\r\n\t\tthis.examplMultipleRows = multipleRows;\r\n\t\tthis.examplMultipleRows2 = multipleRows2;\r\n\t}\r\n}\r\n","module.exports = \"<mat-nav-list>\\r\\n\\t\\t<a href=\\\"https://keep.google.com/\\\" mat-list-item (click)=\\\"openLink($event)\\\">\\r\\n\\t\\t  <span mat-line>Google Keep</span>\\r\\n\\t\\t  <span mat-line>Add to a note</span>\\r\\n\\t\\t</a>\\r\\n\\t  \\r\\n\\t\\t<a href=\\\"https://docs.google.com/\\\" mat-list-item (click)=\\\"openLink($event)\\\">\\r\\n\\t\\t  <span mat-line>Google Docs</span>\\r\\n\\t\\t  <span mat-line>Embed in a document</span>\\r\\n\\t\\t</a>\\r\\n\\t  \\r\\n\\t\\t<a href=\\\"https://plus.google.com/\\\" mat-list-item (click)=\\\"openLink($event)\\\">\\r\\n\\t\\t  <span mat-line>Google Plus</span>\\r\\n\\t\\t  <span mat-line>Share with your friends</span>\\r\\n\\t\\t</a>\\r\\n\\t  \\r\\n\\t\\t<a href=\\\"https://hangouts.google.com/\\\" mat-list-item (click)=\\\"openLink($event)\\\">\\r\\n\\t\\t  <span mat-line>Google Hangouts</span>\\r\\n\\t\\t  <span mat-line>Show to your coworkers</span>\\r\\n\\t\\t</a>\\r\\n\\t  </mat-nav-list>\\r\\n\\t  \\r\\n\\t  \\r\\n\\t  <!-- Copyright 2018 Google Inc. All Rights Reserved.\\r\\n\\t\\t  Use of this source code is governed by an MIT-style license that\\r\\n\\t\\t  can be found in the LICENSE file at http://angular.io/license -->\"","import { Component } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material';\r\n\r\n\r\n@Component({\r\n\tselector: 'm-bottom-sheet-example',\r\n\ttemplateUrl: './bottom-sheet-example.component.html'\r\n})\r\nexport class BottomSheetExampleComponent {\r\n\tconstructor(private bottomSheetRef: MatBottomSheetRef<BottomSheetExampleComponent>) {}\r\n\r\n\topenLink(event: MouseEvent): void {\r\n\t  this.bottomSheetRef.dismiss();\r\n\t  event.preventDefault();\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation\\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/bottom-sheet/\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-12\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe\\r\\n\\t\\t\\t\\t\\t<code>MatBottomSheet</code> service can be used to open Material Design panels to the bottom of the screen. These panels are intended primarily as an interaction on mobile devices where they can be used as an alternative to dialogs and menus.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t\\tYou can open a bottom sheet by calling the <code>open</code> method with a component to be loaded and an optional config object. The <code>open</code> method will return an instance of <code>MatBottomSheetRef</code></span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<p>You have receive a file called \\\"cat-picture.jpeg\\\".</p>\\r\\n\\t\\t\\t\\t\\t<button mat-raised-button (click)=\\\"openBottomSheet()\\\">Open file</button>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatBottomSheetRef, MatBottomSheet } from '@angular/material';\r\nimport { BottomSheetExampleComponent } from './bottom-sheet-example/bottom-sheet-example.component';\r\n\r\nconst basic = {\r\n\t\tbeforeCodeTitle: 'Bottom Sheet Overview',\r\n\t\thtmlCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatBottomSheet, MatBottomSheetRef} from '@angular/material';\\n\r\n/**\r\n* @title Bottom Sheet Overview\r\n@Component({\r\n  selector: 'bottom-sheet-overview-example',\r\n  templateUrl: 'bottom-sheet-overview-example.html',\r\n  styleUrls: ['bottom-sheet-overview-example.css'],\r\n})\r\nexport class BottomSheetOverviewExample {\r\n  constructor(private bottomSheet: MatBottomSheet) {}\r\n\r\n  openBottomSheet(): void {\r\n    this.bottomSheet.open(BottomSheetOverviewExampleSheet);\r\n  }\r\n}\\n\r\n\r\n@Component({\r\n  selector: 'bottom-sheet-overview-example-sheet',\r\n  templateUrl: 'bottom-sheet-overview-example-sheet.html',\r\n})\r\nexport class BottomSheetOverviewExampleSheet {\r\n  constructor(private bottomSheetRef: MatBottomSheetRef<BottomSheetOverviewExampleSheet>) {}\r\n\r\n  openLink(event: MouseEvent): void {\r\n    this.bottomSheetRef.dismiss();\r\n    event.preventDefault();\r\n  }\r\n}`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\n@Component({\r\n\tselector: 'm-bottom-sheet',\r\n\ttemplateUrl: './bottom-sheet.component.html'\r\n})\r\nexport class BottomSheetComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\tconstructor(private bottomSheet: MatBottomSheet) {}\r\n\r\n\topenBottomSheet(): void {\r\n\t  this.bottomSheet.open(BottomSheetExampleComponent);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/dialog/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe\\r\\n\\t\\t\\t\\t\\t<mark>MatDialog</mark> service can be used to open modal dialogs with Material Design styling and animations.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<ol>\\r\\n\\t\\t\\t\\t\\t\\t<li>\\r\\n\\t\\t\\t\\t\\t\\t  <mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input matInput [(ngModel)]=\\\"name\\\" placeholder=\\\"What's your name?\\\">\\r\\n\\t\\t\\t\\t\\t\\t  </mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t\\t<li>\\r\\n\\t\\t\\t\\t\\t\\t  <button mat-raised-button (click)=\\\"openDialog()\\\">Pick one</button>\\r\\n\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t\\t<li *ngIf=\\\"animal$ | async as anim\\\">\\r\\n\\t\\t\\t\\t\\t\\t  You chose: {{anim}}\\r\\n\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t  </ol>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleInjecting\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tTo access the data in your dialog component, you have to use the\\r\\n\\t\\t\\t\\t\\t<mark>MAT_DIALOG_DATA</mark> injection token\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-button (click)=\\\"openDialog2()\\\">Open dialog</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"examplHeader\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tOnce a dialog opens, the dialog will automatically focus the first tabbable element.\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<p class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tYou can control which elements are tab stops with the\\r\\n\\t\\t\\t\\t\\t<mark>tabindex</mark> attribute\\r\\n\\t\\t\\t\\t</p>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-button (click)=\\\"openDialog3()\\\">Open dialog</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'm-modal3',\r\n\ttemplate: `<div class=\"col-xl-12\"><div class=\"col-xl-12\"><h1 mat-dialog-title>Favorite Animal</h1>\r\n\t<h2 mat-dialog-title>Install Angular</h2>\r\n<mat-dialog-content>\r\n  <h3>DEVELOP ACROSS ALL PLATFORMS</h3>\r\n  <p>Learn one way to build applications with Angular and reuse your code and abilities to build\r\n    apps for any deployment target. For web, mobile web, native mobile and native desktop.</p>\r\n  <h3>SPEED &amp; PERFORMANCE</h3>\r\n  <p>Achieve the maximum speed possible on the Web Platform today, and take it further, via Web\r\n    Workers and server-side rendering. Angular puts you in control over scalability. Meet huge data requirements\r\n    by building data models on RxJS, Immutable.js or another push-model.</p>\r\n  <h3>INCREDIBLE TOOLING</h3>\r\n  <p>Build features quickly with simple, declarative templates. Extend the template language with your own\r\n    components and use a wide array of existing components. Get immediate Angular-specific help and feedback\r\n    with nearly every IDE and editor. All this comes together so you can focus on building amazing apps rather\r\n    than trying to make the code work.</p>\r\n  <h3>LOVED BY MILLIONS</h3>\r\n  <p>From prototype through global deployment, Angular delivers the productivity and scalable infrastructure\r\n    that supports Google's largest applications.</p>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Install</button>\r\n</mat-dialog-actions></div></div>`,\r\n})\r\nexport class Modal3Component {\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-modal2',\r\n\ttemplate: `<div class=\"col-xl-12\"><div class=\"col-xl-12\"><h1 mat-dialog-title>Favorite Animal</h1>\r\n\t<div mat-dialog-content>\r\n\t  My favorite animal is:\r\n\t  <ul>\r\n\t\t<li>\r\n\t\t  <span *ngIf=\"data.animal === 'panda'\">&#10003;</span> Panda\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t  <span *ngIf=\"data.animal === 'unicorn'\">&#10003;</span> Unicorn\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t  <span *ngIf=\"data.animal === 'lion'\">&#10003;</span> Lion\r\n\t\t</li>\r\n\t  </ul>\r\n\t</div>\r\n\t</div>\r\n\t</div>\r\n\t`,\r\n})\r\nexport class Modal2Component {\r\n\tconstructor(@Inject(MAT_DIALOG_DATA) public data: any) { }\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-modal',\r\n\ttemplate: `\r\n\t<div class=\"col-xl-12\">\r\n\t<div class=\"col-xl-12\">\r\n\t\t<br />\r\n\t\t<h1 mat-dialog-title>Hi {{data.name}}</h1>\r\n\t\t<div mat-dialog-content>\r\n\t\t  <p>What's your favorite animal?</p>\r\n\t\t  <mat-form-field>\r\n\t\t\t<input matInput [(ngModel)]=\"data.animal\">\r\n\t\t  </mat-form-field>\r\n\t\t</div>\r\n\t\t<div mat-dialog-actions>\r\n\t\t  <button mat-button (click)=\"onNoClick()\">No Thanks</button>\r\n\t\t  <button mat-button [mat-dialog-close]=\"data.animal\" cdkFocusInitial>Ok</button>\r\n\t\t</div>\r\n\t\t<br />\r\n\t</div>\r\n\t</div>`,\r\n})\r\nexport class ModalComponent {\r\n\r\n\tconstructor(\r\n\t\tpublic dialogRef: MatDialogRef<ModalComponent>,\r\n\t\t@Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n\tonNoClick(): void {\r\n\t\tthis.dialogRef.close();\r\n\t}\r\n}\r\n\r\nconst basic = {\r\n\t\tbeforeCodeTitle: 'Dialog Overview',\r\n\t\thtmlCode: `\r\n\t\t<h1 mat-dialog-title>Hi {{data.name}}</h1>\r\n\t\t<div mat-dialog-content>\r\n\t\t  <p>What's your favorite animal?</p>\r\n\t\t  <mat-form-field>\r\n\t\t\t<input matInput [(ngModel)]=\"data.animal\">\r\n\t\t  </mat-form-field>\r\n\t\t</div>\r\n\t\t<div mat-dialog-actions>\r\n\t\t  <button mat-button (click)=\"onNoClick()\">No Thanks</button>\r\n\t\t  <button mat-button [mat-dialog-close]=\"data.animal\" cdkFocusInitial>Ok</button>\r\n\t\t</div>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component, Inject} from '@angular/core';\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';\\n\r\n/**\r\n* @title Dialog Overview\r\n*/\r\n@Component({\r\n  selector: 'dialog-overview-example',\r\n  templateUrl: 'dialog-overview-example.html',\r\n  styleUrls: ['dialog-overview-example.css'],\r\n})\r\nexport class DialogOverviewExample {\\n\r\n  animal: string;\r\n  name: string;\\n\r\n  constructor(public dialog: MatDialog) {}\\n\r\n  openDialog(): void {\r\n    let dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\r\n      width: '250px',\r\n      data: { name: this.name, animal: this.animal }\r\n    });\\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed');\r\n      this.animal = result;\r\n    });\r\n  }\r\n}\\n\r\n@Component({\r\n  selector: 'dialog-overview-example-dialog',\r\n  template: \\`\r\n    <h1 mat-dialog-title>Hi {{data.name}}</h1>\r\n    <div mat-dialog-content>\r\n      <p>What's your favorite animal?</p>\r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"data.animal\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-button (click)=\"onNoClick()\">No Thanks</button>\r\n      <button mat-button [mat-dialog-close]=\"data.animal\" cdkFocusInitial>Ok</button>\r\n    </div>\\`\r\n})\r\nexport class DialogOverviewExampleDialog {\\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\r\n      @Inject(MAT_DIALOG_DATA) public data: any) { }\\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\\n\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst injecting = {\r\n\t\tbeforeCodeTitle: 'Injecting data when opening a dialog',\r\n\t\thtmlCode: '<button mat-button (click)=\"openDialog()\">Open dialog</button>',\r\n\t\ttsCode: `\r\nimport {Component, Inject} from '@angular/core';\r\nimport {MatDialog, MAT_DIALOG_DATA} from '@angular/material';\\n\r\n/**\r\n* @title Injecting data when opening a dialog\r\n*/\r\n@Component({\r\n  selector: 'dialog-data-example',\r\n  templateUrl: 'dialog-data-example.html',\r\n  styleUrls: ['dialog-data-example.css']\r\n})\r\nexport class DialogDataExample {\r\n  constructor(public dialog: MatDialog) {}\\n\r\n  openDialog() {\r\n    this.dialog.open(DialogDataExampleDialog, {\r\n      data: {\r\n        animal: 'panda'\r\n     }\r\n    });\r\n  }\r\n}\\n\r\n@Component({\r\n  selector: 'dialog-data-example-dialog',\r\n  template: \\`\r\n    <h1 mat-dialog-title>Favorite Animal</h1>\r\n    <div mat-dialog-content>\r\n      My favorite animal is:\r\n      <ul>\r\n        <li>\r\n          <span *ngIf=\"data.animal === 'panda'\">&#10003;</span> Panda\r\n        </li>\r\n        <li>\r\n          <span *ngIf=\"data.animal === 'unicorn'\">&#10003;</span> Unicorn\r\n        </li>\r\n        <li>\r\n          <span *ngIf=\"data.animal === 'lion'\">&#10003;</span> Lion\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\t\\`,\r\n})\r\nexport class DialogDataExampleDialog {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {}\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\nconst header = {\r\n\t\tbeforeCodeTitle: 'Dialog with header, scrollable content and actions',\r\n\t\thtmlCode: `\r\n<button mat-button (click)=\"openDialog()\">Open dialog</button>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatDialog} from '@angular/material';\\n\r\n/**\r\n* @title Dialog with header, scrollable content and actions\r\n*/\r\n@Component({\r\n  selector: 'dialog-content-example',\r\n  templateUrl: 'dialog-content-example.html',\r\n  styleUrls: ['dialog-content-example.css'],\r\n})\r\nexport class DialogContentExample {\r\n  constructor(public dialog: MatDialog) {}\\n\r\n  openDialog() {\r\n    const dialogRef = this.dialog.open(DialogContentExampleDialog, {\r\n      height: '350px'\r\n    });\\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log(\\`Dialog result: \\${result}\\`);\r\n    });\r\n  }\r\n}\\n\r\n@Component({\r\n  selector: 'dialog-content-example-dialog',\r\n  templateUrl: 'dialog-content-example-dialog.html',\r\n})\r\nexport class DialogContentExampleDialog {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nexport interface DialogData {\r\n\tanimal: string;\r\n\tname: string;\r\n}\r\n\r\n@Component({\r\n\tselector: 'm-dialog',\r\n\ttemplateUrl: './dialog.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\tanimal2: string = '';\r\n\tanimalSubject = new BehaviorSubject<string>('');\r\n\tanimal$: Observable<string>;\r\n\tanimal: string;\r\n\tname: string;\r\n\r\n\texampleBasic;\r\n\texampleInjecting;\r\n\texamplHeader;\r\n\r\n\tconstructor(public dialog: MatDialog) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.animal$ = this.animalSubject.asObservable();\r\n\t\tthis.animal$.subscribe(result => { this.animal = result; });\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleInjecting = injecting;\r\n\t\tthis.examplHeader = header;\r\n\t}\r\n\r\n\topenDialog(): void {\r\n\t\tconst dialogRef = this.dialog.open(ModalComponent, {\r\n\t\t\twidth: '280px',\r\n\t\t\tdata: { name: this.name, animal: this.animal }\r\n\t\t});\r\n\r\n\t\tdialogRef.afterClosed().subscribe(result => {\r\n\t\t\tif (result) {\r\n\t\t\t\tthis.animalSubject.next(result);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\topenDialog2() {\r\n\t\tthis.dialog.open(Modal2Component, {\r\n\t\t\tdata: {\r\n\t\t\t\tanimal: 'panda'\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\topenDialog3() {\r\n\t\tconst dialogRef = this.dialog.open(Modal3Component, {\r\n\t\t\theight: '350px'\r\n\t\t});\r\n\r\n\t\tdialogRef.afterClosed().subscribe(result => {\r\n\t\t\tconsole.log(`Dialog result: ${result}`);\r\n\t\t});\r\n\t}\r\n}\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/tooltip/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\tThe Angular Material tooltip provides a text label that is displayed when the user hovers over or longpresses an element.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<span matTooltip=\\\"Tooltip!\\\">I have a tooltip</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleCustomPosition\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"example-tooltip-host\\\" matTooltip=\\\"Tooltip!\\\" [matTooltipPosition]=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span>Show tooltip:</span>&nbsp;&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t\\t<mat-select class=\\\"example-select\\\" [(ngModel)]=\\\"position\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"before\\\">Before</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"after\\\">After</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"above\\\">Above</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"below\\\">Below</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"left\\\">Left</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-option value=\\\"right\\\">Right</mat-option>\\r\\n\\t\\t\\t\\t\\t\\t\\t</mat-select>\\r\\n\\t\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleShowHigh\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<b>Show and hide delays:</b>\\r\\n\\t\\t\\t\\t\\tTo add a delay before showing or hiding the tooltip, you can use the inputs\\r\\n\\t\\t\\t\\t\\t<mark>matTooltipShowDelay</mark> and\\r\\n\\t\\t\\t\\t\\t<mark>matTooltipHideDelay</mark> to provide a delay time in milliseconds.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-raised-button matTooltip=\\\"Tooltip!\\\" matTooltipShowDelay=\\\"1000\\\">\\r\\n\\t\\t\\t\\t\\t\\tMy tooltip waits one second to show\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button mat-raised-button matTooltip=\\\"Tooltip!\\\" matTooltipHideDelay=\\\"2000\\\">\\r\\n\\t\\t\\t\\t\\t\\tMy tooltip waits two seconds to hide\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\r\\n\\t\\t <m-material-preview [viewItem]=\\\"exampleDelay\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t\\t<b>Changing the default delay behavior:</b>\\r\\n\\t\\t\\t\\t\\t\\tYou can configure your app's tooltip default show/hide delays by configuring and providing your options using the <mark>MAT_TOOLTIP_DEFAULT_OPTIONS</mark> injection token.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button matTooltip=\\\"By default, I delay\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tButton with delay-default tooltip\\r\\n\\t\\t\\t\\t\\t\\t\\t  </button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleManually\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t\\t<b>Manually calling show() and hide():</b>\\r\\n\\t\\t\\t\\t\\t\\tTo manually cause the tooltip to show or hide, you can call the <mark>show</mark> and <mark>hide</mark> directive methods, which both accept a number in milliseconds to delay before applying the display change.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button (click)=\\\"tooltip.show()\\\"> Show tooltip </button>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<span matTooltip=\\\"This is the tooltip message\\\" #tooltip=\\\"matTooltip\\\">\\r\\n\\t\\t\\t\\t\\t\\t  I have a tooltip\\r\\n\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t</m-material-preview> \\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\nconst basic = {\r\n\t\tbeforeCodeTitle: 'Basic table',\r\n\t\thtmlCode: `\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table #table [dataSource]=\"dataSource\">\r\n    <!--- Note that these columns can be defined in any order.\r\n\t\t\t\tThe actual rendered columns are set as a property on the row definition\" -->\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"weight\">\r\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.weight}} </mat-cell>\r\n    </ng-container>\r\n    <!-- Symbol Column -->\r\n    <ng-container matColumnDef=\"symbol\">\r\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.symbol}} </mat-cell>\r\n    </ng-container>\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\n/**\r\n* @title Basic tooltip\r\n*/\r\n@Component({\r\n  selector: 'tooltip-overview-example',\r\n  templateUrl: 'tooltip-overview-example.html',\r\n  styleUrls: ['tooltip-overview-example.css'],\r\n})\r\nexport class TooltipOverviewExample {}\r\n\t\t`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst customPosition = {\r\n\t\tbeforeCodeTitle: 'Tooltip with custom position',\r\n\t\thtmlCode: `\r\n<div class=\"example-tooltip-host\" matTooltip=\"Tooltip!\" [matTooltipPosition]=\"position\">\r\n  <span>Show tooltip</span>\r\n  <mat-form-field>\r\n    <mat-select class=\"example-select\" [(ngModel)]=\"position\">\r\n      <mat-option value=\"before\">Before</mat-option>\r\n      <mat-option value=\"after\">After</mat-option>\r\n      <mat-option value=\"above\">Above</mat-option>\r\n      <mat-option value=\"below\">Below</mat-option>\r\n      <mat-option value=\"left\">Left</mat-option>\r\n      <mat-option value=\"right\">Right</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</div>\r\n\t\t`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Tooltip with custom position\r\n*/\r\n@Component({\r\n  selector: 'tooltip-position-example',\r\n  templateUrl: 'tooltip-position-example.html',\r\n  styleUrls: ['tooltip-position-example.css'],\r\n})\r\nexport class TooltipPositionExample {\r\n  position = 'before';\r\n}\r\n\t\t`,\r\n\t\tcssCode: `\r\n.example-tooltip-host {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  margin: 50px;\r\n}\r\n.example-select {\r\n  margin: 0 10px;\r\n}\r\n\t\t`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst showHigh = {\r\n\t\tbeforeCodeTitle: 'Tooltip with a show and hide delay',\r\n\t\tbeforeCodeDescription: ``,\r\n\t\thtmlCode: `\r\n<button mat-raised-button matTooltip=\"Tooltip!\" matTooltipShowDelay=\"1000\">\r\n  My tooltip waits one second to show\r\n</button>\r\n<button mat-raised-button matTooltip=\"Tooltip!\" matTooltipHideDelay=\"2000\">\r\n  My tooltip waits two seconds to hide\r\n</button>`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Tooltip with a show and hide delay\r\n*/\r\n@Component({\r\n  selector: 'tooltip-delay-example',\r\n  templateUrl: 'tooltip-delay-example.html',\r\n  styleUrls: ['tooltip-delay-example.css'],\r\n})\r\nexport class TooltipDelayExample {}\r\n`,\r\n\t\tcssCode: `\r\nbutton {\r\n  margin: 8px;\r\n}\r\n\t\t`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst delay = {\r\n\t\tbeforeCodeTitle: 'Tooltip with a show and hide delay',\r\n\t\thtmlCode: `\r\n<button mat-raised-button matTooltip=\"By default, I delay\">\r\n  Button with delay-default tooltip\r\n</button>\r\n\t\t`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltipDefaultOptions} from '@angular/material';\\n\r\n/** Custom options the configure the tooltip's default show/hide delays. */\r\nexport const myCustomTooltipDefaults: MatTooltipDefaultOptions = {\r\n  showDelay: 1000,\r\n  hideDelay: 1000,\r\n  touchendHideDelay: 1000,\r\n};\\n\r\n/**\r\n* @title Tooltip with a show and hide delay\r\n*/\r\n@Component({\r\n  selector: 'tooltip-modified-defaults-example',\r\n  templateUrl: 'tooltip-modified-defaults-example.html',\r\n  styleUrls: ['tooltip-modified-defaults-example.css'],\r\n  providers: [\r\n    {provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: myCustomTooltipDefaults}\r\n  ],\r\n})\r\nexport class TooltipModifiedDefaultsExample {}\r\n\t\t`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\nconst manually = {\r\n\t\tbeforeCodeTitle: 'Tooltip that can be manually shown/hidden.',\r\n\t\thtmlCode: `\r\n<button mat-raised-button (click)=\"tooltip.show()\"> Show tooltip </button>\r\n<span matTooltip=\"This is the tooltip message\" #tooltip=\"matTooltip\">\r\n  I have a tooltip\r\n</span>\r\n\t\t`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\\n\r\n/**\r\n* @title Tooltip that can be manually shown/hidden.\r\n*/\r\n@Component({\r\n  selector: 'tooltip-manual-example',\r\n  templateUrl: 'tooltip-manual-example.html',\r\n  styleUrls: ['tooltip-manual-example.css'],\r\n})\r\nexport class TooltipManualExample {}\r\n\t\t`,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false\r\n\t};\r\n\r\n@Component({\r\n\tselector: 'm-material-tooltip',\r\n\ttemplateUrl: './material-tooltip.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MaterialTooltipComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleCustomPosition;\r\n\texampleShowHigh;\r\n\texampleDelay;\r\n\texampleManually;\r\n\r\n\tposition = 'before';\r\n\r\n\tngOnInit() {\r\n\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleCustomPosition = customPosition;\r\n\t\tthis.exampleShowHigh = showHigh;\r\n\t\tthis.exampleDelay = delay;\r\n\t\tthis.exampleManually = manually;\r\n\t}\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'm-snack-bar-component-example-snack',\r\n\ttemplate: `\r\n\t<span class=\"example-pizza-party\">Pizza party!!! 🍕</span>\r\n\t`,\r\n\tstyles: [`.example-pizza-party { color: hotpink; }`],\r\n  })\r\nexport class PizzaPartyComponent { }\r\n","module.exports = \"<m-notice [icon]=\\\"'flaticon-exclamation m--font-primary'\\\">\\r\\n\\tFor more info please check the components's official demos & documentation \\r\\n\\t<a class=\\\"m-link\\\" href=\\\"https://material.angular.io/components/snack-bar/overview\\\" target=\\\"_blank\\\">demos & documentation</a>\\r\\n</m-notice>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleBasic\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<mark>MatSnackBar</mark> is a service for displaying snack-bar notifications.\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput value=\\\"Disco party!\\\" placeholder=\\\"Message\\\" #message>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput value=\\\"Dance\\\" placeholder=\\\"Action\\\" #action>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button mat-button (click)=\\\"openSnackBar(message.value, action.value)\\\">Show snack-bar</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleCustom\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<button mat-button (click)=\\\"openSnackBar2()\\\" aria-label=\\\"Show an example snack-bar\\\">\\r\\n\\t\\t\\t\\t\\t\\tPizza party\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-xl-6\\\">\\r\\n\\t\\t<m-material-preview [viewItem]=\\\"exampleDismissal\\\">\\r\\n\\t\\t\\t<div class=\\\"m-section\\\">\\r\\n\\t\\t\\t\\t<span class=\\\"m-section__sub\\\">\\r\\n\\t\\t\\t\\t\\t<mark>Dismissal</mark> example with 6 seconds duration\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t<div class=\\\"m-separator m-separator--dashed\\\"></div>\\r\\n\\t\\t\\t\\t<div class=\\\"m-section__content\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput value=\\\"Disco party!\\\" placeholder=\\\"Message\\\" #message>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput value=\\\"Dance\\\" placeholder=\\\"Action\\\" #action>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button mat-button (click)=\\\"openSnackBar3(message.value, action.value)\\\">Show snack-bar</button>\\r\\n\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</m-material-preview>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { PizzaPartyComponent } from './pizza-party.component';\r\n\r\n\r\nconst basic = {\r\n\t\tbeforeCodeTitle: 'Basic snack-bar',\r\n\t\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput value=\"Disco party!\" placeholder=\"Message\" #message>\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput value=\"Dance\" placeholder=\"Action\" #action>\r\n</mat-form-field>\r\n<button mat-button (click)=\"openSnackBar(message.value, action.value)\">Show snack-bar</button>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material';\\n\r\n/**\r\n* @title Basic snack-bar\r\n*/\r\n@Component({\r\n  selector: 'snack-bar-overview-example',\r\n  templateUrl: 'snack-bar-overview-example.html',\r\n  styleUrls: ['snack-bar-overview-example.css'],\r\n})\r\nexport class SnackBarOverviewExample {\r\n  constructor(public snackBar: MatSnackBar) {}\\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\n\r\n\r\nconst custom = {\r\n\t\tbeforeCodeTitle: 'Snack-bar with a custom component',\r\n\t\thtmlCode: `\r\n<button mat-button (click)=\"openSnackBar()\" aria-label=\"Show an example snack-bar\">\r\n  Pizza party\r\n</button>\r\n`,\r\n\t\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material';\\n\r\n/**\r\n* @title Snack-bar with a custom component\r\n*/\r\n@Component({\r\n  selector: 'snack-bar-component-example',\r\n  templateUrl: 'snack-bar-component-example.html',\r\n})\r\nexport class SnackBarComponentExample {\r\n  constructor(public snackBar: MatSnackBar) {}\\n\r\n  openSnackBar() {\r\n    this.snackBar.openFromComponent(PizzaPartyComponent, {\r\n      duration: 500,\r\n    });\r\n  }\r\n}\\n\r\n@Component({\r\n  selector: 'snack-bar-component-example-snack',\r\n  template: \\`\r\n\t<span _ngcontent-c3=\"\" class=\"example-pizza-party\">\r\n      Pizza party!!! 🍕\r\n    </span>\\`,\r\n  styles: [\\`.example-pizza-party { color: hotpink; }\\`],\r\n})\r\nexport class PizzaPartyComponent {}\r\n`,\r\n\t\tcssCode: ``,\r\n\t\tviewCode: ``,\r\n\t\tisCodeVisible: false,\r\n\t\tisExampleExpanded: true\r\n\t};\r\n\r\nconst dismissal = {\r\n\tbeforeCodeTitle: 'Dismissal example with 6 seconds duration',\r\n\thtmlCode: `\r\n<mat-form-field>\r\n  <input matInput value=\"Disco party!\" placeholder=\"Message\" #message>\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput value=\"Dance\" placeholder=\"Action\" #action>\r\n</mat-form-field>\r\n<button mat-button (click)=\"openSnackBar(message.value, action.value)\">Show snack-bar</button>\r\n`,\r\n\ttsCode: `\r\nimport {Component} from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material';\\n\r\n/**\r\n* @title Basic snack-bar\r\n*/\r\n@Component({\r\n  selector: 'snack-bar-overview-example',\r\n  templateUrl: 'snack-bar-overview-example.html',\r\n  styleUrls: ['snack-bar-overview-example.css'],\r\n})\r\nexport class SnackBarOverviewExample {\r\n  constructor(public snackBar: MatSnackBar) {}\\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n`,\r\n\tcssCode: ``,\r\n\tviewCode: ``,\r\n\tisCodeVisible: false,\r\n\tisExampleExpanded: true\r\n};\r\n\r\n@Component({\r\n\tselector: 'm-snackbar',\r\n\ttemplateUrl: './snackbar.component.html',\r\n\tstyles: [`\r\n\t`]\r\n})\r\nexport class SnackbarComponent implements OnInit {\r\n\r\n\texampleBasic;\r\n\texampleCustom;\r\n\texampleDismissal;\r\n\r\n\tconstructor(public snackBar: MatSnackBar) { }\r\n\r\n\topenSnackBar(message: string, action: string) {\r\n\t\tthis.snackBar.open(message, action, {\r\n\t\t\tduration: 2000,\r\n\t\t});\r\n\t}\r\n\r\n\topenSnackBar2() {\r\n\t\tthis.snackBar.openFromComponent(PizzaPartyComponent, {\r\n\t\t  duration: 500,\r\n\t\t});\r\n\t}\r\n\r\n\topenSnackBar3(message: string, action: string) {\r\n\t\tthis.snackBar.open(message, action, {\r\n\t\t  duration: 6500,\r\n\t\t});\r\n\t  }\r\n\r\n\tngOnInit() {\r\n\t\tthis.exampleBasic = basic;\r\n\t\tthis.exampleCustom = custom;\r\n\t\tthis.exampleDismissal = dismissal;\r\n\t}\r\n}\r\n"],"sourceRoot":""}